<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/META-INF/persistence.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/META-INF/persistence.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;persistence xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot;&#10;             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;             xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/persistence&#10;                                 http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd&quot;&#10;             version=&quot;2.0&quot;&gt;&#10;&#10;    &lt;!-- Définition de l'unité de persistance pour l'application --&gt;&#10;    &lt;persistence-unit name=&quot;jpaPU&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;&#10;        &lt;!-- Liste des classes d'entités à mapper --&gt;&#10;        &lt;class&gt;entite.TypeAbonnement&lt;/class&gt;&#10;        &lt;class&gt;entite.Salle&lt;/class&gt;&#10;        &lt;class&gt;entite.Equipement&lt;/class&gt;&#10;        &lt;class&gt;entite.Notification&lt;/class&gt;&#10;&#10;&#10;        &lt;!-- Configuration des propriétés Hibernate --&gt;&#10;        &lt;properties&gt;&#10;            &lt;!-- Connexion à la base de données PostgreSQL --&gt;&#10;            &lt;property name=&quot;hibernate.connection.driver_class&quot; value=&quot;org.postgresql.Driver&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.connection.url&quot; value=&quot;jdbc:postgresql://localhost:5432/gym&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.connection.username&quot; value=&quot;postgres&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.connection.password&quot; value=&quot;Jefto&quot;/&gt;&#10;            &lt;property name=&quot;javax.persistence.schema-generation.database.action&quot; value=&quot;create&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;            &lt;!-- Dialecte pour PostgreSQL --&gt;&#10;            &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.PostgreSQLDialect&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;&#10;        &lt;/properties&gt;&#10;    &lt;/persistence-unit&gt;&#10;&#10;&lt;/persistence&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;persistence xmlns=&quot;http://java.sun.com/xml/ns/persistence&quot;&#10;             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;             xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/persistence&#10;                                 http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd&quot;&#10;             version=&quot;2.0&quot;&gt;&#10;&#10;    &lt;!-- Définition de l'unité de persistance pour l'application --&gt;&#10;    &lt;persistence-unit name=&quot;jpaPU&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;&#10;        &lt;!-- Liste des classes d'entités à mapper --&gt;&#10;        &lt;class&gt;entite.TypeAbonnement&lt;/class&gt;&#10;        &lt;class&gt;entite.Salle&lt;/class&gt;&#10;        &lt;class&gt;entite.Equipement&lt;/class&gt;&#10;        &lt;class&gt;entite.Notification&lt;/class&gt;&#10;        &lt;class&gt;entite.Membre&lt;/class&gt;&#10;        &lt;class&gt;entite.Client&lt;/class&gt;&#10;        &lt;class&gt;entite.Abonnement&lt;/class&gt;&#10;        &lt;class&gt;entite.DemandeInscription&lt;/class&gt;&#10;        &lt;class&gt;entite.Paiement&lt;/class&gt;&#10;        &lt;class&gt;entite.MoyenDePaiement&lt;/class&gt;&#10;        &lt;class&gt;entite.Horaire&lt;/class&gt;&#10;        &lt;class&gt;entite.Seance&lt;/class&gt;&#10;        &lt;class&gt;entite.Ticket&lt;/class&gt;&#10;&#10;        &lt;!-- Configuration des propriétés Hibernate --&gt;&#10;        &lt;properties&gt;&#10;            &lt;!-- Connexion à la base de données PostgreSQL --&gt;&#10;            &lt;property name=&quot;hibernate.connection.driver_class&quot; value=&quot;org.postgresql.Driver&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.connection.url&quot; value=&quot;jdbc:postgresql://localhost:5432/gym&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.connection.username&quot; value=&quot;postgres&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.connection.password&quot; value=&quot;Jefto&quot;/&gt;&#10;            &#10;            &lt;!-- Configuration pour la création/mise à jour automatique des tables --&gt;&#10;            &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;            &#10;            &lt;!-- Dialecte pour PostgreSQL --&gt;&#10;            &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.PostgreSQLDialect&quot;/&gt;&#10;        &lt;/properties&gt;&#10;    &lt;/persistence-unit&gt;&#10;&#10;&lt;/persistence&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/dao/AbonnementDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/dao/AbonnementDao.java" />
              <option name="originalContent" value="package dao;&#10;&#10;import entite.Abonnement;&#10;&#10;public class AbonnementDao extends GenericDao&lt;Abonnement, Integer&gt;{&#10;    public AbonnementDao(){&#10;        super();&#10;        this.classEntity = Abonnement.class;&#10;        this.PrimaryKeyName = &quot;id&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao;&#13;&#10;&#13;&#10;import entite.Abonnement;&#13;&#10;import javax.persistence.TypedQuery;&#13;&#10;import java.util.List;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;&#13;&#10;public class AbonnementDao extends GenericDao&lt;Abonnement, Integer&gt;{&#13;&#10;    public AbonnementDao(){&#13;&#10;        super();&#13;&#10;        this.classEntity = Abonnement.class;&#13;&#10;        this.PrimaryKeyName = &quot;id&quot;;&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Récupère tous les abonnements d'un membre, triés par date de fin décroissante&#13;&#10;     * @param membreId ID du membre&#13;&#10;     * @return Liste des abonnements du membre&#13;&#10;     */&#13;&#10;    public List&lt;Abonnement&gt; getAbonnementsByMembre(Integer membreId) {&#13;&#10;        try {&#13;&#10;            TypedQuery&lt;Abonnement&gt; query = em.createQuery(&#13;&#10;                &quot;SELECT a FROM Abonnement a WHERE a.membre.id = :membreId ORDER BY a.dateFin DESC&quot;, &#13;&#10;                Abonnement.class);&#13;&#10;            query.setParameter(&quot;membreId&quot;, membreId);&#13;&#10;            return query.getResultList();&#13;&#10;        } catch (Exception e) {&#13;&#10;            e.printStackTrace();&#13;&#10;            return List.of();&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Récupère l'abonnement actif d'un membre (s'il en a un)&#13;&#10;     * @param membreId ID du membre&#13;&#10;     * @return Abonnement actif ou null si aucun&#13;&#10;     */&#13;&#10;    public Abonnement getAbonnementActif(Integer membreId) {&#13;&#10;        try {&#13;&#10;            TypedQuery&lt;Abonnement&gt; query = em.createQuery(&#13;&#10;                &quot;SELECT a FROM Abonnement a WHERE a.membre.id = :membreId AND a.dateFin &gt;= :now ORDER BY a.dateFin DESC&quot;, &#13;&#10;                Abonnement.class);&#13;&#10;            query.setParameter(&quot;membreId&quot;, membreId);&#13;&#10;            query.setParameter(&quot;now&quot;, LocalDateTime.now());&#13;&#10;            query.setMaxResults(1);&#13;&#10;            List&lt;Abonnement&gt; results = query.getResultList();&#13;&#10;            return results.isEmpty() ? null : results.get(0);&#13;&#10;        } catch (Exception e) {&#13;&#10;            e.printStackTrace();&#13;&#10;            return null;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Vérifie s'il y a des abonnements actifs multiples pour un membre (ne devrait pas arriver)&#13;&#10;     * @param membreId ID du membre&#13;&#10;     * @return Nombre d'abonnements actifs&#13;&#10;     */&#13;&#10;    public long countAbonnementsActifs(Integer membreId) {&#13;&#10;        try {&#13;&#10;            TypedQuery&lt;Long&gt; query = em.createQuery(&#13;&#10;                &quot;SELECT COUNT(a) FROM Abonnement a WHERE a.membre.id = :membreId AND a.dateFin &gt;= :now&quot;, &#13;&#10;                Long.class);&#13;&#10;            query.setParameter(&quot;membreId&quot;, membreId);&#13;&#10;            query.setParameter(&quot;now&quot;, LocalDateTime.now());&#13;&#10;            return query.getSingleResult();&#13;&#10;        } catch (Exception e) {&#13;&#10;            e.printStackTrace();&#13;&#10;            return 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/dao/MembreDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/dao/MembreDao.java" />
              <option name="originalContent" value="package dao;&#10;&#10;import entite.Membre;&#10;&#10;public class MembreDao extends GenericDao&lt;Membre, Integer&gt; {&#10;    public MembreDao(){&#10;        super();&#10;        this.classEntity = Membre.class;&#10;        this.PrimaryKeyName = &quot;id&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="package dao;&#10;&#10;import entite.Membre;&#10;import javax.persistence.TypedQuery;&#10;&#10;public class MembreDao extends GenericDao&lt;Membre, Integer&gt; {&#10;    public MembreDao(){&#10;        super();&#10;        this.classEntity = Membre.class;&#10;        this.PrimaryKeyName = &quot;id&quot;;&#10;    }&#10;    &#10;    /**&#10;     * Récupère un membre par l'ID de son client&#10;     * @param clientId ID du client&#10;     * @return Membre associé au client ou null si non trouvé&#10;     */&#10;    public Membre getMembreByClientId(Integer clientId) {&#10;        try {&#10;            TypedQuery&lt;Membre&gt; query = em.createQuery(&#10;                &quot;SELECT m FROM Membre m WHERE m.client.id = :clientId&quot;, Membre.class);&#10;            query.setParameter(&quot;clientId&quot;, clientId);&#10;            return query.getSingleResult();&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/entite/DemandeInscription.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/entite/DemandeInscription.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package entite;&#10;&#10;&#10;import javax.persistence.*;&#10;import java.time.LocalDateTime;&#10;&#10;/**&#10; *&#10; * @author TCHAMIE&#10; */&#10;@Entity&#10;@Table(name=&quot;demande_inscription&quot;)&#10;public class DemandeInscription extends GenericEntity {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name=&quot;id_demande_inscription&quot;)&#10;    private int id;&#10;&#10;    @Column(name=&quot;date_demande&quot;)&#10;    private LocalDateTime dateDeDemande;&#10;&#10;    @Column(name=&quot;date_traitement&quot;)&#10;    private LocalDateTime dateDeTraitement;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;id_client&quot;)&#10;    private Client client;&#10;    &#10;    public DemandeInscription(int id, LocalDateTime dateDeDemande, LocalDateTime dateDeTraitement, Client client) {&#10;&#10;        this.dateDeDemande = dateDeDemande;&#10;        this.dateDeTraitement = dateDeTraitement;&#10;        this.client = client;&#10;    }&#10;&#10;    public DemandeInscription(LocalDateTime dateDeDemande, LocalDateTime dateDeTraitement, Client client) {&#10;        this.dateDeDemande = dateDeDemande;&#10;        this.dateDeTraitement = dateDeTraitement;&#10;        this.client = client;&#10;    }&#10;&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;    public LocalDateTime getDateDeDemande() {&#10;        return dateDeDemande;&#10;    }&#10;&#10;    public void setDateDeDemande(LocalDateTime dateDeDemande) {&#10;        this.dateDeDemande = dateDeDemande;&#10;    }&#10;&#10;    public LocalDateTime getDateDeTraitement() {&#10;        return dateDeTraitement;&#10;    }&#10;&#10;    public void setDateDeTraitement(LocalDateTime dateDeTraitement) {&#10;        this.dateDeTraitement = dateDeTraitement;&#10;    }&#10;&#10;    public Client getClient() {&#10;        return client;&#10;    }&#10;&#10;    public void setClient(Client client) {&#10;        this.client = client;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.valueOf(id);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package entite;&#10;&#10;&#10;import javax.persistence.*;&#10;import java.time.LocalDateTime;&#10;&#10;/**&#10; *&#10; * @author TCHAMIE&#10; */&#10;@Entity&#10;@Table(name=&quot;demande_inscription&quot;)&#10;public class DemandeInscription extends GenericEntity {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name=&quot;id_demande_inscription&quot;)&#10;    private int id;&#10;&#10;    @Column(name=&quot;date_demande&quot;)&#10;    private LocalDateTime dateDeDemande;&#10;&#10;    @Column(name=&quot;date_traitement&quot;)&#10;    private LocalDateTime dateDeTraitement;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;id_client&quot;)&#10;    private Client client;&#10;    &#10;    // Nouveau champ pour le statut&#10;    @Column(name=&quot;statut&quot;, length = 20)&#10;    private String statut; // &quot;EN_ATTENTE&quot;, &quot;ACCEPTE&quot;, &quot;REJETE&quot;&#10;    &#10;    public DemandeInscription(){&#10;        this.statut = &quot;EN_ATTENTE&quot;; // Statut par défaut&#10;    }&#10;&#10;    public DemandeInscription(int id, LocalDateTime dateDeDemande, LocalDateTime dateDeTraitement, Client client) {&#10;        this.id = id;&#10;        this.dateDeDemande = dateDeDemande;&#10;        this.dateDeTraitement = dateDeTraitement;&#10;        this.client = client;&#10;        this.statut = &quot;EN_ATTENTE&quot;;&#10;    }&#10;&#10;    public DemandeInscription(LocalDateTime dateDeDemande, LocalDateTime dateDeTraitement, Client client) {&#10;        this.dateDeDemande = dateDeDemande;&#10;        this.dateDeTraitement = dateDeTraitement;&#10;        this.client = client;&#10;        this.statut = &quot;EN_ATTENTE&quot;;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public LocalDateTime getDateDeDemande() {&#10;        return dateDeDemande;&#10;    }&#10;&#10;    public void setDateDeDemande(LocalDateTime dateDeDemande) {&#10;        this.dateDeDemande = dateDeDemande;&#10;    }&#10;&#10;    public LocalDateTime getDateDeTraitement() {&#10;        return dateDeTraitement;&#10;    }&#10;&#10;    public void setDateDeTraitement(LocalDateTime dateDeTraitement) {&#10;        this.dateDeTraitement = dateDeTraitement;&#10;    }&#10;&#10;    public Client getClient() {&#10;        return client;&#10;    }&#10;&#10;    public void setClient(Client client) {&#10;        this.client = client;&#10;    }&#10;&#10;    public String getStatut() {&#10;        return statut;&#10;    }&#10;&#10;    public void setStatut(String statut) {&#10;        this.statut = statut;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.valueOf(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_admin/panel/AbonnementPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_admin/panel/AbonnementPanel.java" />
              <option name="originalContent" value="package gui_admin.panel;&#10;&#10;import entite.Abonnement;&#10;import entite.TypeAbonnement;&#10;import entite.Paiement;&#10;import entite.Membre;&#10;import service.AbonnementService;&#10;import service.TypeAbonnementService;&#10;import service.PaiementService;&#10;import service.MembreService;&#10;import gui_util.StyleUtil;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class AbonnementPanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;Abonnement&gt; abonnements;&#10;    private Abonnement abonnementSelectionne;&#10;    private AbonnementService abonnementService;&#10;    private TypeAbonnementService typeAbonnementService;&#10;    private PaiementService paiementService;&#10;    private MembreService membreService;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;&#10;    public AbonnementPanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.abonnementService = new AbonnementService();&#10;        this.typeAbonnementService = new TypeAbonnementService();&#10;        this.paiementService = new PaiementService();&#10;        this.membreService = new MembreService();&#10;        &#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;ID&quot;, &quot;Date début&quot;, &quot;Date fin&quot;, &quot;Type&quot;, &quot;Membre&quot;, &quot;Paiement&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);&#10;        &#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        abonnementSelectionne = abonnements.get(row);&#10;                    } else {&#10;                        abonnementSelectionne = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void loadData() {&#10;        // Vider le modèle&#10;        tableModel.setRowCount(0);&#10;        &#10;        // Charger les données&#10;        abonnements = abonnementService.listerTous();&#10;        &#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;        &#10;        for (Abonnement abonnement : abonnements) {&#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                abonnement.getId(),&#10;                abonnement.getDateDebut() != null ? abonnement.getDateDebut().format(formatter) : &quot;Non définie&quot;,&#10;                abonnement.getDateFin() != null ? abonnement.getDateFin().format(formatter) : &quot;Non définie&quot;,&#10;                abonnement.getTypeAbonnement() != null ? abonnement.getTypeAbonnement().getLibelle() : &quot;Aucun&quot;,&#10;                abonnement.getMembre() != null ? &quot;Membre #&quot; + abonnement.getMembre().getId() : &quot;Aucun&quot;,&#10;                abonnement.getPaiement() != null ? &quot;Paiement #&quot; + abonnement.getPaiement().getId() : &quot;Aucun&quot;&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void ajouter() {&#10;        // Récupérer les listes nécessaires&#10;        List&lt;TypeAbonnement&gt; typesAbonnement = typeAbonnementService.listerTous();&#10;        List&lt;Membre&gt; membres = membreService.listerTous();&#10;        List&lt;Paiement&gt; paiements = paiementService.listerTous();&#10;        &#10;        if (typesAbonnement.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun type d'abonnement disponible. Veuillez d'abord créer un type d'abonnement.&quot;, &#10;                &quot;Erreur&quot;, &#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        if (membres.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun membre disponible. Veuillez d'abord créer un membre.&quot;, &#10;                &quot;Erreur&quot;, &#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        // Créer un formulaire de saisie&#10;        JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;        JTextField dateDebutField = new JTextField();&#10;        JTextField dateFinField = new JTextField();&#10;        JComboBox&lt;TypeAbonnement&gt; typeCombo = new JComboBox&lt;&gt;(typesAbonnement.toArray(new TypeAbonnement[0]));&#10;        JComboBox&lt;Membre&gt; membreCombo = new JComboBox&lt;&gt;(membres.toArray(new Membre[0]));&#10;        JComboBox&lt;Paiement&gt; paiementCombo = new JComboBox&lt;&gt;();&#10;        &#10;        // Ajouter option &quot;Aucun&quot; pour paiement&#10;        paiementCombo.addItem(null);&#10;        for (Paiement p : paiements) {&#10;            paiementCombo.addItem(p);&#10;        }&#10;        &#10;        // Pré-remplir les dates&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        LocalDateTime now = LocalDateTime.now();&#10;        dateDebutField.setText(now.format(formatter));&#10;        dateFinField.setText(now.plusMonths(1).format(formatter)); // Par défaut 1 mois&#10;        &#10;        formulaire.add(new JLabel(&quot;Date début (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateDebutField);&#10;        formulaire.add(new JLabel(&quot;Date fin (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateFinField);&#10;        formulaire.add(new JLabel(&quot;Type d'abonnement :&quot;));&#10;        formulaire.add(typeCombo);&#10;        formulaire.add(new JLabel(&quot;Membre :&quot;));&#10;        formulaire.add(membreCombo);&#10;        formulaire.add(new JLabel(&quot;Paiement (optionnel) :&quot;));&#10;        formulaire.add(paiementCombo);&#10;        &#10;        int result = JOptionPane.showConfirmDialog(&#10;            this, &#10;            formulaire, &#10;            &quot;Ajouter un nouvel abonnement&quot;, &#10;            JOptionPane.OK_CANCEL_OPTION,&#10;            JOptionPane.PLAIN_MESSAGE&#10;        );&#10;        &#10;        if (result == JOptionPane.OK_OPTION) {&#10;            String dateDebutText = dateDebutField.getText().trim();&#10;            String dateFinText = dateFinField.getText().trim();&#10;            &#10;            if (!dateDebutText.isEmpty() &amp;&amp; !dateFinText.isEmpty()) {&#10;                try {&#10;                    LocalDateTime dateDebut = LocalDateTime.parse(dateDebutText, formatter);&#10;                    LocalDateTime dateFin = LocalDateTime.parse(dateFinText, formatter);&#10;                    TypeAbonnement typeSelectionne = (TypeAbonnement) typeCombo.getSelectedItem();&#10;                    Membre membreSelectionne = (Membre) membreCombo.getSelectedItem();&#10;                    Paiement paiementSelectionne = (Paiement) paiementCombo.getSelectedItem();&#10;                    &#10;                    if (dateFin.isAfter(dateDebut)) {&#10;                        Abonnement nouvelAbonnement = new Abonnement(dateDebut, dateFin, typeSelectionne, paiementSelectionne, membreSelectionne);&#10;                        abonnementService.ajouter(nouvelAbonnement);&#10;                        &#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Abonnement ajouté avec succès!&quot;, &#10;                            &quot;Ajout réussi&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                        &#10;                        // Recharger les données&#10;                        loadData();&#10;                        &#10;                    } else {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;La date de fin doit être postérieure à la date de début!&quot;, &#10;                            &quot;Dates invalides&quot;, &#10;                            JOptionPane.WARNING_MESSAGE);&#10;                    }&#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de l'ajout: &quot; + e.getMessage() + &#10;                        &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Les dates de début et de fin sont obligatoires!&quot;, &#10;                    &quot;Champs manquants&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (abonnementSelectionne != null) {&#10;            // Récupérer les listes nécessaires&#10;            List&lt;TypeAbonnement&gt; typesAbonnement = typeAbonnementService.listerTous();&#10;            List&lt;Membre&gt; membres = membreService.listerTous();&#10;            List&lt;Paiement&gt; paiements = paiementService.listerTous();&#10;            &#10;            if (typesAbonnement.isEmpty() || membres.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Données de référence manquantes.&quot;, &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;            &#10;            // Pré-remplir le formulaire avec les données existantes&#10;            JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;            JTextField dateDebutField = new JTextField();&#10;            JTextField dateFinField = new JTextField();&#10;            JComboBox&lt;TypeAbonnement&gt; typeCombo = new JComboBox&lt;&gt;(typesAbonnement.toArray(new TypeAbonnement[0]));&#10;            JComboBox&lt;Membre&gt; membreCombo = new JComboBox&lt;&gt;(membres.toArray(new Membre[0]));&#10;            JComboBox&lt;Paiement&gt; paiementCombo = new JComboBox&lt;&gt;();&#10;            &#10;            // Ajouter option &quot;Aucun&quot; pour paiement&#10;            paiementCombo.addItem(null);&#10;            for (Paiement p : paiements) {&#10;                paiementCombo.addItem(p);&#10;            }&#10;            &#10;            // Formatter et afficher les données existantes&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            if (abonnementSelectionne.getDateDebut() != null) {&#10;                dateDebutField.setText(abonnementSelectionne.getDateDebut().format(formatter));&#10;            }&#10;            if (abonnementSelectionne.getDateFin() != null) {&#10;                dateFinField.setText(abonnementSelectionne.getDateFin().format(formatter));&#10;            }&#10;            &#10;            // Sélectionner les valeurs actuelles&#10;            if (abonnementSelectionne.getTypeAbonnement() != null) {&#10;                typeCombo.setSelectedItem(abonnementSelectionne.getTypeAbonnement());&#10;            }&#10;            if (abonnementSelectionne.getMembre() != null) {&#10;                membreCombo.setSelectedItem(abonnementSelectionne.getMembre());&#10;            }&#10;            if (abonnementSelectionne.getPaiement() != null) {&#10;                paiementCombo.setSelectedItem(abonnementSelectionne.getPaiement());&#10;            }&#10;            &#10;            formulaire.add(new JLabel(&quot;Date début (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateDebutField);&#10;            formulaire.add(new JLabel(&quot;Date fin (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateFinField);&#10;            formulaire.add(new JLabel(&quot;Type d'abonnement :&quot;));&#10;            formulaire.add(typeCombo);&#10;            formulaire.add(new JLabel(&quot;Membre :&quot;));&#10;            formulaire.add(membreCombo);&#10;            formulaire.add(new JLabel(&quot;Paiement (optionnel) :&quot;));&#10;            formulaire.add(paiementCombo);&#10;            &#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier l'abonnement: &quot; + abonnementSelectionne.getId(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            &#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String dateDebutText = dateDebutField.getText().trim();&#10;                String dateFinText = dateFinField.getText().trim();&#10;                &#10;                if (!dateDebutText.isEmpty() &amp;&amp; !dateFinText.isEmpty()) {&#10;                    try {&#10;                        LocalDateTime dateDebut = LocalDateTime.parse(dateDebutText, formatter);&#10;                        LocalDateTime dateFin = LocalDateTime.parse(dateFinText, formatter);&#10;                        TypeAbonnement typeSelectionne = (TypeAbonnement) typeCombo.getSelectedItem();&#10;                        Membre membreSelectionne = (Membre) membreCombo.getSelectedItem();&#10;                        Paiement paiementSelectionne = (Paiement) paiementCombo.getSelectedItem();&#10;                        &#10;                        if (dateFin.isAfter(dateDebut)) {&#10;                            // Mettre à jour les données de l'abonnement sélectionné&#10;                            abonnementSelectionne.setDateDebut(dateDebut);&#10;                            abonnementSelectionne.setDateFin(dateFin);&#10;                            abonnementSelectionne.setTypeAbonnement(typeSelectionne);&#10;                            abonnementSelectionne.setMembre(membreSelectionne);&#10;                            abonnementSelectionne.setPaiement(paiementSelectionne);&#10;                            &#10;                            abonnementService.modifier(abonnementSelectionne);&#10;                            &#10;                            JOptionPane.showMessageDialog(this, &#10;                                &quot;Abonnement modifié avec succès!&quot;, &#10;                                &quot;Modification réussie&quot;, &#10;                                JOptionPane.INFORMATION_MESSAGE);&#10;                            &#10;                            // Recharger les données&#10;                            loadData();&#10;                            &#10;                        } else {&#10;                            JOptionPane.showMessageDialog(this, &#10;                                &quot;La date de fin doit être postérieure à la date de début!&quot;, &#10;                                &quot;Dates invalides&quot;, &#10;                                JOptionPane.WARNING_MESSAGE);&#10;                        }&#10;                    } catch (Exception e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Erreur lors de la modification: &quot; + e.getMessage() + &#10;                            &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                            &quot;Erreur&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    }&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Les dates de début et de fin sont obligatoires!&quot;, &#10;                        &quot;Champs manquants&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (abonnementSelectionne != null) {&#10;            try {&#10;                abonnementService.supprimer(abonnementSelectionne);&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Abonnement supprimé avec succès!&quot;, &#10;                    &quot;Suppression réussie&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Recharger les données&#10;                loadData();&#10;                abonnementSelectionne = null;&#10;                &#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Erreur lors de la suppression: &quot; + e.getMessage(), &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return abonnementSelectionne != null;&#10;    }&#10;&#10;    public Abonnement getAbonnementSelectionne() {&#10;        return abonnementSelectionne;&#10;    }&#10;}" />
              <option name="updatedContent" value="package gui_admin.panel;&#10;&#10;import entite.Abonnement;&#10;import entite.TypeAbonnement;&#10;import entite.Paiement;&#10;import entite.Membre;&#10;import service.AbonnementService;&#10;import service.TypeAbonnementService;&#10;import service.PaiementService;&#10;import service.MembreService;&#10;import gui_util.StyleUtil;&#10;import gui_client.util.AbonnementSouscription;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.table.DefaultTableCellRenderer;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class AbonnementPanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;Abonnement&gt; abonnements;&#10;    private Abonnement abonnementSelectionne;&#10;    private AbonnementService abonnementService;&#10;    private TypeAbonnementService typeAbonnementService;&#10;    private PaiementService paiementService;&#10;    private MembreService membreService;&#10;    private AbonnementSouscription abonnementUtil;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;&#10;    public AbonnementPanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.abonnementService = new AbonnementService();&#10;        this.typeAbonnementService = new TypeAbonnementService();&#10;        this.paiementService = new PaiementService();&#10;        this.membreService = new MembreService();&#10;        this.abonnementUtil = AbonnementSouscription.getInstance();&#10;        &#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;ID&quot;, &quot;Date début&quot;, &quot;Date fin&quot;, &quot;Type&quot;, &quot;Membre&quot;, &quot;Paiement&quot;, &quot;Statut&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);&#10;        table.getColumnModel().getColumn(7).setPreferredWidth(120); // Colonne Statut&#10;        &#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;        &#10;        // Renderer personnalisé pour la colonne Statut avec couleurs&#10;        table.getColumnModel().getColumn(7).setCellRenderer(new DefaultTableCellRenderer() {&#10;            @Override&#10;            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {&#10;                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);&#10;                &#10;                if (!isSelected) {&#10;                    String statut = value.toString();&#10;                    if (statut.contains(&quot;Actif&quot;)) {&#10;                        if (statut.contains(&quot;expire bientôt&quot;)) {&#10;                            c.setForeground(new Color(255, 165, 0)); // Orange&#10;                        } else {&#10;                            c.setForeground(new Color(46, 204, 113)); // Vert&#10;                        }&#10;                    } else if (statut.equals(&quot;Expiré&quot;)) {&#10;                        c.setForeground(new Color(231, 76, 60)); // Rouge&#10;                    } else {&#10;                        c.setForeground(Color.GRAY);&#10;                    }&#10;                } else {&#10;                    c.setForeground(Color.WHITE);&#10;                }&#10;                &#10;                setHorizontalAlignment(SwingConstants.CENTER);&#10;                return c;&#10;            }&#10;        });&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        abonnementSelectionne = abonnements.get(row);&#10;                    } else {&#10;                        abonnementSelectionne = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void loadData() {&#10;        // Vider le modèle&#10;        tableModel.setRowCount(0);&#10;        &#10;        // Charger les données&#10;        abonnements = abonnementService.listerTous();&#10;        &#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;        &#10;        for (Abonnement abonnement : abonnements) {&#10;            // Déterminer le statut de l'abonnement&#10;            String statut = determinerStatutAbonnement(abonnement);&#10;            &#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                abonnement.getId(),&#10;                abonnement.getDateDebut() != null ? abonnement.getDateDebut().format(formatter) : &quot;Non définie&quot;,&#10;                abonnement.getDateFin() != null ? abonnement.getDateFin().format(formatter) : &quot;Non définie&quot;,&#10;                abonnement.getTypeAbonnement() != null ? abonnement.getTypeAbonnement().getLibelle() : &quot;Aucun&quot;,&#10;                abonnement.getMembre() != null ? &quot;Membre #&quot; + abonnement.getMembre().getId() : &quot;Aucun&quot;,&#10;                abonnement.getPaiement() != null ? &quot;Paiement #&quot; + abonnement.getPaiement().getId() : &quot;Aucun&quot;,&#10;                statut&#10;            });&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Détermine le statut d'un abonnement en utilisant la classe utilitaire&#10;     * @param abonnement L'abonnement à analyser&#10;     * @return Le statut formaté&#10;     */&#10;    private String determinerStatutAbonnement(Abonnement abonnement) {&#10;        if (abonnement == null || abonnement.getDateFin() == null) {&#10;            return &quot;Indéterminé&quot;;&#10;        }&#10;        &#10;        try {&#10;            if (abonnementUtil.isAbonnementActif(abonnement)) {&#10;                long joursRestants = abonnementUtil.getJoursRestants(abonnement);&#10;                if (joursRestants &lt;= 7) {&#10;                    return &quot;Actif (expire bientôt)&quot;;&#10;                } else {&#10;                    return &quot;Actif (&quot; + joursRestants + &quot; jours)&quot;;&#10;                }&#10;            } else {&#10;                return &quot;Expiré&quot;;&#10;            }&#10;        } catch (Exception e) {&#10;            return &quot;Erreur&quot;;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void ajouter() {&#10;        // Récupérer les listes nécessaires&#10;        List&lt;TypeAbonnement&gt; typesAbonnement = typeAbonnementService.listerTous();&#10;        List&lt;Membre&gt; membres = membreService.listerTous();&#10;        List&lt;Paiement&gt; paiements = paiementService.listerTous();&#10;        &#10;        if (typesAbonnement.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun type d'abonnement disponible. Veuillez d'abord créer un type d'abonnement.&quot;, &#10;                &quot;Erreur&quot;, &#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        if (membres.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun membre disponible. Veuillez d'abord créer un membre.&quot;, &#10;                &quot;Erreur&quot;, &#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        // Créer un formulaire de saisie&#10;        JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;        JTextField dateDebutField = new JTextField();&#10;        JTextField dateFinField = new JTextField();&#10;        JComboBox&lt;TypeAbonnement&gt; typeCombo = new JComboBox&lt;&gt;(typesAbonnement.toArray(new TypeAbonnement[0]));&#10;        JComboBox&lt;Membre&gt; membreCombo = new JComboBox&lt;&gt;(membres.toArray(new Membre[0]));&#10;        JComboBox&lt;Paiement&gt; paiementCombo = new JComboBox&lt;&gt;();&#10;        &#10;        // Ajouter option &quot;Aucun&quot; pour paiement&#10;        paiementCombo.addItem(null);&#10;        for (Paiement p : paiements) {&#10;            paiementCombo.addItem(p);&#10;        }&#10;        &#10;        // Pré-remplir les dates&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        LocalDateTime now = LocalDateTime.now();&#10;        dateDebutField.setText(now.format(formatter));&#10;        dateFinField.setText(now.plusMonths(1).format(formatter)); // Par défaut 1 mois&#10;        &#10;        formulaire.add(new JLabel(&quot;Date début (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateDebutField);&#10;        formulaire.add(new JLabel(&quot;Date fin (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateFinField);&#10;        formulaire.add(new JLabel(&quot;Type d'abonnement :&quot;));&#10;        formulaire.add(typeCombo);&#10;        formulaire.add(new JLabel(&quot;Membre :&quot;));&#10;        formulaire.add(membreCombo);&#10;        formulaire.add(new JLabel(&quot;Paiement (optionnel) :&quot;));&#10;        formulaire.add(paiementCombo);&#10;        &#10;        int result = JOptionPane.showConfirmDialog(&#10;            this, &#10;            formulaire, &#10;            &quot;Ajouter un nouvel abonnement&quot;, &#10;            JOptionPane.OK_CANCEL_OPTION,&#10;            JOptionPane.PLAIN_MESSAGE&#10;        );&#10;        &#10;        if (result == JOptionPane.OK_OPTION) {&#10;            String dateDebutText = dateDebutField.getText().trim();&#10;            String dateFinText = dateFinField.getText().trim();&#10;            &#10;            if (!dateDebutText.isEmpty() &amp;&amp; !dateFinText.isEmpty()) {&#10;                try {&#10;                    LocalDateTime dateDebut = LocalDateTime.parse(dateDebutText, formatter);&#10;                    LocalDateTime dateFin = LocalDateTime.parse(dateFinText, formatter);&#10;                    TypeAbonnement typeSelectionne = (TypeAbonnement) typeCombo.getSelectedItem();&#10;                    Membre membreSelectionne = (Membre) membreCombo.getSelectedItem();&#10;                    Paiement paiementSelectionne = (Paiement) paiementCombo.getSelectedItem();&#10;                    &#10;                    if (dateFin.isAfter(dateDebut)) {&#10;                        Abonnement nouvelAbonnement = new Abonnement(dateDebut, dateFin, typeSelectionne, paiementSelectionne, membreSelectionne);&#10;                        abonnementService.ajouter(nouvelAbonnement);&#10;                        &#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Abonnement ajouté avec succès!&quot;, &#10;                            &quot;Ajout réussi&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                        &#10;                        // Recharger les données&#10;                        loadData();&#10;                        &#10;                    } else {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;La date de fin doit être postérieure à la date de début!&quot;, &#10;                            &quot;Dates invalides&quot;, &#10;                            JOptionPane.WARNING_MESSAGE);&#10;                    }&#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de l'ajout: &quot; + e.getMessage() + &#10;                        &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Les dates de début et de fin sont obligatoires!&quot;, &#10;                    &quot;Champs manquants&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (abonnementSelectionne != null) {&#10;            // Récupérer les listes nécessaires&#10;            List&lt;TypeAbonnement&gt; typesAbonnement = typeAbonnementService.listerTous();&#10;            List&lt;Membre&gt; membres = membreService.listerTous();&#10;            List&lt;Paiement&gt; paiements = paiementService.listerTous();&#10;            &#10;            if (typesAbonnement.isEmpty() || membres.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Données de référence manquantes.&quot;, &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;            &#10;            // Pré-remplir le formulaire avec les données existantes&#10;            JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;            JTextField dateDebutField = new JTextField();&#10;            JTextField dateFinField = new JTextField();&#10;            JComboBox&lt;TypeAbonnement&gt; typeCombo = new JComboBox&lt;&gt;(typesAbonnement.toArray(new TypeAbonnement[0]));&#10;            JComboBox&lt;Membre&gt; membreCombo = new JComboBox&lt;&gt;(membres.toArray(new Membre[0]));&#10;            JComboBox&lt;Paiement&gt; paiementCombo = new JComboBox&lt;&gt;();&#10;            &#10;            // Ajouter option &quot;Aucun&quot; pour paiement&#10;            paiementCombo.addItem(null);&#10;            for (Paiement p : paiements) {&#10;                paiementCombo.addItem(p);&#10;            }&#10;            &#10;            // Formatter et afficher les données existantes&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            if (abonnementSelectionne.getDateDebut() != null) {&#10;                dateDebutField.setText(abonnementSelectionne.getDateDebut().format(formatter));&#10;            }&#10;            if (abonnementSelectionne.getDateFin() != null) {&#10;                dateFinField.setText(abonnementSelectionne.getDateFin().format(formatter));&#10;            }&#10;            &#10;            // Sélectionner les valeurs actuelles&#10;            if (abonnementSelectionne.getTypeAbonnement() != null) {&#10;                typeCombo.setSelectedItem(abonnementSelectionne.getTypeAbonnement());&#10;            }&#10;            if (abonnementSelectionne.getMembre() != null) {&#10;                membreCombo.setSelectedItem(abonnementSelectionne.getMembre());&#10;            }&#10;            if (abonnementSelectionne.getPaiement() != null) {&#10;                paiementCombo.setSelectedItem(abonnementSelectionne.getPaiement());&#10;            }&#10;            &#10;            formulaire.add(new JLabel(&quot;Date début (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateDebutField);&#10;            formulaire.add(new JLabel(&quot;Date fin (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateFinField);&#10;            formulaire.add(new JLabel(&quot;Type d'abonnement :&quot;));&#10;            formulaire.add(typeCombo);&#10;            formulaire.add(new JLabel(&quot;Membre :&quot;));&#10;            formulaire.add(membreCombo);&#10;            formulaire.add(new JLabel(&quot;Paiement (optionnel) :&quot;));&#10;            formulaire.add(paiementCombo);&#10;            &#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier l'abonnement: &quot; + abonnementSelectionne.getId(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            &#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String dateDebutText = dateDebutField.getText().trim();&#10;                String dateFinText = dateFinField.getText().trim();&#10;                &#10;                if (!dateDebutText.isEmpty() &amp;&amp; !dateFinText.isEmpty()) {&#10;                    try {&#10;                        LocalDateTime dateDebut = LocalDateTime.parse(dateDebutText, formatter);&#10;                        LocalDateTime dateFin = LocalDateTime.parse(dateFinText, formatter);&#10;                        TypeAbonnement typeSelectionne = (TypeAbonnement) typeCombo.getSelectedItem();&#10;                        Membre membreSelectionne = (Membre) membreCombo.getSelectedItem();&#10;                        Paiement paiementSelectionne = (Paiement) paiementCombo.getSelectedItem();&#10;                        &#10;                        if (dateFin.isAfter(dateDebut)) {&#10;                            // Mettre à jour les données de l'abonnement sélectionné&#10;                            abonnementSelectionne.setDateDebut(dateDebut);&#10;                            abonnementSelectionne.setDateFin(dateFin);&#10;                            abonnementSelectionne.setTypeAbonnement(typeSelectionne);&#10;                            abonnementSelectionne.setMembre(membreSelectionne);&#10;                            abonnementSelectionne.setPaiement(paiementSelectionne);&#10;                            &#10;                            abonnementService.modifier(abonnementSelectionne);&#10;                            &#10;                            JOptionPane.showMessageDialog(this, &#10;                                &quot;Abonnement modifié avec succès!&quot;, &#10;                                &quot;Modification réussie&quot;, &#10;                                JOptionPane.INFORMATION_MESSAGE);&#10;                            &#10;                            // Recharger les données&#10;                            loadData();&#10;                            &#10;                        } else {&#10;                            JOptionPane.showMessageDialog(this, &#10;                                &quot;La date de fin doit être postérieure à la date de début!&quot;, &#10;                                &quot;Dates invalides&quot;, &#10;                                JOptionPane.WARNING_MESSAGE);&#10;                        }&#10;                    } catch (Exception e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Erreur lors de la modification: &quot; + e.getMessage() + &#10;                            &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                            &quot;Erreur&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    }&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Les dates de début et de fin sont obligatoires!&quot;, &#10;                        &quot;Champs manquants&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (abonnementSelectionne != null) {&#10;            try {&#10;                abonnementService.supprimer(abonnementSelectionne);&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Abonnement supprimé avec succès!&quot;, &#10;                    &quot;Suppression réussie&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Recharger les données&#10;                loadData();&#10;                abonnementSelectionne = null;&#10;                &#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Erreur lors de la suppression: &quot; + e.getMessage(), &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return abonnementSelectionne != null;&#10;    }&#10;&#10;    public Abonnement getAbonnementSelectionne() {&#10;        return abonnementSelectionne;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_admin/panel/BarChartPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_admin/panel/BarChartPanel.java" />
              <option name="originalContent" value="package gui_admin.panel;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.geom.Rectangle2D;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;/**&#10; * Composant personnalisé pour afficher un diagramme en barres&#10; * Affiche les statistiques des tables de la base de données&#10; */&#10;public class BarChartPanel extends JPanel {&#10;&#10;    private Map&lt;String, Integer&gt; data;&#10;    private int maxValue;&#10;    private final Color barColor = new Color(241, 196, 15); // Couleur unique pour tous les bâtons&#10;&#10;    public BarChartPanel() {&#10;        this.data = new HashMap&lt;&gt;();&#10;        setBackground(Color.WHITE);&#10;        setPreferredSize(new Dimension(1500, 450)); // Agrandir: 800-&gt;1000 (largeur), 400-&gt;450 (hauteur)&#10;    }&#10;&#10;    public void updateData(Map&lt;String, Integer&gt; newData) {&#10;        this.data = newData;&#10;        this.maxValue = data.values().stream().mapToInt(Integer::intValue).max().orElse(1);&#10;        // Arrondir à la dizaine supérieure ou minimum 10&#10;        this.maxValue = Math.max(10, ((maxValue / 10) + 1) * 10);&#10;        repaint();&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;&#10;        if (data.isEmpty()) {&#10;            drawLoadingMessage(g);&#10;            return;&#10;        }&#10;&#10;        Graphics2D g2d = (Graphics2D) g.create();&#10;        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);&#10;&#10;        int width = getWidth();&#10;        int height = getHeight();&#10;&#10;        // Marges&#10;        int marginLeft = 80;&#10;        int marginRight = 40;&#10;        int marginTop = 40;&#10;        int marginBottom = 80;&#10;&#10;        // Zone de dessin&#10;        int chartWidth = width - marginLeft - marginRight;&#10;        int chartHeight = height - marginTop - marginBottom;&#10;&#10;        // Dessiner les axes&#10;        drawAxes(g2d, marginLeft, marginTop, chartWidth, chartHeight);&#10;&#10;        // Dessiner les graduations de l'axe Y&#10;        drawYAxisLabels(g2d, marginLeft, marginTop, chartHeight);&#10;&#10;        // Dessiner les barres&#10;        drawBars(g2d, marginLeft, marginTop, chartWidth, chartHeight);&#10;&#10;        // Dessiner les labels de l'axe X&#10;        drawXAxisLabels(g2d, marginLeft, marginTop, chartWidth, chartHeight);&#10;&#10;        g2d.dispose();&#10;    }&#10;&#10;    private void drawLoadingMessage(Graphics g) {&#10;        g.setColor(Color.GRAY);&#10;        g.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        FontMetrics fm = g.getFontMetrics();&#10;        String message = &quot;Chargement des données...&quot;;&#10;        int x = (getWidth() - fm.stringWidth(message)) / 2;&#10;        int y = getHeight() / 2;&#10;        g.drawString(message, x, y);&#10;    }&#10;&#10;    private void drawAxes(Graphics2D g2d, int marginLeft, int marginTop, int chartWidth, int chartHeight) {&#10;        g2d.setColor(new Color(73, 80, 87));&#10;        g2d.setStroke(new BasicStroke(2));&#10;&#10;        // Axe Y (vertical)&#10;        g2d.drawLine(marginLeft, marginTop, marginLeft, marginTop + chartHeight);&#10;&#10;        // Axe X (horizontal)&#10;        g2d.drawLine(marginLeft, marginTop + chartHeight, marginLeft + chartWidth, marginTop + chartHeight);&#10;    }&#10;&#10;    private void drawYAxisLabels(Graphics2D g2d, int marginLeft, int marginTop, int chartHeight) {&#10;        g2d.setColor(new Color(108, 117, 125));&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        FontMetrics fm = g2d.getFontMetrics();&#10;&#10;        // Dessiner les graduations de 0 à maxValue par pas de 2&#10;        int step = Math.max(2, maxValue / 10);&#10;        for (int i = 0; i &lt;= maxValue; i += step) {&#10;            int y = marginTop + chartHeight - (int) ((double) i / maxValue * chartHeight);&#10;            String label = String.valueOf(i);&#10;            int labelWidth = fm.stringWidth(label);&#10;&#10;            // Ligne de grille horizontale&#10;            g2d.setColor(new Color(233, 236, 239));&#10;            g2d.setStroke(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, new float[]{5.0f}, 0.0f));&#10;            g2d.drawLine(marginLeft, y, marginLeft + chartHeight, y);&#10;&#10;            // Label&#10;            g2d.setColor(new Color(108, 117, 125));&#10;            g2d.setStroke(new BasicStroke(1));&#10;            g2d.drawString(label, marginLeft - labelWidth - 10, y + fm.getAscent() / 2);&#10;        }&#10;    }&#10;&#10;    private void drawBars(Graphics2D g2d, int marginLeft, int marginTop, int chartWidth, int chartHeight) {&#10;        if (data.isEmpty()) return;&#10;&#10;        int barCount = data.size();&#10;        int spacing = 20; // Augmenter l'espacement entre les barres (était 10px)&#10;        int barWidth = (chartWidth - (barCount + 1) * spacing) / barCount;&#10;        barWidth = Math.max(30, Math.min(barWidth, 200)); // Augmenter la largeur min et max des barres (était 20-80px)&#10;&#10;        int totalBarsWidth = barCount * barWidth + (barCount - 1) * spacing;&#10;        int startX = marginLeft + (chartWidth - totalBarsWidth) / 2;&#10;&#10;        int barIndex = 0;&#10;        for (Map.Entry&lt;String, Integer&gt; entry : data.entrySet()) {&#10;            String label = entry.getKey();&#10;            int value = entry.getValue();&#10;&#10;            // Calculer la hauteur de la barre&#10;            int barHeight = (int) ((double) value / maxValue * chartHeight);&#10;            int x = startX + barIndex * (barWidth + spacing); // Utiliser le nouvel espacement&#10;            int y = marginTop + chartHeight - barHeight;&#10;&#10;            // Dessiner la barre avec dégradé&#10;//            GradientPaint gradient = new GradientPaint(&#10;//                x, y, barColor,&#10;//                x, y + barHeight, barColor.darker()&#10;//            );&#10;//            g2d.setPaint(gradient);&#10;            g2d.fillRoundRect(x, y, barWidth, barHeight, 5, 20);&#10;&#10;            // Contour de la barre&#10;            g2d.setColor(barColor.darker());&#10;            g2d.setStroke(new BasicStroke(1));&#10;            g2d.drawRoundRect(x, y, barWidth, barHeight, 5, 5);&#10;&#10;            // Afficher la valeur au-dessus de la barre&#10;            g2d.setColor(new Color(73, 80, 87));&#10;            g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;            FontMetrics fm = g2d.getFontMetrics();&#10;            String valueStr = String.valueOf(value);&#10;            int valueWidth = fm.stringWidth(valueStr);&#10;            g2d.drawString(valueStr, x + (barWidth - valueWidth) / 2, y - 5);&#10;&#10;            barIndex++;&#10;        }&#10;    }&#10;&#10;    private void drawXAxisLabels(Graphics2D g2d, int marginLeft, int marginTop, int chartWidth, int chartHeight) {&#10;        if (data.isEmpty()) return;&#10;&#10;        g2d.setColor(new Color(108, 117, 125));&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 11));&#10;        FontMetrics fm = g2d.getFontMetrics();&#10;&#10;        int barCount = data.size();&#10;        int spacing = 20; // Utiliser le même espacement que les barres&#10;        int barWidth = (chartWidth - (barCount + 1) * spacing) / barCount;&#10;        barWidth = Math.max(30, Math.min(barWidth, 120)); // Utiliser les mêmes paramètres que les barres&#10;&#10;        int totalBarsWidth = barCount * barWidth + (barCount - 1) * spacing;&#10;        int startX = marginLeft + (chartWidth - totalBarsWidth) / 2;&#10;&#10;        int labelIndex = 0;&#10;        for (String label : data.keySet()) {&#10;            int x = startX + labelIndex * (barWidth + spacing); // Utiliser le nouvel espacement&#10;            int labelWidth = fm.stringWidth(label);&#10;&#10;            // Centrer le label sous la barre&#10;            int labelX = x + (barWidth - labelWidth) / 2;&#10;            int labelY = marginTop + chartHeight + 20;&#10;&#10;            // Rotation du texte si nécessaire pour les labels longs&#10;            if (labelWidth &gt; barWidth) {&#10;                Graphics2D g2dRotated = (Graphics2D) g2d.create();&#10;                g2dRotated.rotate(-Math.PI / 4, labelX, labelY);&#10;                g2dRotated.drawString(label, labelX, labelY);&#10;                g2dRotated.dispose();&#10;            } else {&#10;                g2d.drawString(label, labelX, labelY);&#10;            }&#10;&#10;            labelIndex++;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gui_admin.panel;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.geom.Rectangle2D;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;/**&#10; * Composant personnalisé pour afficher un diagramme en barres&#10; * Affiche les statistiques des tables de la base de données&#10; */&#10;public class BarChartPanel extends JPanel {&#10;&#10;    private Map&lt;String, Integer&gt; data;&#10;    private int maxValue;&#10;    private final Color barColor = new Color(241, 196, 15); // Couleur unique pour tous les bâtons&#10;&#10;    public BarChartPanel() {&#10;        this.data = new HashMap&lt;&gt;();&#10;        setBackground(Color.WHITE);&#10;        setPreferredSize(new Dimension(1000, 600)); // Augmenter la hauteur: 450-&gt;600 pour plus d'espace vertical&#10;    }&#10;&#10;    public void updateData(Map&lt;String, Integer&gt; newData) {&#10;        this.data = newData;&#10;        this.maxValue = data.values().stream().mapToInt(Integer::intValue).max().orElse(1);&#10;        // Arrondir à la dizaine supérieure ou minimum 10&#10;        this.maxValue = Math.max(10, ((maxValue / 10) + 1) * 10);&#10;        repaint();&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;&#10;        if (data.isEmpty()) {&#10;            drawLoadingMessage(g);&#10;            return;&#10;        }&#10;&#10;        Graphics2D g2d = (Graphics2D) g.create();&#10;        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);&#10;&#10;        int width = getWidth();&#10;        int height = getHeight();&#10;&#10;        // Marges&#10;        int marginLeft = 80;&#10;        int marginRight = 40;&#10;        int marginTop = 40;&#10;        int marginBottom = 80;&#10;&#10;        // Zone de dessin&#10;        int chartWidth = width - marginLeft - marginRight;&#10;        int chartHeight = height - marginTop - marginBottom;&#10;&#10;        // Dessiner les axes&#10;        drawAxes(g2d, marginLeft, marginTop, chartWidth, chartHeight);&#10;&#10;        // Dessiner les graduations de l'axe Y&#10;        drawYAxisLabels(g2d, marginLeft, marginTop, chartHeight);&#10;&#10;        // Dessiner les barres&#10;        drawBars(g2d, marginLeft, marginTop, chartWidth, chartHeight);&#10;&#10;        // Dessiner les labels de l'axe X&#10;        drawXAxisLabels(g2d, marginLeft, marginTop, chartWidth, chartHeight);&#10;&#10;        g2d.dispose();&#10;    }&#10;&#10;    private void drawLoadingMessage(Graphics g) {&#10;        g.setColor(Color.GRAY);&#10;        g.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        FontMetrics fm = g.getFontMetrics();&#10;        String message = &quot;Chargement des données...&quot;;&#10;        int x = (getWidth() - fm.stringWidth(message)) / 2;&#10;        int y = getHeight() / 2;&#10;        g.drawString(message, x, y);&#10;    }&#10;&#10;    private void drawAxes(Graphics2D g2d, int marginLeft, int marginTop, int chartWidth, int chartHeight) {&#10;        g2d.setColor(new Color(73, 80, 87));&#10;        g2d.setStroke(new BasicStroke(2));&#10;&#10;        // Axe Y (vertical)&#10;        g2d.drawLine(marginLeft, marginTop, marginLeft, marginTop + chartHeight);&#10;&#10;        // Axe X (horizontal)&#10;        g2d.drawLine(marginLeft, marginTop + chartHeight, marginLeft + chartWidth, marginTop + chartHeight);&#10;    }&#10;&#10;    private void drawYAxisLabels(Graphics2D g2d, int marginLeft, int marginTop, int chartHeight) {&#10;        g2d.setColor(new Color(108, 117, 125));&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        FontMetrics fm = g2d.getFontMetrics();&#10;&#10;        // Dessiner les graduations de 0 à maxValue par pas de 2&#10;        int step = Math.max(2, maxValue / 10);&#10;        for (int i = 0; i &lt;= maxValue; i += step) {&#10;            int y = marginTop + chartHeight - (int) ((double) i / maxValue * chartHeight);&#10;            String label = String.valueOf(i);&#10;            int labelWidth = fm.stringWidth(label);&#10;&#10;            // Ligne de grille horizontale&#10;            g2d.setColor(new Color(233, 236, 239));&#10;            g2d.setStroke(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, new float[]{5.0f}, 0.0f));&#10;            g2d.drawLine(marginLeft, y, marginLeft + chartHeight, y);&#10;&#10;            // Label&#10;            g2d.setColor(new Color(108, 117, 125));&#10;            g2d.setStroke(new BasicStroke(1));&#10;            g2d.drawString(label, marginLeft - labelWidth - 10, y + fm.getAscent() / 2);&#10;        }&#10;    }&#10;&#10;    private void drawBars(Graphics2D g2d, int marginLeft, int marginTop, int chartWidth, int chartHeight) {&#10;        if (data.isEmpty()) return;&#10;&#10;        int barCount = data.size();&#10;        int spacing = 20; // Augmenter l'espacement entre les barres (était 10px)&#10;        int barWidth = (chartWidth - (barCount + 1) * spacing) / barCount;&#10;        barWidth = Math.max(30, Math.min(barWidth, 200)); // Augmenter la largeur min et max des barres (était 20-80px)&#10;&#10;        int totalBarsWidth = barCount * barWidth + (barCount - 1) * spacing;&#10;        int startX = marginLeft + (chartWidth - totalBarsWidth) / 2;&#10;&#10;        int barIndex = 0;&#10;        for (Map.Entry&lt;String, Integer&gt; entry : data.entrySet()) {&#10;            String label = entry.getKey();&#10;            int value = entry.getValue();&#10;&#10;            // Calculer la hauteur de la barre&#10;            int barHeight = (int) ((double) value / maxValue * chartHeight);&#10;            int x = startX + barIndex * (barWidth + spacing); // Utiliser le nouvel espacement&#10;            int y = marginTop + chartHeight - barHeight;&#10;&#10;            // Dessiner la barre avec dégradé&#10;//            GradientPaint gradient = new GradientPaint(&#10;//                x, y, barColor,&#10;//                x, y + barHeight, barColor.darker()&#10;//            );&#10;//            g2d.setPaint(gradient);&#10;            g2d.fillRoundRect(x, y, barWidth, barHeight, 5, 20);&#10;&#10;            // Contour de la barre&#10;            g2d.setColor(barColor.darker());&#10;            g2d.setStroke(new BasicStroke(1));&#10;            g2d.drawRoundRect(x, y, barWidth, barHeight, 5, 5);&#10;&#10;            // Afficher la valeur au-dessus de la barre&#10;            g2d.setColor(new Color(73, 80, 87));&#10;            g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;            FontMetrics fm = g2d.getFontMetrics();&#10;            String valueStr = String.valueOf(value);&#10;            int valueWidth = fm.stringWidth(valueStr);&#10;            g2d.drawString(valueStr, x + (barWidth - valueWidth) / 2, y - 5);&#10;&#10;            barIndex++;&#10;        }&#10;    }&#10;&#10;    private void drawXAxisLabels(Graphics2D g2d, int marginLeft, int marginTop, int chartWidth, int chartHeight) {&#10;        if (data.isEmpty()) return;&#10;&#10;        g2d.setColor(new Color(108, 117, 125));&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 11));&#10;        FontMetrics fm = g2d.getFontMetrics();&#10;&#10;        int barCount = data.size();&#10;        int spacing = 20; // Utiliser le même espacement que les barres&#10;        int barWidth = (chartWidth - (barCount + 1) * spacing) / barCount;&#10;        barWidth = Math.max(30, Math.min(barWidth, 120)); // Utiliser les mêmes paramètres que les barres&#10;&#10;        int totalBarsWidth = barCount * barWidth + (barCount - 1) * spacing;&#10;        int startX = marginLeft + (chartWidth - totalBarsWidth) / 2;&#10;&#10;        int labelIndex = 0;&#10;        for (String label : data.keySet()) {&#10;            int x = startX + labelIndex * (barWidth + spacing); // Utiliser le nouvel espacement&#10;            int labelWidth = fm.stringWidth(label);&#10;&#10;            // Centrer le label sous la barre&#10;            int labelX = x + (barWidth - labelWidth) / 2;&#10;            int labelY = marginTop + chartHeight + 20;&#10;&#10;            // Rotation du texte si nécessaire pour les labels longs&#10;            if (labelWidth &gt; barWidth) {&#10;                Graphics2D g2dRotated = (Graphics2D) g2d.create();&#10;                g2dRotated.rotate(-Math.PI / 4, labelX, labelY);&#10;                g2dRotated.drawString(label, labelX, labelY);&#10;                g2dRotated.dispose();&#10;            } else {&#10;                g2d.drawString(label, labelX, labelY);&#10;            }&#10;&#10;            labelIndex++;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_admin/panel/DemandeInscriptionPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_admin/panel/DemandeInscriptionPanel.java" />
              <option name="originalContent" value="package gui_admin.panel;&#10;&#10;import entite.DemandeInscription;&#10;import entite.Client;&#10;import entite.Membre;&#10;import service.DemandeInscriptionService;&#10;import service.ClientService;&#10;import service.MembreService;&#10;import gui_util.StyleUtil;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.table.TableCellRenderer;&#10;import javax.swing.table.TableCellEditor;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class DemandeInscriptionPanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;DemandeInscription&gt; demandesInscription;&#10;    private DemandeInscription demandeSelectionnee;&#10;    private DemandeInscriptionService demandeInscriptionService;&#10;    private ClientService clientService;&#10;    private MembreService membreService;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;&#10;    public DemandeInscriptionPanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.demandeInscriptionService = new DemandeInscriptionService();&#10;        this.clientService = new ClientService();&#10;        this.membreService = new MembreService();&#10;&#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;ID&quot;, &quot;Date demande&quot;, &quot;Date traitement&quot;, &quot;Client&quot;, &quot;Statut&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                // Rendre la colonne statut éditable pour les boutons&#10;                return column == 0 || column == 5;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);&#10;        table.getColumnModel().getColumn(5).setPreferredWidth(150);&#10;&#10;        // Configurer le renderer et l'éditeur pour la colonne Statut&#10;        table.getColumnModel().getColumn(5).setCellRenderer(new StatusCellRenderer());&#10;        table.getColumnModel().getColumn(5).setCellEditor(new StatusCellEditor());&#10;&#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        demandeSelectionnee = demandesInscription.get(row);&#10;                    } else {&#10;                        demandeSelectionnee = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    // Classe pour le rendu des cellules de statut&#10;    private class StatusCellRenderer extends JPanel implements TableCellRenderer {&#10;        private JButton acceptButton;&#10;        private JButton rejectButton;&#10;        private JLabel statusLabel;&#10;&#10;        public StatusCellRenderer() {&#10;            setLayout(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;&#10;            // Utiliser du texte simple au lieu de caractères spéciaux pour éviter les problèmes d'encodage&#10;            acceptButton = new JButton(&quot;OK&quot;);&#10;            acceptButton.setBackground(Color.GREEN);&#10;            acceptButton.setForeground(Color.WHITE);&#10;            acceptButton.setPreferredSize(new Dimension(45, 25));&#10;            acceptButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            rejectButton = new JButton(&quot;NO&quot;);&#10;            rejectButton.setBackground(Color.RED);&#10;            rejectButton.setForeground(Color.WHITE);&#10;            rejectButton.setPreferredSize(new Dimension(45, 25));&#10;            rejectButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            statusLabel = new JLabel();&#10;            statusLabel.setOpaque(true);&#10;            statusLabel.setHorizontalAlignment(SwingConstants.CENTER);&#10;            statusLabel.setPreferredSize(new Dimension(100, 25));&#10;            statusLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        }&#10;&#10;        @Override&#10;        public Component getTableCellRendererComponent(JTable table, Object value,&#10;                boolean isSelected, boolean hasFocus, int row, int column) {&#10;&#10;            removeAll();&#10;&#10;            if (row &lt; demandesInscription.size()) {&#10;                DemandeInscription demande = demandesInscription.get(row);&#10;&#10;                if (demande.getDateDeTraitement() == null) {&#10;                    // Demande en attente - afficher les boutons&#10;                    add(acceptButton);&#10;                    add(rejectButton);&#10;                    setBackground(Color.WHITE);&#10;                } else {&#10;                    // Demande traitée - afficher le statut&#10;                    String statut = (String) value;&#10;                    if (&quot;Accepté&quot;.equals(statut)) {&#10;                        statusLabel.setText(&quot;ACCEPTÉ&quot;);&#10;                        statusLabel.setBackground(Color.GREEN);&#10;                        statusLabel.setForeground(Color.WHITE);&#10;                    } else {&#10;                        statusLabel.setText(&quot;REJETÉ&quot;);&#10;                        statusLabel.setBackground(Color.RED);&#10;                        statusLabel.setForeground(Color.WHITE);&#10;                    }&#10;                    add(statusLabel);&#10;                    setBackground(statusLabel.getBackground());&#10;                }&#10;            }&#10;&#10;            return this;&#10;        }&#10;    }&#10;&#10;    // Classe pour l'édition des cellules de statut&#10;    private class StatusCellEditor extends AbstractCellEditor implements TableCellEditor {&#10;        private JPanel panel;&#10;        private JButton acceptButton;&#10;        private JButton rejectButton;&#10;        private String currentValue;&#10;        private int currentRow;&#10;&#10;        public StatusCellEditor() {&#10;            panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;&#10;            // Utiliser du texte simple au lieu de caractères spéciaux&#10;            acceptButton = new JButton(&quot;OK&quot;);&#10;            acceptButton.setBackground(Color.GREEN);&#10;            acceptButton.setForeground(Color.WHITE);&#10;            acceptButton.setPreferredSize(new Dimension(45, 25));&#10;            acceptButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            rejectButton = new JButton(&quot;NO&quot;);&#10;            rejectButton.setBackground(Color.RED);&#10;            rejectButton.setForeground(Color.WHITE);&#10;            rejectButton.setPreferredSize(new Dimension(45, 25));&#10;            rejectButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            acceptButton.addActionListener(e -&gt; {&#10;                accepterDemande(currentRow);&#10;                currentValue = &quot;Accepté&quot;; // Forcer la valeur à &quot;Accepté&quot;&#10;                fireEditingStopped();&#10;            });&#10;&#10;            rejectButton.addActionListener(e -&gt; {&#10;                rejeterDemande(currentRow);&#10;                currentValue = &quot;Rejeté&quot;; // Forcer la valeur à &quot;Rejeté&quot;&#10;                fireEditingStopped();&#10;            });&#10;        }&#10;&#10;        @Override&#10;        public Component getTableCellEditorComponent(JTable table, Object value,&#10;                boolean isSelected, int row, int column) {&#10;&#10;            currentValue = (String) value;&#10;            currentRow = row;&#10;&#10;            panel.removeAll();&#10;            panel.add(acceptButton);&#10;            panel.add(rejectButton);&#10;&#10;            return panel;&#10;        }&#10;&#10;        @Override&#10;        public Object getCellEditorValue() {&#10;            return currentValue;&#10;        }&#10;    }&#10;&#10;    private void accepterDemande(int row) {&#10;        try {&#10;            DemandeInscription demande = demandesInscription.get(row);&#10;&#10;            // Mettre à jour la date de traitement et le statut&#10;            demande.setDateDeTraitement(LocalDateTime.now());&#10;            demande.setStatut(&quot;ACCEPTE&quot;);&#10;&#10;                membreService.ajouter(nouveauMembre);&#10;            }&#10;&#10;            // Modifier la demande en base de données&#10;            demandeInscriptionService.modifier(demande);&#10;&#10;            // Mettre à jour l'affichage immédiatement&#10;            tableModel.setValueAt(&quot;Accepté&quot;, row, 5);&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            tableModel.setValueAt(demande.getDateDeTraitement().format(formatter), row, 3);&#10;&#10;            // Rafraîchir l'affichage du tableau&#10;            table.repaint();&#10;&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Demande acceptée avec succès!\nNouveau membre créé automatiquement.\nLe client peut maintenant se connecter à son espace membre.&quot;,&#10;                &quot;Demande acceptée&quot;,&#10;                JOptionPane.INFORMATION_MESSAGE);&#10;&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors de l'acceptation: &quot; + e.getMessage(),&#10;                &quot;Erreur&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void rejeterDemande(int row) {&#10;        try {&#10;            DemandeInscription demande = demandesInscription.get(row);&#10;&#10;            // Confirmer le rejet&#10;            int confirmation = JOptionPane.showConfirmDialog(this,&#10;                &quot;Êtes-vous sûr de vouloir rejeter cette demande ?\n&quot; +&#10;                &quot;La demande de &quot; + demande.getClient().getPrenom() + &quot; &quot; + demande.getClient().getNom() +&#10;                &quot; sera marquée comme rejetée.\n&quot; +&#10;                &quot;Le client ne pourra pas se connecter mais ses données seront conservées.&quot;,&#10;                &quot;Confirmer le rejet&quot;,&#10;                JOptionPane.YES_NO_OPTION,&#10;                JOptionPane.WARNING_MESSAGE);&#10;&#10;            if (confirmation != JOptionPane.YES_OPTION) {&#10;                return;&#10;            }&#10;&#10;            // Mettre à jour la date de traitement et le statut (SANS supprimer le client)&#10;            demande.setDateDeTraitement(LocalDateTime.now());&#10;            demande.setStatut(&quot;REJETE&quot;);&#10;&#10;            // Modifier la demande en base de données&#10;            demandeInscriptionService.modifier(demande);&#10;            // Mettre à jour la date de traitement et le statut (SANS supprimer le client)&#10;            // Mettre à jour l'affichage immédiatement&#10;            tableModel.setValueAt(&quot;Rejeté&quot;, row, 5);&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            tableModel.setValueAt(demande.getDateDeTraitement().format(formatter), row, 3);&#10;&#10;            // Rafraîchir l'affichage du tableau&#10;            table.repaint();&#10;            demande.setStatut(&quot;REJETE&quot;);&#10;            e.printStackTrace();&#10;            // Modifier la demande en base de données&#10;                &quot;Erreur lors du rejet: &quot; + e.getMessage(),&#10;                &quot;Erreur&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void loadData() {&#10;        // Vider le modèle&#10;        tableModel.setRowCount(0);&#10;        &#10;        // Charger les données&#10;        demandesInscription = demandeInscriptionService.listerTous();&#10;        &#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        &#10;        for (DemandeInscription demande : demandesInscription) {&#10;            String statut;&#10;            if (demande.getDateDeTraitement() == null) {&#10;                statut = &quot;En attente&quot;;&#10;            } else {&#10;                // Ici nous devons déterminer si c'est accepté ou rejeté&#10;                // Pour cet exemple, nous supposons qu'il y a un champ statut dans DemandeInscription&#10;                // Sinon, nous pouvons vérifier s'il y a un membre correspondant&#10;                statut = verifierStatutDemande(demande);&#10;            }&#10;&#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                demande.getId(),&#10;                demande.getDateDeDemande() != null ? demande.getDateDeDemande().format(formatter) : &quot;Non définie&quot;,&#10;                demande.getDateDeTraitement() != null ? demande.getDateDeTraitement().format(formatter) : &quot;Non traitée&quot;,&#10;                demande.getClient() != null ? demande.getClient().getNom() + &quot; &quot; + demande.getClient().getPrenom() : &quot;Aucun&quot;,&#10;                statut&#10;            });&#10;        }&#10;    }&#10;&#10;    private String verifierStatutDemande(DemandeInscription demande) {&#10;        if (demande.getDateDeTraitement() == null) {&#10;            return &quot;En attente&quot;;&#10;        }&#10;&#10;        // Utiliser le champ statut directement&#10;        if (&quot;ACCEPTE&quot;.equals(demande.getStatut())) {&#10;            return &quot;Accepté&quot;;&#10;        } else if (&quot;REJETE&quot;.equals(demande.getStatut())) {&#10;            return &quot;Rejeté&quot;;&#10;        }&#10;&#10;        // Fallback pour les anciennes données sans statut&#10;        // Vérifier s'il existe un membre pour ce client&#10;        try {&#10;            List&lt;Membre&gt; membres = membreService.listerTous();&#10;            for (Membre membre : membres) {&#10;                if (membre.getClient() != null &amp;&amp; demande.getClient() != null &amp;&amp;&#10;                    membre.getClient().getId().equals(demande.getClient().getId())) {&#10;&#10;                    // Si on trouve un membre avec le même client, c'est accepté&#10;                    // Vérifier si la date d'inscription est proche de la date de traitement&#10;                    if (membre.getDateInscription() != null &amp;&amp;&#10;                        Math.abs(java.time.Duration.between(&#10;                            membre.getDateInscription(),&#10;                            demande.getDateDeTraitement()).toHours()) &lt;= 24) {&#10;                        return &quot;Accepté&quot;;&#10;                    }&#10;                }&#10;        // Utiliser le champ statut directement&#10;        if (&quot;ACCEPTE&quot;.equals(demande.getStatut())) {&#10;            return &quot;Accepté&quot;;&#10;        } else if (&quot;REJETE&quot;.equals(demande.getStatut())) {&#10;            return &quot;Rejeté&quot;;&#10;        // Récupérer la liste des clients&#10;        List&lt;Client&gt; clients = clientService.listerTous();&#10;        // Fallback pour les anciennes données sans statut&#10;        // Vérifier s'il existe un membre pour ce client&#10;        if (clients.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun client disponible. Veuillez d'abord créer un client.&quot;, &#10;                &quot;Erreur&quot;, &#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        // Créer un formulaire de saisie&#10;        JPanel formulaire = new JPanel(new GridLayout(3, 2, 10, 10));&#10;        JTextField dateDemandeField = new JTextField();&#10;        JTextField dateTraitementField = new JTextField();&#10;        JComboBox&lt;Client&gt; clientCombo = new JComboBox&lt;&gt;(clients.toArray(new Client[0]));&#10;        &#10;        // Pré-remplir la date de demande avec la date actuelle&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        dateDemandeField.setText(LocalDateTime.now().format(formatter));&#10;        &#10;        // Laisser la date de traitement vide par défaut (demande en attente)&#10;        dateTraitementField.setText(&quot;&quot;);&#10;        &#10;        formulaire.add(new JLabel(&quot;Date de demande (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateDemandeField);&#10;        formulaire.add(new JLabel(&quot;Date de traitement (optionnel) :&quot;));&#10;        formulaire.add(dateTraitementField);&#10;        formulaire.add(new JLabel(&quot;Client :&quot;));&#10;        formulaire.add(clientCombo);&#10;        &#10;        int result = JOptionPane.showConfirmDialog(&#10;            this, &#10;            formulaire, &#10;            &quot;Ajouter une nouvelle demande d'inscription&quot;, &#10;            JOptionPane.OK_CANCEL_OPTION,&#10;            JOptionPane.PLAIN_MESSAGE&#10;        );&#10;        &#10;        if (result == JOptionPane.OK_OPTION) {&#10;            String dateDemandeText = dateDemandeField.getText().trim();&#10;            String dateTraitementText = dateTraitementField.getText().trim();&#10;            &#10;            if (!dateDemandeText.isEmpty()) {&#10;                try {&#10;                    LocalDateTime dateDemande = LocalDateTime.parse(dateDemandeText, formatter);&#10;                    LocalDateTime dateTraitement = null;&#10;                    &#10;                    // Parser la date de traitement si elle est fournie&#10;                    if (!dateTraitementText.isEmpty()) {&#10;                        dateTraitement = LocalDateTime.parse(dateTraitementText, formatter);&#10;                        &#10;                        // Vérifier que la date de traitement est postérieure à la date de demande&#10;                        if (dateTraitement.isBefore(dateDemande)) {&#10;                            JOptionPane.showMessageDialog(this, &#10;                                &quot;La date de traitement doit être postérieure à la date de demande!&quot;, &#10;                                &quot;Dates invalides&quot;, &#10;                                JOptionPane.WARNING_MESSAGE);&#10;                            return;&#10;                        }&#10;                    }&#10;                    &#10;                    Client clientSelectionne = (Client) clientCombo.getSelectedItem();&#10;                    &#10;                    DemandeInscription nouvelleDemande = new DemandeInscription(dateDemande, dateTraitement, clientSelectionne);&#10;                    demandeInscriptionService.ajouter(nouvelleDemande);&#10;                    &#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Demande d'inscription ajoutée avec succès!&quot;, &#10;                        &quot;Ajout réussi&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de l'ajout: &quot; + e.getMessage() + &#10;                        &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;La date de demande est obligatoire!&quot;, &#10;                    &quot;Champ manquant&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (demandeSelectionnee != null) {&#10;            // Récupérer la liste des clients&#10;            List&lt;Client&gt; clients = clientService.listerTous();&#10;            &#10;            if (clients.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Aucun client disponible.&quot;, &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;            &#10;            // Pré-remplir le formulaire avec les données existantes&#10;            JPanel formulaire = new JPanel(new GridLayout(3, 2, 10, 10));&#10;            JTextField dateDemandeField = new JTextField();&#10;            JTextField dateTraitementField = new JTextField();&#10;            JComboBox&lt;Client&gt; clientCombo = new JComboBox&lt;&gt;(clients.toArray(new Client[0]));&#10;            &#10;            // Formatter et afficher les données existantes&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            if (demandeSelectionnee.getDateDeDemande() != null) {&#10;                dateDemandeField.setText(demandeSelectionnee.getDateDeDemande().format(formatter));&#10;            }&#10;            if (demandeSelectionnee.getDateDeTraitement() != null) {&#10;                dateTraitementField.setText(demandeSelectionnee.getDateDeTraitement().format(formatter));&#10;            }&#10;            &#10;            // Sélectionner le client actuel&#10;            if (demandeSelectionnee.getClient() != null) {&#10;                clientCombo.setSelectedItem(demandeSelectionnee.getClient());&#10;            }&#10;            &#10;            formulaire.add(new JLabel(&quot;Date de demande (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateDemandeField);&#10;            formulaire.add(new JLabel(&quot;Date de traitement (optionnel) :&quot;));&#10;            formulaire.add(dateTraitementField);&#10;            formulaire.add(new JLabel(&quot;Client :&quot;));&#10;            formulaire.add(clientCombo);&#10;            &#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier la demande d'inscription: &quot; + demandeSelectionnee.getId(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            &#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String dateDemandeText = dateDemandeField.getText().trim();&#10;                String dateTraitementText = dateTraitementField.getText().trim();&#10;                &#10;                if (!dateDemandeText.isEmpty()) {&#10;                    try {&#10;                        LocalDateTime dateDemande = LocalDateTime.parse(dateDemandeText, formatter);&#10;                        LocalDateTime dateTraitement = null;&#10;                        &#10;                        // Parser la date de traitement si elle est fournie&#10;                        if (!dateTraitementText.isEmpty()) {&#10;                            dateTraitement = LocalDateTime.parse(dateTraitementText, formatter);&#10;                            &#10;                            // Vérifier que la date de traitement est postérieure à la date de demande&#10;                            if (dateTraitement.isBefore(dateDemande)) {&#10;                                JOptionPane.showMessageDialog(this, &#10;                                    &quot;La date de traitement doit être postérieure à la date de demande!&quot;, &#10;                                    &quot;Dates invalides&quot;, &#10;                                    JOptionPane.WARNING_MESSAGE);&#10;                                return;&#10;                            }&#10;                        }&#10;                        &#10;                        Client clientSelectionne = (Client) clientCombo.getSelectedItem();&#10;                        &#10;                        // Mettre à jour les données de la demande sélectionnée&#10;                        demandeSelectionnee.setDateDeDemande(dateDemande);&#10;                        demandeSelectionnee.setDateDeTraitement(dateTraitement);&#10;                        demandeSelectionnee.setClient(clientSelectionne);&#10;                        &#10;                        demandeInscriptionService.modifier(demandeSelectionnee);&#10;                        &#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Demande d'inscription modifiée avec succès!&quot;, &#10;                            &quot;Modification réussie&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                        &#10;                        // Recharger les données&#10;                        loadData();&#10;                        &#10;                    } catch (Exception e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Erreur lors de la modification: &quot; + e.getMessage() + &#10;                            &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                            &quot;Erreur&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    }&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;La date de demande est obligatoire!&quot;, &#10;                        &quot;Champ manquant&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (demandeSelectionnee != null) {&#10;            try {&#10;                demandeInscriptionService.supprimer(demandeSelectionnee);&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Demande d'inscription supprimée avec succès!&quot;, &#10;                    &quot;Suppression réussie&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Recharger les données&#10;                loadData();&#10;                demandeSelectionnee = null;&#10;                &#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Erreur lors de la suppression: &quot; + e.getMessage(), &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return demandeSelectionnee != null;&#10;    }&#10;&#10;    public DemandeInscription getDemandeSelectionnee() {&#10;        return demandeSelectionnee;&#10;    }&#10;    &#10;    /**&#10;     * Méthode utilitaire pour traiter une demande (marquer comme traitée)&#10;     */&#10;    public void traiterDemande() {&#10;        if (demandeSelectionnee != null &amp;&amp; demandeSelectionnee.getDateDeTraitement() == null) {&#10;            try {&#10;                demandeSelectionnee.setDateDeTraitement(LocalDateTime.now());&#10;                demandeInscriptionService.modifier(demandeSelectionnee);&#10;                &#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Demande marquée comme traitée!&quot;, &#10;                    &quot;Traitement réussi&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Recharger les données&#10;                loadData();&#10;                &#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Erreur lors du traitement: &quot; + e.getMessage(), &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } else if (demandeSelectionnee != null &amp;&amp; demandeSelectionnee.getDateDeTraitement() != null) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Cette demande a déjà été traitée!&quot;, &#10;                &quot;Demande déjà traitée&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gui_admin.panel;&#10;&#10;import entite.DemandeInscription;&#10;import entite.Client;&#10;import entite.Membre;&#10;import service.DemandeInscriptionService;&#10;import service.ClientService;&#10;import service.MembreService;&#10;import gui_util.StyleUtil;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.table.TableCellRenderer;&#10;import javax.swing.table.TableCellEditor;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class DemandeInscriptionPanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;DemandeInscription&gt; demandesInscription;&#10;    private DemandeInscription demandeSelectionnee;&#10;    private DemandeInscriptionService demandeInscriptionService;&#10;    private ClientService clientService;&#10;    private MembreService membreService;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;&#10;    public DemandeInscriptionPanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.demandeInscriptionService = new DemandeInscriptionService();&#10;        this.clientService = new ClientService();&#10;        this.membreService = new MembreService();&#10;&#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;ID&quot;, &quot;Date demande&quot;, &quot;Date traitement&quot;, &quot;Client&quot;, &quot;Statut&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                // Rendre la colonne statut éditable pour les boutons&#10;                return column == 0 || column == 5;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);&#10;        table.getColumnModel().getColumn(5).setPreferredWidth(150);&#10;&#10;        // Configurer le renderer et l'éditeur pour la colonne Statut&#10;        table.getColumnModel().getColumn(5).setCellRenderer(new StatusCellRenderer());&#10;        table.getColumnModel().getColumn(5).setCellEditor(new StatusCellEditor());&#10;&#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        demandeSelectionnee = demandesInscription.get(row);&#10;                    } else {&#10;                        demandeSelectionnee = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    // Classe pour le rendu des cellules de statut&#10;    private class StatusCellRenderer extends JPanel implements TableCellRenderer {&#10;        private JButton acceptButton;&#10;        private JButton rejectButton;&#10;        private JLabel statusLabel;&#10;&#10;        public StatusCellRenderer() {&#10;            setLayout(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;&#10;            // Utiliser du texte simple au lieu de caractères spéciaux pour éviter les problèmes d'encodage&#10;            acceptButton = new JButton(&quot;OK&quot;);&#10;            acceptButton.setBackground(Color.GREEN);&#10;            acceptButton.setForeground(Color.WHITE);&#10;            acceptButton.setPreferredSize(new Dimension(45, 25));&#10;            acceptButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            rejectButton = new JButton(&quot;NO&quot;);&#10;            rejectButton.setBackground(Color.RED);&#10;            rejectButton.setForeground(Color.WHITE);&#10;            rejectButton.setPreferredSize(new Dimension(45, 25));&#10;            rejectButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            statusLabel = new JLabel();&#10;            statusLabel.setOpaque(true);&#10;            statusLabel.setHorizontalAlignment(SwingConstants.CENTER);&#10;            statusLabel.setPreferredSize(new Dimension(100, 25));&#10;            statusLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        }&#10;&#10;        @Override&#10;        public Component getTableCellRendererComponent(JTable table, Object value,&#10;                boolean isSelected, boolean hasFocus, int row, int column) {&#10;&#10;            removeAll();&#10;&#10;            if (row &lt; demandesInscription.size()) {&#10;                DemandeInscription demande = demandesInscription.get(row);&#10;&#10;                if (demande.getDateDeTraitement() == null) {&#10;                    // Demande en attente - afficher les boutons&#10;                    add(acceptButton);&#10;                    add(rejectButton);&#10;                    setBackground(Color.WHITE);&#10;                } else {&#10;                    // Demande traitée - afficher le statut&#10;                    String statut = (String) value;&#10;                    if (&quot;Accepté&quot;.equals(statut)) {&#10;                        statusLabel.setText(&quot;ACCEPTÉ&quot;);&#10;                        statusLabel.setBackground(Color.GREEN);&#10;                        statusLabel.setForeground(Color.WHITE);&#10;                    } else {&#10;                        statusLabel.setText(&quot;REJETÉ&quot;);&#10;                        statusLabel.setBackground(Color.RED);&#10;                        statusLabel.setForeground(Color.WHITE);&#10;                    }&#10;                    add(statusLabel);&#10;                    setBackground(statusLabel.getBackground());&#10;                }&#10;            }&#10;&#10;            return this;&#10;        }&#10;    }&#10;&#10;    // Classe pour l'édition des cellules de statut&#10;    private class StatusCellEditor extends AbstractCellEditor implements TableCellEditor {&#10;        private JPanel panel;&#10;        private JButton acceptButton;&#10;        private JButton rejectButton;&#10;        private String currentValue;&#10;        private int currentRow;&#10;&#10;        public StatusCellEditor() {&#10;            panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));&#10;&#10;            // Utiliser du texte simple au lieu de caractères spéciaux&#10;            acceptButton = new JButton(&quot;OK&quot;);&#10;            acceptButton.setBackground(Color.GREEN);&#10;            acceptButton.setForeground(Color.WHITE);&#10;            acceptButton.setPreferredSize(new Dimension(45, 25));&#10;            acceptButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            rejectButton = new JButton(&quot;NO&quot;);&#10;            rejectButton.setBackground(Color.RED);&#10;            rejectButton.setForeground(Color.WHITE);&#10;            rejectButton.setPreferredSize(new Dimension(45, 25));&#10;            rejectButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;&#10;            acceptButton.addActionListener(e -&gt; {&#10;                accepterDemande(currentRow);&#10;                currentValue = &quot;Accepté&quot;; // Forcer la valeur à &quot;Accepté&quot;&#10;                fireEditingStopped();&#10;            });&#10;&#10;            rejectButton.addActionListener(e -&gt; {&#10;                rejeterDemande(currentRow);&#10;                currentValue = &quot;Rejeté&quot;; // Forcer la valeur à &quot;Rejeté&quot;&#10;                fireEditingStopped();&#10;            });&#10;        }&#10;&#10;        @Override&#10;        public Component getTableCellEditorComponent(JTable table, Object value,&#10;                boolean isSelected, int row, int column) {&#10;&#10;            currentValue = (String) value;&#10;            currentRow = row;&#10;&#10;            panel.removeAll();&#10;            panel.add(acceptButton);&#10;            panel.add(rejectButton);&#10;&#10;            return panel;&#10;        }&#10;&#10;        @Override&#10;        public Object getCellEditorValue() {&#10;            return currentValue;&#10;        }&#10;    }&#10;&#10;    private void accepterDemande(int row) {&#10;        try {&#10;            DemandeInscription demande = demandesInscription.get(row);&#10;&#10;            // Mettre à jour la date de traitement&#10;            demande.setDateDeTraitement(LocalDateTime.now());&#10;            &#10;            // Essayer de mettre à jour le statut si la colonne existe&#10;            try {&#10;                demande.setStatut(&quot;ACCEPTE&quot;);&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;Champ statut non disponible, utilisation de la logique de fallback&quot;);&#10;            }&#10;&#10;            // Créer un nouveau membre automatiquement&#10;            if (demande.getClient() != null) {&#10;                Membre nouveauMembre = new Membre();&#10;                nouveauMembre.setClient(demande.getClient());&#10;                nouveauMembre.setDateInscription(demande.getDateDeTraitement()); // Utiliser la date de traitement comme date d'inscription&#10;&#10;                membreService.ajouter(nouveauMembre);&#10;            }&#10;&#10;            // Modifier la demande en base de données&#10;            demandeInscriptionService.modifier(demande);&#10;&#10;            // Mettre à jour l'affichage immédiatement&#10;            tableModel.setValueAt(&quot;Accepté&quot;, row, 5);&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            tableModel.setValueAt(demande.getDateDeTraitement().format(formatter), row, 3);&#10;&#10;            // Rafraîchir l'affichage du tableau&#10;            table.repaint();&#10;&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Demande acceptée avec succès!\nNouveau membre créé automatiquement.\nLe client peut maintenant se connecter à son espace membre.&quot;,&#10;                &quot;Demande acceptée&quot;,&#10;                JOptionPane.INFORMATION_MESSAGE);&#10;&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors de l'acceptation: &quot; + e.getMessage(),&#10;                &quot;Erreur&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void rejeterDemande(int row) {&#10;        try {&#10;            DemandeInscription demande = demandesInscription.get(row);&#10;&#10;            // Confirmer le rejet&#10;            int confirmation = JOptionPane.showConfirmDialog(this,&#10;                &quot;Êtes-vous sûr de vouloir rejeter cette demande ?\n&quot; +&#10;                &quot;La demande de &quot; + demande.getClient().getPrenom() + &quot; &quot; + demande.getClient().getNom() +&#10;                &quot; sera marquée comme rejetée.\n&quot; +&#10;                &quot;Le client ne pourra pas se connecter mais ses données seront conservées.&quot;,&#10;                &quot;Confirmer le rejet&quot;,&#10;                JOptionPane.YES_NO_OPTION,&#10;                JOptionPane.WARNING_MESSAGE);&#10;&#10;            if (confirmation != JOptionPane.YES_OPTION) {&#10;                return;&#10;            }&#10;&#10;            // Mettre à jour la date de traitement&#10;            demande.setDateDeTraitement(LocalDateTime.now());&#10;            &#10;            // Essayer de mettre à jour le statut si la colonne existe&#10;            try {&#10;                demande.setStatut(&quot;REJETE&quot;);&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;Champ statut non disponible, utilisation de la logique de fallback&quot;);&#10;            }&#10;&#10;            // Modifier la demande en base de données (SANS supprimer le client)&#10;            demandeInscriptionService.modifier(demande);&#10;&#10;            // Mettre à jour l'affichage immédiatement&#10;            tableModel.setValueAt(&quot;Rejeté&quot;, row, 5);&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            tableModel.setValueAt(demande.getDateDeTraitement().format(formatter), row, 3);&#10;&#10;            // Rafraîchir l'affichage du tableau&#10;            table.repaint();&#10;&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Demande rejetée avec succès.\nLes données du client ont été conservées.\nLe client ne pourra pas se connecter.&quot;,&#10;                &quot;Demande rejetée&quot;,&#10;                JOptionPane.INFORMATION_MESSAGE);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors du rejet: &quot; + e.getMessage(),&#10;                &quot;Erreur&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void loadData() {&#10;        // Vider le modèle&#10;        tableModel.setRowCount(0);&#10;        &#10;        // Charger les données&#10;        demandesInscription = demandeInscriptionService.listerTous();&#10;        &#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        &#10;        for (DemandeInscription demande : demandesInscription) {&#10;            String statut;&#10;            if (demande.getDateDeTraitement() == null) {&#10;                statut = &quot;En attente&quot;;&#10;            } else {&#10;                // Ici nous devons déterminer si c'est accepté ou rejeté&#10;                // Pour cet exemple, nous supposons qu'il y a un champ statut dans DemandeInscription&#10;                // Sinon, nous pouvons vérifier s'il y a un membre correspondant&#10;                statut = verifierStatutDemande(demande);&#10;            }&#10;&#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                demande.getId(),&#10;                demande.getDateDeDemande() != null ? demande.getDateDeDemande().format(formatter) : &quot;Non définie&quot;,&#10;                demande.getDateDeTraitement() != null ? demande.getDateDeTraitement().format(formatter) : &quot;Non traitée&quot;,&#10;                demande.getClient() != null ? demande.getClient().getNom() + &quot; &quot; + demande.getClient().getPrenom() : &quot;Aucun&quot;,&#10;                statut&#10;            });&#10;        }&#10;    }&#10;&#10;    private String verifierStatutDemande(DemandeInscription demande) {&#10;        if (demande.getDateDeTraitement() == null) {&#10;            return &quot;En attente&quot;;&#10;        }&#10;&#10;        // Essayer d'utiliser le champ statut s'il existe, sinon utiliser la logique de fallback&#10;        try {&#10;            if (demande.getStatut() != null) {&#10;                if (&quot;ACCEPTE&quot;.equals(demande.getStatut())) {&#10;                    return &quot;Accepté&quot;;&#10;                } else if (&quot;REJETE&quot;.equals(demande.getStatut())) {&#10;                    return &quot;Rejeté&quot;;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Champ statut non disponible, utilisation de la logique de fallback&quot;);&#10;        }&#10;&#10;        // Fallback : vérifier s'il existe un membre pour ce client&#10;        try {&#10;            List&lt;Membre&gt; membres = membreService.listerTous();&#10;            for (Membre membre : membres) {&#10;                if (membre.getClient() != null &amp;&amp; demande.getClient() != null &amp;&amp;&#10;                    membre.getClient().getId().equals(demande.getClient().getId())) {&#10;&#10;                    // Si on trouve un membre avec le même client, c'est accepté&#10;                    // Vérifier si la date d'inscription est proche de la date de traitement&#10;                    if (membre.getDateInscription() != null &amp;&amp;&#10;                        Math.abs(java.time.Duration.between(&#10;                            membre.getDateInscription(),&#10;                            demande.getDateDeTraitement()).toHours()) &lt;= 24) {&#10;                        return &quot;Accepté&quot;;&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erreur lors de la vérification du statut: &quot; + e.getMessage());&#10;        }&#10;&#10;        // Si pas de membre trouvé et que la demande est traitée, c'est rejeté&#10;        return &quot;Rejeté&quot;;&#10;    }&#10;&#10;    @Override&#10;    public void ajouter() {&#10;        // Récupérer la liste des clients&#10;        List&lt;Client&gt; clients = clientService.listerTous();&#10;        &#10;        if (clients.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun client disponible. Veuillez d'abord créer un client.&quot;, &#10;                &quot;Erreur&quot;, &#10;                JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        // Créer un formulaire de saisie&#10;        JPanel formulaire = new JPanel(new GridLayout(3, 2, 10, 10));&#10;        JTextField dateDemandeField = new JTextField();&#10;        JTextField dateTraitementField = new JTextField();&#10;        JComboBox&lt;Client&gt; clientCombo = new JComboBox&lt;&gt;(clients.toArray(new Client[0]));&#10;        &#10;        // Pré-remplir la date de demande avec la date actuelle&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        dateDemandeField.setText(LocalDateTime.now().format(formatter));&#10;        &#10;        // Laisser la date de traitement vide par défaut (demande en attente)&#10;        dateTraitementField.setText(&quot;&quot;);&#10;        &#10;        formulaire.add(new JLabel(&quot;Date de demande (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateDemandeField);&#10;        formulaire.add(new JLabel(&quot;Date de traitement (optionnel) :&quot;));&#10;        formulaire.add(dateTraitementField);&#10;        formulaire.add(new JLabel(&quot;Client :&quot;));&#10;        formulaire.add(clientCombo);&#10;        &#10;        int result = JOptionPane.showConfirmDialog(&#10;            this, &#10;            formulaire, &#10;            &quot;Ajouter une nouvelle demande d'inscription&quot;, &#10;            JOptionPane.OK_CANCEL_OPTION,&#10;            JOptionPane.PLAIN_MESSAGE&#10;        );&#10;        &#10;        if (result == JOptionPane.OK_OPTION) {&#10;            String dateDemandeText = dateDemandeField.getText().trim();&#10;            String dateTraitementText = dateTraitementField.getText().trim();&#10;            &#10;            if (!dateDemandeText.isEmpty()) {&#10;                try {&#10;                    LocalDateTime dateDemande = LocalDateTime.parse(dateDemandeText, formatter);&#10;                    LocalDateTime dateTraitement = null;&#10;                    &#10;                    // Parser la date de traitement si elle est fournie&#10;                    if (!dateTraitementText.isEmpty()) {&#10;                        dateTraitement = LocalDateTime.parse(dateTraitementText, formatter);&#10;                        &#10;                        // Vérifier que la date de traitement est postérieure à la date de demande&#10;                        if (dateTraitement.isBefore(dateDemande)) {&#10;                            JOptionPane.showMessageDialog(this, &#10;                                &quot;La date de traitement doit être postérieure à la date de demande!&quot;, &#10;                                &quot;Dates invalides&quot;, &#10;                                JOptionPane.WARNING_MESSAGE);&#10;                            return;&#10;                        }&#10;                    }&#10;                    &#10;                    Client clientSelectionne = (Client) clientCombo.getSelectedItem();&#10;                    &#10;                    DemandeInscription nouvelleDemande = new DemandeInscription(dateDemande, dateTraitement, clientSelectionne);&#10;                    demandeInscriptionService.ajouter(nouvelleDemande);&#10;                    &#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Demande d'inscription ajoutée avec succès!&quot;, &#10;                        &quot;Ajout réussi&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de l'ajout: &quot; + e.getMessage() + &#10;                        &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;La date de demande est obligatoire!&quot;, &#10;                    &quot;Champ manquant&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (demandeSelectionnee != null) {&#10;            // Récupérer la liste des clients&#10;            List&lt;Client&gt; clients = clientService.listerTous();&#10;            &#10;            if (clients.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Aucun client disponible.&quot;, &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;            &#10;            // Pré-remplir le formulaire avec les données existantes&#10;            JPanel formulaire = new JPanel(new GridLayout(3, 2, 10, 10));&#10;            JTextField dateDemandeField = new JTextField();&#10;            JTextField dateTraitementField = new JTextField();&#10;            JComboBox&lt;Client&gt; clientCombo = new JComboBox&lt;&gt;(clients.toArray(new Client[0]));&#10;            &#10;            // Formatter et afficher les données existantes&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            if (demandeSelectionnee.getDateDeDemande() != null) {&#10;                dateDemandeField.setText(demandeSelectionnee.getDateDeDemande().format(formatter));&#10;            }&#10;            if (demandeSelectionnee.getDateDeTraitement() != null) {&#10;                dateTraitementField.setText(demandeSelectionnee.getDateDeTraitement().format(formatter));&#10;            }&#10;            &#10;            // Sélectionner le client actuel&#10;            if (demandeSelectionnee.getClient() != null) {&#10;                clientCombo.setSelectedItem(demandeSelectionnee.getClient());&#10;            }&#10;            &#10;            formulaire.add(new JLabel(&quot;Date de demande (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateDemandeField);&#10;            formulaire.add(new JLabel(&quot;Date de traitement (optionnel) :&quot;));&#10;            formulaire.add(dateTraitementField);&#10;            formulaire.add(new JLabel(&quot;Client :&quot;));&#10;            formulaire.add(clientCombo);&#10;            &#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier la demande d'inscription: &quot; + demandeSelectionnee.getId(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            &#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String dateDemandeText = dateDemandeField.getText().trim();&#10;                String dateTraitementText = dateTraitementField.getText().trim();&#10;                &#10;                if (!dateDemandeText.isEmpty()) {&#10;                    try {&#10;                        LocalDateTime dateDemande = LocalDateTime.parse(dateDemandeText, formatter);&#10;                        LocalDateTime dateTraitement = null;&#10;                        &#10;                        // Parser la date de traitement si elle est fournie&#10;                        if (!dateTraitementText.isEmpty()) {&#10;                            dateTraitement = LocalDateTime.parse(dateTraitementText, formatter);&#10;                            &#10;                            // Vérifier que la date de traitement est postérieure à la date de demande&#10;                            if (dateTraitement.isBefore(dateDemande)) {&#10;                                JOptionPane.showMessageDialog(this, &#10;                                    &quot;La date de traitement doit être postérieure à la date de demande!&quot;, &#10;                                    &quot;Dates invalides&quot;, &#10;                                    JOptionPane.WARNING_MESSAGE);&#10;                                return;&#10;                            }&#10;                        }&#10;                        &#10;                        Client clientSelectionne = (Client) clientCombo.getSelectedItem();&#10;                        &#10;                        // Mettre à jour les données de la demande sélectionnée&#10;                        demandeSelectionnee.setDateDeDemande(dateDemande);&#10;                        demandeSelectionnee.setDateDeTraitement(dateTraitement);&#10;                        demandeSelectionnee.setClient(clientSelectionne);&#10;                        &#10;                        demandeInscriptionService.modifier(demandeSelectionnee);&#10;                        &#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Demande d'inscription modifiée avec succès!&quot;, &#10;                            &quot;Modification réussie&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                        &#10;                        // Recharger les données&#10;                        loadData();&#10;                        &#10;                    } catch (Exception e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Erreur lors de la modification: &quot; + e.getMessage() + &#10;                            &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                            &quot;Erreur&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    }&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;La date de demande est obligatoire!&quot;, &#10;                        &quot;Champ manquant&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (demandeSelectionnee != null) {&#10;            try {&#10;                demandeInscriptionService.supprimer(demandeSelectionnee);&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Demande d'inscription supprimée avec succès!&quot;, &#10;                    &quot;Suppression réussie&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Recharger les données&#10;                loadData();&#10;                demandeSelectionnee = null;&#10;                &#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Erreur lors de la suppression: &quot; + e.getMessage(), &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return demandeSelectionnee != null;&#10;    }&#10;&#10;    public DemandeInscription getDemandeSelectionnee() {&#10;        return demandeSelectionnee;&#10;    }&#10;    &#10;    /**&#10;     * Méthode utilitaire pour traiter une demande (marquer comme traitée)&#10;     */&#10;    public void traiterDemande() {&#10;        if (demandeSelectionnee != null &amp;&amp; demandeSelectionnee.getDateDeTraitement() == null) {&#10;            try {&#10;                demandeSelectionnee.setDateDeTraitement(LocalDateTime.now());&#10;                demandeInscriptionService.modifier(demandeSelectionnee);&#10;                &#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Demande marquée comme traitée!&quot;, &#10;                    &quot;Traitement réussi&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Recharger les données&#10;                loadData();&#10;                &#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Erreur lors du traitement: &quot; + e.getMessage(), &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        } else if (demandeSelectionnee != null &amp;&amp; demandeSelectionnee.getDateDeTraitement() != null) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Cette demande a déjà été traitée!&quot;, &#10;                &quot;Demande déjà traitée&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_admin/panel/NotificationPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_admin/panel/NotificationPanel.java" />
              <option name="originalContent" value="package gui_admin.panel;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;&#10;public class NotificationPanel extends JPanel {&#10;&#10;    public NotificationPanel() {&#10;        initializeComponents();&#10;    }&#10;&#10;    private void initializeComponents() {&#10;        setLayout(new BorderLayout());&#10;        setBackground(Color.WHITE);&#10;&#10;        // Titre du panel&#10;        JLabel titleLabel = new JLabel(&quot;Notifications&quot;, SwingConstants.CENTER);&#10;        titleLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 24));&#10;        titleLabel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));&#10;        add(titleLabel, BorderLayout.NORTH);&#10;&#10;        // Zone principale des notifications&#10;        JPanel mainPanel = new JPanel(new BorderLayout());&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 20, 20));&#10;&#10;        // Liste des notifications (exemple)&#10;        DefaultListModel&lt;String&gt; listModel = new DefaultListModel&lt;&gt;();&#10;        listModel.addElement(&quot; Nouvelle demande d'inscription de Jean Dupont&quot;);&#10;        listModel.addElement(&quot; Paiement reçu pour l'abonnement de Marie Martin&quot;);&#10;        listModel.addElement(&quot;⚠️ Équipement 'Tapis de course 3' nécessite une maintenance&quot;);&#10;        listModel.addElement(&quot; Nouveau membre inscrit: Pierre Durand&quot;);&#10;        listModel.addElement(&quot; Séance de yoga programmée pour demain 14h&quot;);&#10;&#10;        JList&lt;String&gt; notificationList = new JList&lt;&gt;(listModel);&#10;        notificationList.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        notificationList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        notificationList.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        // Style de la liste&#10;        notificationList.setBackground(new Color(248, 249, 250));&#10;        notificationList.setSelectionBackground(new Color(74, 41, 0));&#10;        notificationList.setSelectionForeground(Color.WHITE);&#10;&#10;        JScrollPane scrollPane = new JScrollPane(notificationList);&#10;        scrollPane.setPreferredSize(new Dimension(600, 300));&#10;        scrollPane.setBorder(BorderFactory.createTitledBorder(&quot;Notifications récentes&quot;));&#10;&#10;        mainPanel.add(scrollPane, BorderLayout.CENTER);&#10;&#10;        // Panel des boutons&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));&#10;&#10;        JButton markAllReadButton = new JButton(&quot;Marquer tout comme lu&quot;);&#10;        markAllReadButton.setBackground(new Color(74, 41, 0));&#10;        markAllReadButton.setForeground(Color.WHITE);&#10;        markAllReadButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        markAllReadButton.setFocusPainted(false);&#10;&#10;        JButton refreshButton = new JButton(&quot;Actualiser&quot;);&#10;        refreshButton.setBackground(new Color(0, 123, 255));&#10;        refreshButton.setForeground(Color.WHITE);&#10;        refreshButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        refreshButton.setFocusPainted(false);&#10;&#10;        // Actions des boutons&#10;        markAllReadButton.addActionListener(e -&gt; {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Toutes les notifications ont été marquées comme lues.&quot;,&#10;                &quot;Notifications&quot;,&#10;                JOptionPane.INFORMATION_MESSAGE);&#10;        });&#10;&#10;        refreshButton.addActionListener(e -&gt; {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Notifications actualisées.&quot;,&#10;                &quot;Actualisation&quot;,&#10;                JOptionPane.INFORMATION_MESSAGE);&#10;        });&#10;&#10;        buttonPanel.add(refreshButton);&#10;        buttonPanel.add(markAllReadButton);&#10;&#10;        mainPanel.add(buttonPanel, BorderLayout.SOUTH);&#10;        add(mainPanel, BorderLayout.CENTER);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gui_admin.panel;&#10;&#10;import entite.Notification;&#10;import service.NotificationService;&#10;import gui_util.StyleUtil;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class NotificationPanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;Notification&gt; notifications;&#10;    private Notification notificationSelectionnee;&#10;    private NotificationService notificationService;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;&#10;    public NotificationPanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.notificationService = new NotificationService();&#10;        &#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;ID&quot;, &quot;Date d'envoi&quot;, &quot;Type&quot;, &quot;Destinataire&quot;, &quot;Description&quot;, &quot;Lu&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0 || columnIndex == 6) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);   // Sélection&#10;        table.getColumnModel().getColumn(1).setPreferredWidth(50);   // ID&#10;        table.getColumnModel().getColumn(2).setPreferredWidth(130);  // Date d'envoi&#10;        table.getColumnModel().getColumn(3).setPreferredWidth(100);  // Type&#10;        table.getColumnModel().getColumn(4).setPreferredWidth(120);  // Destinataire&#10;        table.getColumnModel().getColumn(5).setPreferredWidth(250);  // Description&#10;        table.getColumnModel().getColumn(6).setPreferredWidth(50);   // Lu&#10;        &#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        notificationSelectionnee = notifications.get(row);&#10;                    } else {&#10;                        notificationSelectionnee = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void loadData() {&#10;        // Vider le modèle&#10;        tableModel.setRowCount(0);&#10;        &#10;        // Charger les données&#10;        notifications = notificationService.listerTous();&#10;        &#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        &#10;        for (Notification notification : notifications) {&#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                notification.getId(),&#10;                notification.getDateEnvoi() != null ? notification.getDateEnvoi().format(formatter) : &quot;Non définie&quot;,&#10;                notification.getType() != null ? notification.getType() : &quot;Non défini&quot;,&#10;                notification.getDestinataire() != null ? notification.getDestinataire() : &quot;Non défini&quot;,&#10;                notification.getDescription() != null ? notification.getDescription() : &quot;Aucune description&quot;,&#10;                notification.getEstLu() != null ? notification.getEstLu() : false&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void ajouter() {&#10;        // Créer un formulaire de saisie&#10;        JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;        JTextField dateEnvoiField = new JTextField();&#10;        JTextField typeField = new JTextField();&#10;        JTextField destinataireField = new JTextField();&#10;        JTextArea descriptionArea = new JTextArea(3, 20);&#10;        JCheckBox estLuCheckBox = new JCheckBox();&#10;        &#10;        // Pré-remplir la date avec l'heure actuelle&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        dateEnvoiField.setText(LocalDateTime.now().format(formatter));&#10;        &#10;        formulaire.add(new JLabel(&quot;Date d'envoi (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateEnvoiField);&#10;        formulaire.add(new JLabel(&quot;Type :&quot;));&#10;        formulaire.add(typeField);&#10;        formulaire.add(new JLabel(&quot;Destinataire :&quot;));&#10;        formulaire.add(destinataireField);&#10;        formulaire.add(new JLabel(&quot;Description :&quot;));&#10;        formulaire.add(new JScrollPane(descriptionArea));&#10;        formulaire.add(new JLabel(&quot;Lu :&quot;));&#10;        formulaire.add(estLuCheckBox);&#10;        &#10;        int result = JOptionPane.showConfirmDialog(&#10;            this, &#10;            formulaire, &#10;            &quot;Ajouter une nouvelle notification&quot;, &#10;            JOptionPane.OK_CANCEL_OPTION,&#10;            JOptionPane.PLAIN_MESSAGE&#10;        );&#10;        &#10;        if (result == JOptionPane.OK_OPTION) {&#10;            String dateEnvoiText = dateEnvoiField.getText().trim();&#10;            String type = typeField.getText().trim();&#10;            String destinataire = destinataireField.getText().trim();&#10;            String description = descriptionArea.getText().trim();&#10;            boolean estLu = estLuCheckBox.isSelected();&#10;            &#10;            if (!dateEnvoiText.isEmpty() &amp;&amp; !type.isEmpty() &amp;&amp; !destinataire.isEmpty() &amp;&amp; !description.isEmpty()) {&#10;                try {&#10;                    // Parser la date&#10;                    LocalDateTime dateEnvoi = LocalDateTime.parse(dateEnvoiText, formatter);&#10;                    &#10;                    Notification nouvelleNotification = new Notification(dateEnvoi, destinataire, description, type);&#10;                    nouvelleNotification.setEstLu(estLu);&#10;                    notificationService.ajouter(nouvelleNotification);&#10;                    &#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Notification ajoutée avec succès!&quot;, &#10;                        &quot;Ajout réussi&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de l'ajout: &quot; + e.getMessage() + &#10;                        &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Tous les champs sont obligatoires!&quot;, &#10;                    &quot;Champs manquants&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (notificationSelectionnee != null) {&#10;            // Pré-remplir le formulaire avec les données existantes&#10;            JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;            JTextField dateEnvoiField = new JTextField();&#10;            JTextField typeField = new JTextField(notificationSelectionnee.getType() != null ? notificationSelectionnee.getType() : &quot;&quot;);&#10;            JTextField destinataireField = new JTextField(notificationSelectionnee.getDestinataire() != null ? notificationSelectionnee.getDestinataire() : &quot;&quot;);&#10;            JTextArea descriptionArea = new JTextArea(notificationSelectionnee.getDescription() != null ? notificationSelectionnee.getDescription() : &quot;&quot;, 3, 20);&#10;            JCheckBox estLuCheckBox = new JCheckBox();&#10;            &#10;            // Pré-remplir l'état &quot;lu&quot;&#10;            estLuCheckBox.setSelected(notificationSelectionnee.getEstLu() != null ? notificationSelectionnee.getEstLu() : false);&#10;            &#10;            // Formatter et afficher la date existante&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            if (notificationSelectionnee.getDateEnvoi() != null) {&#10;                dateEnvoiField.setText(notificationSelectionnee.getDateEnvoi().format(formatter));&#10;            }&#10;            &#10;            formulaire.add(new JLabel(&quot;Date d'envoi (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateEnvoiField);&#10;            formulaire.add(new JLabel(&quot;Type :&quot;));&#10;            formulaire.add(typeField);&#10;            formulaire.add(new JLabel(&quot;Destinataire :&quot;));&#10;            formulaire.add(destinataireField);&#10;            formulaire.add(new JLabel(&quot;Description :&quot;));&#10;            formulaire.add(new JScrollPane(descriptionArea));&#10;            formulaire.add(new JLabel(&quot;Lu :&quot;));&#10;            formulaire.add(estLuCheckBox);&#10;            &#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier la notification: &quot; + notificationSelectionnee.getType(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            &#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String dateEnvoiText = dateEnvoiField.getText().trim();&#10;                String type = typeField.getText().trim();&#10;                String destinataire = destinataireField.getText().trim();&#10;                String description = descriptionArea.getText().trim();&#10;                boolean estLu = estLuCheckBox.isSelected();&#10;                &#10;                if (!dateEnvoiText.isEmpty() &amp;&amp; !type.isEmpty() &amp;&amp; !destinataire.isEmpty() &amp;&amp; !description.isEmpty()) {&#10;                    try {&#10;                        // Parser la date&#10;                        LocalDateTime dateEnvoi = LocalDateTime.parse(dateEnvoiText, formatter);&#10;                        &#10;                        // Mettre à jour les données de la notification sélectionnée&#10;                        notificationSelectionnee.setDateEnvoi(dateEnvoi);&#10;                        notificationSelectionnee.setType(type);&#10;                        notificationSelectionnee.setDestinataire(destinataire);&#10;                        notificationSelectionnee.setDescription(description);&#10;                        notificationSelectionnee.setEstLu(estLu);&#10;                        &#10;                        notificationService.modifier(notificationSelectionnee);&#10;                        &#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Notification modifiée avec succès!&quot;, &#10;                            &quot;Modification réussie&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                        &#10;                        // Recharger les données&#10;                        loadData();&#10;                        &#10;                    } catch (Exception e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Erreur lors de la modification: &quot; + e.getMessage() + &#10;                            &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                            &quot;Erreur&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    }&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Tous les champs sont obligatoires!&quot;, &#10;                        &quot;Champs manquants&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (notificationSelectionnee != null) {&#10;            int confirmation = JOptionPane.showConfirmDialog(&#10;                this,&#10;                &quot;Êtes-vous sûr de vouloir supprimer cette notification ?\n&quot; +&#10;                &quot;Type: &quot; + notificationSelectionnee.getType() + &quot;\n&quot; +&#10;                &quot;Destinataire: &quot; + notificationSelectionnee.getDestinataire(),&#10;                &quot;Confirmer la suppression&quot;,&#10;                JOptionPane.YES_NO_OPTION,&#10;                JOptionPane.QUESTION_MESSAGE&#10;            );&#10;            &#10;            if (confirmation == JOptionPane.YES_OPTION) {&#10;                try {&#10;                    notificationService.supprimer(notificationSelectionnee);&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Notification supprimée avec succès!&quot;, &#10;                        &quot;Suppression réussie&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    notificationSelectionnee = null;&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de la suppression: &quot; + e.getMessage(), &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return notificationSelectionnee != null;&#10;    }&#10;&#10;    public Notification getNotificationSelectionnee() {&#10;        return notificationSelectionnee;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_admin/panel/NotificationTablePanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_admin/panel/NotificationTablePanel.java" />
              <option name="originalContent" value="package gui_admin.panel;&#10;&#10;public class NotificationTablePanel {&#10;}&#10;" />
              <option name="updatedContent" value="package gui_admin.panel;&#10;&#10;import entite.Notification;&#10;import service.NotificationService;&#10;import gui_util.StyleUtil;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class NotificationTablePanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;Notification&gt; notifications;&#10;    private Notification notificationSelectionnee;&#10;    private NotificationService notificationService;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;&#10;    public NotificationTablePanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.notificationService = new NotificationService();&#10;        &#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;ID&quot;, &quot;Date d'envoi&quot;, &quot;Type&quot;, &quot;Destinataire&quot;, &quot;Description&quot;, &quot;Lu&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0 || columnIndex == 6) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);   // Sélection&#10;        table.getColumnModel().getColumn(1).setPreferredWidth(50);   // ID&#10;        table.getColumnModel().getColumn(2).setPreferredWidth(130);  // Date d'envoi&#10;        table.getColumnModel().getColumn(3).setPreferredWidth(100);  // Type&#10;        table.getColumnModel().getColumn(4).setPreferredWidth(120);  // Destinataire&#10;        table.getColumnModel().getColumn(5).setPreferredWidth(250);  // Description&#10;        table.getColumnModel().getColumn(6).setPreferredWidth(50);   // Lu&#10;        &#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        notificationSelectionnee = notifications.get(row);&#10;                    } else {&#10;                        notificationSelectionnee = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void loadData() {&#10;        // Vider le modèle&#10;        tableModel.setRowCount(0);&#10;        &#10;        // Charger les données&#10;        notifications = notificationService.listerTous();&#10;        &#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        &#10;        for (Notification notification : notifications) {&#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                notification.getId(),&#10;                notification.getDateEnvoi() != null ? notification.getDateEnvoi().format(formatter) : &quot;Non définie&quot;,&#10;                notification.getType() != null ? notification.getType() : &quot;Non défini&quot;,&#10;                notification.getDestinataire() != null ? notification.getDestinataire() : &quot;Non défini&quot;,&#10;                notification.getDescription() != null ? notification.getDescription() : &quot;Aucune description&quot;,&#10;                notification.getEstLu() != null ? notification.getEstLu() : false&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void ajouter() {&#10;        // Créer un formulaire de saisie&#10;        JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;        JTextField dateEnvoiField = new JTextField();&#10;        JTextField typeField = new JTextField();&#10;        JTextField destinataireField = new JTextField();&#10;        JTextArea descriptionArea = new JTextArea(3, 20);&#10;        JCheckBox estLuCheckBox = new JCheckBox();&#10;        &#10;        // Pré-remplir la date avec l'heure actuelle&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;        dateEnvoiField.setText(LocalDateTime.now().format(formatter));&#10;        &#10;        formulaire.add(new JLabel(&quot;Date d'envoi (dd/MM/yyyy HH:mm) :&quot;));&#10;        formulaire.add(dateEnvoiField);&#10;        formulaire.add(new JLabel(&quot;Type :&quot;));&#10;        formulaire.add(typeField);&#10;        formulaire.add(new JLabel(&quot;Destinataire :&quot;));&#10;        formulaire.add(destinataireField);&#10;        formulaire.add(new JLabel(&quot;Description :&quot;));&#10;        formulaire.add(new JScrollPane(descriptionArea));&#10;        formulaire.add(new JLabel(&quot;Lu :&quot;));&#10;        formulaire.add(estLuCheckBox);&#10;        &#10;        int result = JOptionPane.showConfirmDialog(&#10;            this, &#10;            formulaire, &#10;            &quot;Ajouter une nouvelle notification&quot;, &#10;            JOptionPane.OK_CANCEL_OPTION,&#10;            JOptionPane.PLAIN_MESSAGE&#10;        );&#10;        &#10;        if (result == JOptionPane.OK_OPTION) {&#10;            String dateEnvoiText = dateEnvoiField.getText().trim();&#10;            String type = typeField.getText().trim();&#10;            String destinataire = destinataireField.getText().trim();&#10;            String description = descriptionArea.getText().trim();&#10;            boolean estLu = estLuCheckBox.isSelected();&#10;            &#10;            if (!dateEnvoiText.isEmpty() &amp;&amp; !type.isEmpty() &amp;&amp; !destinataire.isEmpty() &amp;&amp; !description.isEmpty()) {&#10;                try {&#10;                    // Parser la date&#10;                    LocalDateTime dateEnvoi = LocalDateTime.parse(dateEnvoiText, formatter);&#10;                    &#10;                    Notification nouvelleNotification = new Notification(dateEnvoi, destinataire, description, type);&#10;                    nouvelleNotification.setEstLu(estLu);&#10;                    notificationService.ajouter(nouvelleNotification);&#10;                    &#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Notification ajoutée avec succès!&quot;, &#10;                        &quot;Ajout réussi&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de l'ajout: &quot; + e.getMessage() + &#10;                        &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Tous les champs sont obligatoires!&quot;, &#10;                    &quot;Champs manquants&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (notificationSelectionnee != null) {&#10;            // Pré-remplir le formulaire avec les données existantes&#10;            JPanel formulaire = new JPanel(new GridLayout(5, 2, 10, 10));&#10;            JTextField dateEnvoiField = new JTextField();&#10;            JTextField typeField = new JTextField(notificationSelectionnee.getType() != null ? notificationSelectionnee.getType() : &quot;&quot;);&#10;            JTextField destinataireField = new JTextField(notificationSelectionnee.getDestinataire() != null ? notificationSelectionnee.getDestinataire() : &quot;&quot;);&#10;            JTextArea descriptionArea = new JTextArea(notificationSelectionnee.getDescription() != null ? notificationSelectionnee.getDescription() : &quot;&quot;, 3, 20);&#10;            JCheckBox estLuCheckBox = new JCheckBox();&#10;            &#10;            // Pré-remplir l'état &quot;lu&quot;&#10;            estLuCheckBox.setSelected(notificationSelectionnee.getEstLu() != null ? notificationSelectionnee.getEstLu() : false);&#10;            &#10;            // Formatter et afficher la date existante&#10;            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;);&#10;            if (notificationSelectionnee.getDateEnvoi() != null) {&#10;                dateEnvoiField.setText(notificationSelectionnee.getDateEnvoi().format(formatter));&#10;            }&#10;            &#10;            formulaire.add(new JLabel(&quot;Date d'envoi (dd/MM/yyyy HH:mm) :&quot;));&#10;            formulaire.add(dateEnvoiField);&#10;            formulaire.add(new JLabel(&quot;Type :&quot;));&#10;            formulaire.add(typeField);&#10;            formulaire.add(new JLabel(&quot;Destinataire :&quot;));&#10;            formulaire.add(destinataireField);&#10;            formulaire.add(new JLabel(&quot;Description :&quot;));&#10;            formulaire.add(new JScrollPane(descriptionArea));&#10;            formulaire.add(new JLabel(&quot;Lu :&quot;));&#10;            formulaire.add(estLuCheckBox);&#10;            &#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier la notification: &quot; + notificationSelectionnee.getType(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            &#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String dateEnvoiText = dateEnvoiField.getText().trim();&#10;                String type = typeField.getText().trim();&#10;                String destinataire = destinataireField.getText().trim();&#10;                String description = descriptionArea.getText().trim();&#10;                boolean estLu = estLuCheckBox.isSelected();&#10;                &#10;                if (!dateEnvoiText.isEmpty() &amp;&amp; !type.isEmpty() &amp;&amp; !destinataire.isEmpty() &amp;&amp; !description.isEmpty()) {&#10;                    try {&#10;                        // Parser la date&#10;                        LocalDateTime dateEnvoi = LocalDateTime.parse(dateEnvoiText, formatter);&#10;                        &#10;                        // Mettre à jour les données de la notification sélectionnée&#10;                        notificationSelectionnee.setDateEnvoi(dateEnvoi);&#10;                        notificationSelectionnee.setType(type);&#10;                        notificationSelectionnee.setDestinataire(destinataire);&#10;                        notificationSelectionnee.setDescription(description);&#10;                        notificationSelectionnee.setEstLu(estLu);&#10;                        &#10;                        notificationService.modifier(notificationSelectionnee);&#10;                        &#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Notification modifiée avec succès!&quot;, &#10;                            &quot;Modification réussie&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                        &#10;                        // Recharger les données&#10;                        loadData();&#10;                        &#10;                    } catch (Exception e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Erreur lors de la modification: &quot; + e.getMessage() + &#10;                            &quot;\nFormat de date attendu: dd/MM/yyyy HH:mm (ex: 15/01/2024 14:30)&quot;, &#10;                            &quot;Erreur&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    }&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Tous les champs sont obligatoires!&quot;, &#10;                        &quot;Champs manquants&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (notificationSelectionnee != null) {&#10;            int confirmation = JOptionPane.showConfirmDialog(&#10;                this,&#10;                &quot;Êtes-vous sûr de vouloir supprimer cette notification ?\n&quot; +&#10;                &quot;Type: &quot; + notificationSelectionnee.getType() + &quot;\n&quot; +&#10;                &quot;Destinataire: &quot; + notificationSelectionnee.getDestinataire(),&#10;                &quot;Confirmer la suppression&quot;,&#10;                JOptionPane.YES_NO_OPTION,&#10;                JOptionPane.QUESTION_MESSAGE&#10;            );&#10;            &#10;            if (confirmation == JOptionPane.YES_OPTION) {&#10;                try {&#10;                    notificationService.supprimer(notificationSelectionnee);&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Notification supprimée avec succès!&quot;, &#10;                        &quot;Suppression réussie&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    notificationSelectionnee = null;&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de la suppression: &quot; + e.getMessage(), &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return notificationSelectionnee != null;&#10;    }&#10;&#10;    public Notification getNotificationSelectionnee() {&#10;        return notificationSelectionnee;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_admin/panel/TypeAbonnementPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_admin/panel/TypeAbonnementPanel.java" />
              <option name="originalContent" value="package gui_admin.panel;&#10;&#10;import entite.TypeAbonnement;&#10;import service.TypeAbonnementService;&#10;import gui_util.StyleUtil;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.util.List;&#10;import java.util.regex.Pattern;&#10;&#10;public class TypeAbonnementPanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;TypeAbonnement&gt; typesAbonnement;&#10;    private TypeAbonnement typeAbonnementSelectionne;&#10;    private TypeAbonnementService typeAbonnementService;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;    &#10;    // Pattern pour validation du code (lettres, chiffres, tirets et underscores)&#10;    private static final Pattern CODE_PATTERN = Pattern.compile(&quot;^[A-Za-z0-9_-]{1,20}$&quot;);&#10;    &#10;    // Préconfigurations fixes pour les types d'abonnement&#10;    private static final Object[][] PRECONFIGURATIONS = {&#10;        {&quot;BASIC&quot;, &quot;Basic&quot;, 5000},&#10;        {&quot;STANDARD&quot;, &quot;Standard&quot;, 15000},&#10;        {&quot;PREMIUM&quot;, &quot;Prenium&quot;, 25000}&#10;    };&#10;&#10;    public TypeAbonnementPanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.typeAbonnementService = new TypeAbonnementService();&#10;        &#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;Code&quot;, &quot;Libellé&quot;, &quot;Montant&quot;, &quot;Catégorie&quot;, &quot;Rapport Q/P&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);&#10;        table.getColumnModel().getColumn(1).setPreferredWidth(100);&#10;        table.getColumnModel().getColumn(3).setPreferredWidth(80);&#10;        table.getColumnModel().getColumn(4).setPreferredWidth(100);&#10;        table.getColumnModel().getColumn(5).setPreferredWidth(100);&#10;        &#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        typeAbonnementSelectionne = typesAbonnement.get(row);&#10;                    } else {&#10;                        typeAbonnementSelectionne = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void loadData() {&#10;        tableModel.setRowCount(0);&#10;        typesAbonnement = typeAbonnementService.listerTous();&#10;        for (TypeAbonnement type : typesAbonnement) {&#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                type.getCode(),&#10;                type.getLibelle(),&#10;                type.getMontant() + &quot; FCFA&quot;,&#10;                type.getLibelle(),&#10;                calculerRapportQualitePrix(type)&#10;            });&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Détermine la catégorie d'un type d'abonnement&#10;     */&#10;    private String determinerCategorie(TypeAbonnement type) {&#10;        // Pour 3 formules, la catégorie est le libellé&#10;        return type.getLibelle();&#10;    }&#10;    &#10;    /**&#10;     * Calcule le rapport qualité-prix d'un type d'abonnement&#10;     */&#10;    private String calculerRapportQualitePrix(TypeAbonnement type) {&#10;        int montant = type.getMontant();&#10;        if (montant == 5000) return &quot;Économique&quot;;&#10;        if (montant == 15000) return &quot;Standard&quot;;&#10;        if (montant == 25000) return &quot;Premium&quot;;&#10;        return &quot;Inconnu&quot;;&#10;    }&#10;&#10;    @Override&#10;    public void ajouter() {&#10;        JPanel formulaire = new JPanel(new BorderLayout(10, 10));&#10;        JPanel choixPanel = new JPanel(new FlowLayout());&#10;        choixPanel.add(new JLabel(&quot;Type d'abonnement : &quot;));&#10;        JComboBox&lt;String&gt; preconfigCombo = new JComboBox&lt;&gt;();&#10;        for (Object[] config : PRECONFIGURATIONS) {&#10;            preconfigCombo.addItem(String.format(&quot;%s - %s (%d FCFA)&quot;, config[0], config[1], config[2]));&#10;        }&#10;        choixPanel.add(preconfigCombo);&#10;        formulaire.add(choixPanel, BorderLayout.NORTH);&#10;        int result = JOptionPane.showConfirmDialog(this, formulaire, &quot;Ajouter un type d'abonnement&quot;, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);&#10;        if (result == JOptionPane.OK_OPTION) {&#10;            int selected = preconfigCombo.getSelectedIndex();&#10;            Object[] config = PRECONFIGURATIONS[selected];&#10;            TypeAbonnement type = new TypeAbonnement();&#10;            type.setCode((String) config[0]);&#10;            type.setLibelle((String) config[1]);&#10;            type.setMontant((Integer) config[2]);&#10;            // La monnaie est toujours FCFA, il n'y a pas de setMonnaie&#10;            typeAbonnementService.ajouter(type);&#10;            loadData();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (typeAbonnementSelectionne != null) {&#10;            JPanel formulaire = new JPanel(new GridLayout(3, 2, 10, 10));&#10;            JTextField codeField = new JTextField(typeAbonnementSelectionne.getCode());&#10;            JTextField libelleField = new JTextField(typeAbonnementSelectionne.getLibelle());&#10;            JTextField montantField = new JTextField(String.valueOf(typeAbonnementSelectionne.getMontant()));&#10;            codeField.setEditable(false);&#10;            codeField.setBackground(Color.LIGHT_GRAY);&#10;            formulaire.add(new JLabel(&quot;Code (non modifiable) :&quot;));&#10;            formulaire.add(codeField);&#10;            formulaire.add(new JLabel(&quot;Libellé :&quot;));&#10;            formulaire.add(libelleField);&#10;            formulaire.add(new JLabel(&quot;Montant (FCFA) :&quot;));&#10;            formulaire.add(montantField);&#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier le type d'abonnement: &quot; + typeAbonnementSelectionne.getCode(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String libelle = libelleField.getText().trim();&#10;                String montantText = montantField.getText().trim();&#10;                if (!libelle.isEmpty() &amp;&amp; !montantText.isEmpty()) {&#10;                    try {&#10;                        int montant = Integer.parseInt(montantText);&#10;                        if (libelle.length() &gt; 100) {&#10;                            JOptionPane.showMessageDialog(this, &#10;                                &quot;Le libellé ne peut pas dépasser 100 caractères!&quot;, &#10;                                &quot;Libellé trop long&quot;, &#10;                                JOptionPane.WARNING_MESSAGE);&#10;                            return;&#10;                        }&#10;                        if (montant != 5000 &amp;&amp; montant != 15000 &amp;&amp; montant != 25000) {&#10;                            JOptionPane.showMessageDialog(this,&#10;                                &quot;Le montant doit être 5000, 15000 ou 25000 FCFA!&quot;,&#10;                                &quot;Montant invalide&quot;,&#10;                                JOptionPane.WARNING_MESSAGE);&#10;                            return;&#10;                        }&#10;                        typeAbonnementSelectionne.setLibelle(libelle);&#10;                        typeAbonnementSelectionne.setMontant(montant);&#10;                        typeAbonnementService.modifier(typeAbonnementSelectionne);&#10;                        JOptionPane.showMessageDialog(this,&#10;                            &quot;Type d'abonnement modifié avec succès!&quot;, &#10;                            &quot;Modification réussie&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                        loadData();&#10;                    } catch (NumberFormatException e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Veuillez saisir un montant valide!&quot;, &#10;                            &quot;Format invalide&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    } catch (Exception e) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Erreur lors de la modification: &quot; + e.getMessage(), &#10;                            &quot;Erreur&quot;, &#10;                            JOptionPane.ERROR_MESSAGE);&#10;                    }&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Le libellé et le montant sont obligatoires!&quot;, &#10;                        &quot;Champs manquants&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (typeAbonnementSelectionne != null) {&#10;            StringBuilder infoType = new StringBuilder();&#10;            infoType.append(&quot;Type d'abonnement: &quot;).append(typeAbonnementSelectionne.getCode());&#10;            infoType.append(&quot;\nLibellé: &quot;).append(typeAbonnementSelectionne.getLibelle());&#10;            infoType.append(&quot;\nMontant: &quot;).append(typeAbonnementSelectionne.getMontant()).append(&quot; FCFA&quot;);&#10;            infoType.append(&quot;\nCatégorie: &quot;).append(determinerCategorie(typeAbonnementSelectionne));&#10;            int confirmation = JOptionPane.showConfirmDialog(this,&#10;                &quot;Êtes-vous sûr de vouloir supprimer le type d'abonnement :\n&quot; + infoType.toString() + &#10;                &quot;\n\nATTENTION: Cette action supprimera également tous les abonnements de ce type!&quot;, &#10;                &quot;Confirmation de suppression&quot;, &#10;                JOptionPane.YES_NO_OPTION,&#10;                JOptionPane.WARNING_MESSAGE);&#10;            if (confirmation == JOptionPane.YES_OPTION) {&#10;                try {&#10;                    typeAbonnementService.supprimer(typeAbonnementSelectionne);&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Type d'abonnement supprimé avec succès!&quot;, &#10;                        &quot;Suppression réussie&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    loadData();&#10;                    typeAbonnementSelectionne = null;&#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de la suppression: &quot; + e.getMessage() + &#10;                        &quot;\nVeuillez d'abord supprimer les abonnements utilisant ce type.&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return typeAbonnementSelectionne != null;&#10;    }&#10;&#10;    public TypeAbonnement getTypeAbonnementSelectionne() {&#10;        return typeAbonnementSelectionne;&#10;    }&#10;    &#10;    /**&#10;     * Méthode utilitaire pour créer tous les types prédéfinis&#10;     */&#10;    public void creerTypesPredefinis() {&#10;        int confirmation = JOptionPane.showConfirmDialog(this, &#10;            &quot;Créer les 3 types d'abonnement prédéfinis ?\n&quot; +&#10;            &quot;Cette action ajoutera Basic, Standard et Prenium si ils n'existent pas encore.&quot;,&#10;            &quot;Création en lot&quot;,&#10;            JOptionPane.YES_NO_OPTION,&#10;            JOptionPane.QUESTION_MESSAGE);&#10;        if (confirmation == JOptionPane.YES_OPTION) {&#10;            StringBuilder resultats = new StringBuilder();&#10;            int ajouts = 0;&#10;            int ignores = 0;&#10;            for (Object[] config : PRECONFIGURATIONS) {&#10;                String code = (String) config[0];&#10;                String libelle = (String) config[1];&#10;                int montant = (Integer) config[2];&#10;                boolean codeExiste = typesAbonnement.stream()&#10;                    .anyMatch(t -&gt; t.getCode().equalsIgnoreCase(code));&#10;                if (!codeExiste) {&#10;                    try {&#10;                        TypeAbonnement nouveau = new TypeAbonnement(code, libelle, montant);&#10;                        // La monnaie est toujours FCFA, il n'y a pas de setMonnaie&#10;                        typeAbonnementService.ajouter(nouveau);&#10;                        ajouts++;&#10;                    } catch (Exception e) {&#10;                        resultats.append(&quot;Erreur pour &quot;).append(code).append(&quot;: &quot;)&#10;                                 .append(e.getMessage()).append(&quot;\n&quot;);&#10;                    }&#10;                } else {&#10;                    ignores++;&#10;                }&#10;            }&#10;            loadData();&#10;            StringBuilder message = new StringBuilder();&#10;            message.append(&quot;=== CR��ATION EN LOT ===\n\n&quot;);&#10;            message.append(&quot;Types créés: &quot;).append(ajouts).append(&quot;\n&quot;);&#10;            message.append(&quot;Types ignorés (déjà existants): &quot;).append(ignores).append(&quot;\n&quot;);&#10;            message.append(&quot;Total traité: &quot;).append(PRECONFIGURATIONS.length).append(&quot;\n&quot;);&#10;            if (resultats.length() &gt; 0) {&#10;                message.append(&quot;\nErreurs:\n&quot;).append(resultats);&#10;            }&#10;            JOptionPane.showMessageDialog(this,&#10;                message.toString(), &#10;                &quot;Résultats de la création&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Affiche les statistiques des types d'abonnement&#10;     */&#10;    public void afficherStatistiques() {&#10;        if (typesAbonnement.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun type d'abonnement disponible pour l'analyse.&quot;, &#10;                &quot;Pas de données&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        // Calculs statistiques&#10;        int total = typesAbonnement.size();&#10;        int montantMin = typesAbonnement.stream().mapToInt(TypeAbonnement::getMontant).min().orElse(0);&#10;        int montantMax = typesAbonnement.stream().mapToInt(TypeAbonnement::getMontant).max().orElse(0);&#10;        double montantMoyen = typesAbonnement.stream().mapToInt(TypeAbonnement::getMontant).average().orElse(0);&#10;        &#10;        // Répartition par catégorie&#10;        var categorieStats = typesAbonnement.stream()&#10;            .collect(java.util.stream.Collectors.groupingBy(&#10;                this::determinerCategorie,&#10;                java.util.stream.Collectors.counting()&#10;            ));&#10;        &#10;        // Répartition par rapport qualité-prix&#10;        var rapportStats = typesAbonnement.stream()&#10;            .collect(java.util.stream.Collectors.groupingBy(&#10;                this::calculerRapportQualitePrix,&#10;                java.util.stream.Collectors.counting()&#10;            ));&#10;        &#10;        StringBuilder stats = new StringBuilder();&#10;        stats.append(&quot;=== STATISTIQUES DES TYPES D'ABONNEMENT ===\n\n&quot;);&#10;        stats.append(&quot;Total des types: &quot;).append(total).append(&quot;\n&quot;);&#10;        stats.append(&quot;Montant minimum: &quot;).append(montantMin).append(&quot;€\n&quot;);&#10;        stats.append(&quot;Montant maximum: &quot;).append(montantMax).append(&quot;€\n&quot;);&#10;        stats.append(&quot;Montant moyen: &quot;).append(String.format(&quot;%.2f€&quot;, montantMoyen)).append(&quot;\n\n&quot;);&#10;        &#10;        stats.append(&quot;=== RÉPARTITION PAR CATÉGORIE ===\n&quot;);&#10;        categorieStats.entrySet().stream()&#10;            .sorted(java.util.Map.Entry.&lt;String, Long&gt;comparingByValue().reversed())&#10;            .forEach(entry -&gt; stats.append(&quot;• &quot;).append(entry.getKey()).append(&quot;: &quot;)&#10;                                  .append(entry.getValue()).append(&quot; type(s)\n&quot;));&#10;        &#10;        stats.append(&quot;\n=== RÉPARTITION PAR RAPPORT QUALITÉ-PRIX ===\n&quot;);&#10;        rapportStats.entrySet().stream()&#10;            .sorted(java.util.Map.Entry.&lt;String, Long&gt;comparingByValue().reversed())&#10;            .forEach(entry -&gt; stats.append(&quot;• &quot;).append(entry.getKey()).append(&quot;: &quot;)&#10;                                  .append(entry.getValue()).append(&quot; type(s)\n&quot;));&#10;        &#10;        stats.append(&quot;\n=== DÉTAIL DES TYPES ===\n&quot;);&#10;        typesAbonnement.stream()&#10;            .sorted(java.util.Comparator.comparing(TypeAbonnement::getMontant))&#10;            .forEach(type -&gt; {&#10;                stats.append(&quot;• &quot;).append(type.getCode()).append(&quot; - &quot;)&#10;                     .append(type.getLibelle()).append(&quot; (&quot;).append(type.getMontant())&#10;                     .append(&quot;€) - &quot;).append(determinerCategorie(type)).append(&quot;\n&quot;);&#10;            });&#10;        &#10;        JTextArea textArea = new JTextArea(stats.toString());&#10;        textArea.setEditable(false);&#10;        textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));&#10;        &#10;        JScrollPane scrollPane = new JScrollPane(textArea);&#10;        scrollPane.setPreferredSize(new Dimension(500, 400));&#10;        &#10;        JOptionPane.showMessageDialog(this, &#10;            scrollPane, &#10;            &quot;Statistiques des types d'abonnement&quot;, &#10;            JOptionPane.INFORMATION_MESSAGE);&#10;    }&#10;    &#10;    /**&#10;     * Méthode utilitaire pour dupliquer un type d'abonnement&#10;     */&#10;    public void dupliquerType() {&#10;        if (typeAbonnementSelectionne != null) {&#10;            String nouveauCodeInput = JOptionPane.showInputDialog(this, &#10;                &quot;Entrez le code pour la copie :&quot;, &#10;                typeAbonnementSelectionne.getCode() + &quot;_COPY&quot;);&#10;&#10;            if (nouveauCodeInput != null &amp;&amp; !nouveauCodeInput.trim().isEmpty()) {&#10;                String nouveauCode = nouveauCodeInput.trim();&#10;                // Continuer avec nouveauCode&#10;            &#10;                // Validation du code&#10;                if (!CODE_PATTERN.matcher(nouveauCode).matches()) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Le code doit contenir uniquement des lettres, chiffres, tirets et underscores (max 20 caractères)!&quot;, &#10;                        &quot;Code invalide&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                    return;&#10;                }&#10;                &#10;                // Vérifier l'unicité&#10;                boolean codeExiste = typesAbonnement.stream()&#10;                    .anyMatch(t -&gt; t.getCode().equalsIgnoreCase(nouveauCode));&#10;                &#10;                if (codeExiste) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Un type d'abonnement avec ce code existe déjà!&quot;, &#10;                        &quot;Code en doublon&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                    return;&#10;                }&#10;                &#10;                try {&#10;                    TypeAbonnement copie = new TypeAbonnement(&#10;                        nouveauCode, &#10;                        typeAbonnementSelectionne.getLibelle() + &quot; (Copie)&quot;, &#10;                        typeAbonnementSelectionne.getMontant()&#10;                    );&#10;                    typeAbonnementService.ajouter(copie);&#10;                    &#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Type d'abonnement dupliqué avec succès!&quot;, &#10;                        &quot;Duplication réussie&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de la duplication: &quot; + e.getMessage(), &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Affiche une grille tarifaire comparative&#10;     */&#10;    public void afficherGrilleTarifaire() {&#10;        if (typesAbonnement.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun type d'abonnement disponible.&quot;, &#10;                &quot;Pas de données&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;            return;&#10;        }&#10;        StringBuilder grille = new StringBuilder();&#10;        grille.append(&quot;=== GRILLE TARIFAIRE ===\n\n&quot;);&#10;        grille.append(String.format(&quot;%-20s %-30s %-10s %-15s\n&quot;, &#10;            &quot;CODE&quot;, &quot;LIBELLÉ&quot;, &quot;PRIX&quot;, &quot;CATÉGORIE&quot;));&#10;        grille.append(&quot;-&quot;.repeat(80)).append(&quot;\n&quot;);&#10;        typesAbonnement.stream()&#10;            .sorted(java.util.Comparator.comparing(TypeAbonnement::getMontant))&#10;            .forEach(type -&gt; {&#10;                grille.append(String.format(&quot;%-20s %-30s %-10s %-15s\n&quot;,&#10;                    type.getCode(),&#10;                    type.getLibelle().length() &gt; 30 ? &#10;                        type.getLibelle().substring(0, 27) + &quot;...&quot; : type.getLibelle(),&#10;                    type.getMontant() + &quot; FCFA&quot;,&#10;                    determinerCategorie(type)&#10;                ));&#10;            });&#10;        grille.append(&quot;\n=== RECOMMANDATIONS ===\n&quot;);&#10;        grille.append(&quot;• Basic: 5000 FCFA\n&quot;);&#10;        grille.append(&quot;• Standard: 15000 FCFA\n&quot;);&#10;        grille.append(&quot;• Premium: 25000 FCFA\n&quot;);&#10;        JTextArea textArea = new JTextArea(grille.toString());&#10;        textArea.setEditable(false);&#10;        JScrollPane scrollPane = new JScrollPane(textArea);&#10;        scrollPane.setPreferredSize(new Dimension(600, 350));&#10;        JOptionPane.showMessageDialog(this,&#10;            scrollPane, &#10;            &quot;Grille tarifaire&quot;, &#10;            JOptionPane.INFORMATION_MESSAGE);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package gui_admin.panel;&#10;&#10;import entite.TypeAbonnement;&#10;import service.TypeAbonnementService;&#10;import gui_util.StyleUtil;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.event.TableModelEvent;&#10;import javax.swing.event.TableModelListener;&#10;import java.awt.*;&#10;import java.util.List;&#10;import java.util.regex.Pattern;&#10;&#10;public class TypeAbonnementPanel extends JPanel implements CrudOperationsInterface {&#10;&#10;    private List&lt;TypeAbonnement&gt; typesAbonnement;&#10;    private TypeAbonnement typeAbonnementSelectionne;&#10;    private TypeAbonnementService typeAbonnementService;&#10;    private DefaultTableModel tableModel;&#10;    private JTable table;&#10;    &#10;    // Pattern pour validation du code (lettres, chiffres, tirets et underscores)&#10;    private static final Pattern CODE_PATTERN = Pattern.compile(&quot;^[A-Za-z0-9_-]{1,20}$&quot;);&#10;    &#10;    // Préconfigurations fixes pour les types d'abonnement&#10;    private static final Object[][] PRECONFIGURATIONS = {&#10;        {&quot;BASIC&quot;, &quot;Basic&quot;, 5000},&#10;        {&quot;STANDARD&quot;, &quot;Standard&quot;, 15000},&#10;        {&quot;PREMIUM&quot;, &quot;Prenium&quot;, 25000}&#10;    };&#10;&#10;    public TypeAbonnementPanel() {&#10;        this.setLayout(new BorderLayout());&#10;        this.typeAbonnementService = new TypeAbonnementService();&#10;        &#10;        initializeTable();&#10;        loadData();&#10;    }&#10;&#10;    private void initializeTable() {&#10;        String[] colonnes = {&quot;Sélection&quot;, &quot;Code&quot;, &quot;Libellé&quot;, &quot;Montant&quot;};&#10;&#10;        tableModel = new DefaultTableModel(colonnes, 0) {&#10;            @Override&#10;            public Class&lt;?&gt; getColumnClass(int columnIndex) {&#10;                if (columnIndex == 0) {&#10;                    return Boolean.class;&#10;                }&#10;                return Object.class;&#10;            }&#10;        };&#10;&#10;        table = new JTable(tableModel);&#10;        table.getColumnModel().getColumn(0).setPreferredWidth(70);   // Sélection&#10;        table.getColumnModel().getColumn(1).setPreferredWidth(100);  // Code&#10;        table.getColumnModel().getColumn(2).setPreferredWidth(200);  // Libellé&#10;        table.getColumnModel().getColumn(3).setPreferredWidth(120);  // Montant&#10;        &#10;        // Styliser l'en-tête&#10;        StyleUtil.styliserTableHeader(table);&#10;&#10;        // Ajouter le listener pour les cases à cocher&#10;        tableModel.addTableModelListener(new TableModelListener() {&#10;            @Override&#10;            public void tableChanged(TableModelEvent e) {&#10;                if (e.getType() == TableModelEvent.UPDATE &amp;&amp; e.getColumn() == 0) {&#10;                    int row = e.getFirstRow();&#10;                    boolean isChecked = (Boolean) tableModel.getValueAt(row, 0);&#10;                    &#10;                    if (isChecked) {&#10;                        // Décocher les autres cases&#10;                        for (int i = 0; i &lt; tableModel.getRowCount(); i++) {&#10;                            if (i != row) {&#10;                                tableModel.setValueAt(false, i, 0);&#10;                            }&#10;                        }&#10;                        typeAbonnementSelectionne = typesAbonnement.get(row);&#10;                    } else {&#10;                        typeAbonnementSelectionne = null;&#10;                    }&#10;                }&#10;            }&#10;        });&#10;&#10;        JScrollPane scrollPane = new JScrollPane(table);&#10;        this.add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void loadData() {&#10;        tableModel.setRowCount(0);&#10;        typesAbonnement = typeAbonnementService.listerTous();&#10;        for (TypeAbonnement type : typesAbonnement) {&#10;            tableModel.addRow(new Object[]{&#10;                false,&#10;                type.getCode(),&#10;                type.getLibelle(),&#10;                type.getMontant() + &quot; FCFA&quot;&#10;            });&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Détermine la catégorie d'un type d'abonnement&#10;     */&#10;    private String determinerCategorie(TypeAbonnement type) {&#10;        // Pour 3 formules, la catégorie est le libellé&#10;        return type.getLibelle();&#10;    }&#10;    &#10;    /**&#10;     * Calcule le rapport qualité-prix d'un type d'abonnement&#10;     */&#10;    private String calculerRapportQualitePrix(TypeAbonnement type) {&#10;        int montant = type.getMontant();&#10;        if (montant == 5000) return &quot;Économique&quot;;&#10;        if (montant == 15000) return &quot;Standard&quot;;&#10;        if (montant == 25000) return &quot;Premium&quot;;&#10;        return &quot;Inconnu&quot;;&#10;    }&#10;&#10;    @Override&#10;    public void ajouter() {&#10;        // Créer un formulaire de saisie manuelle&#10;        JPanel formulaire = new JPanel(new GridLayout(3, 2, 10, 10));&#10;        JTextField codeField = new JTextField();&#10;        JTextField libelleField = new JTextField();&#10;        JTextField montantField = new JTextField();&#10;&#10;        formulaire.add(new JLabel(&quot;Code :&quot;));&#10;        formulaire.add(codeField);&#10;        formulaire.add(new JLabel(&quot;Libellé :&quot;));&#10;        formulaire.add(libelleField);&#10;        formulaire.add(new JLabel(&quot;Montant (FCFA) :&quot;));&#10;        formulaire.add(montantField);&#10;&#10;        // Ajouter des tooltips pour aider l'utilisateur&#10;        codeField.setToolTipText(&quot;Code unique (lettres, chiffres, tirets et underscores, max 20 caractères)&quot;);&#10;        libelleField.setToolTipText(&quot;Nom du type d'abonnement (max 100 caractères)&quot;);&#10;        montantField.setToolTipText(&quot;Montant en FCFA (nombre entier)&quot;);&#10;&#10;        int result = JOptionPane.showConfirmDialog(&#10;            this, &#10;            formulaire, &#10;            &quot;Ajouter un nouveau type d'abonnement&quot;, &#10;            JOptionPane.OK_CANCEL_OPTION,&#10;            JOptionPane.PLAIN_MESSAGE&#10;        );&#10;&#10;        if (result == JOptionPane.OK_OPTION) {&#10;            String code = codeField.getText().trim();&#10;            String libelle = libelleField.getText().trim();&#10;            String montantText = montantField.getText().trim();&#10;&#10;            // Validation des champs&#10;            if (code.isEmpty() || libelle.isEmpty() || montantText.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Tous les champs sont obligatoires!&quot;, &#10;                    &quot;Champs manquants&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Validation du code&#10;            if (!CODE_PATTERN.matcher(code).matches()) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Le code doit contenir uniquement des lettres, chiffres, tirets et underscores (max 20 caractères)!&quot;, &#10;                    &quot;Code invalide&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Vérifier l'unicité du code&#10;            boolean codeExiste = typesAbonnement.stream()&#10;                .anyMatch(t -&gt; t.getCode().equalsIgnoreCase(code));&#10;            &#10;            if (codeExiste) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Un type d'abonnement avec ce code existe déjà!&quot;, &#10;                    &quot;Code en doublon&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Validation du libellé&#10;            if (libelle.length() &gt; 100) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Le libellé ne peut pas dépasser 100 caractères!&quot;, &#10;                    &quot;Libellé trop long&quot;, &#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Validation et conversion du montant&#10;            try {&#10;                int montant = Integer.parseInt(montantText);&#10;                &#10;                if (montant &lt;= 0) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Le montant doit être supérieur à 0!&quot;, &#10;                        &quot;Montant invalide&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                    return;&#10;                }&#10;&#10;                // Créer le nouveau type d'abonnement&#10;                TypeAbonnement nouveauType = new TypeAbonnement();&#10;                nouveauType.setCode(code.toUpperCase()); // Uniformiser en majuscules&#10;                nouveauType.setLibelle(libelle);&#10;                nouveauType.setMontant(montant);&#10;&#10;                // Ajouter en base de données&#10;                typeAbonnementService.ajouter(nouveauType);&#10;                &#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Type d'abonnement ajouté avec succès!&quot;, &#10;                    &quot;Ajout réussi&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Recharger les données&#10;                loadData();&#10;                &#10;            } catch (NumberFormatException e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Veuillez saisir un montant valide (nombre entier)!&quot;, &#10;                    &quot;Format invalide&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Erreur lors de l'ajout: &quot; + e.getMessage(), &#10;                    &quot;Erreur&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void modifier() {&#10;        if (typeAbonnementSelectionne != null) {&#10;            JPanel formulaire = new JPanel(new GridLayout(3, 2, 10, 10));&#10;            JTextField codeField = new JTextField(typeAbonnementSelectionne.getCode());&#10;            JTextField libelleField = new JTextField(typeAbonnementSelectionne.getLibelle());&#10;            JTextField montantField = new JTextField(String.valueOf(typeAbonnementSelectionne.getMontant()));&#10;            &#10;            codeField.setEditable(false);&#10;            codeField.setBackground(Color.LIGHT_GRAY);&#10;            &#10;            formulaire.add(new JLabel(&quot;Code (non modifiable) :&quot;));&#10;            formulaire.add(codeField);&#10;            formulaire.add(new JLabel(&quot;Libellé :&quot;));&#10;            formulaire.add(libelleField);&#10;            formulaire.add(new JLabel(&quot;Montant (FCFA) :&quot;));&#10;            formulaire.add(montantField);&#10;            &#10;            // Ajouter des tooltips&#10;            libelleField.setToolTipText(&quot;Nom du type d'abonnement (max 100 caractères)&quot;);&#10;            montantField.setToolTipText(&quot;Montant en FCFA (nombre entier positif)&quot;);&#10;            &#10;            int result = JOptionPane.showConfirmDialog(&#10;                this, &#10;                formulaire, &#10;                &quot;Modifier le type d'abonnement: &quot; + typeAbonnementSelectionne.getCode(), &#10;                JOptionPane.OK_CANCEL_OPTION,&#10;                JOptionPane.PLAIN_MESSAGE&#10;            );&#10;            &#10;            if (result == JOptionPane.OK_OPTION) {&#10;                String libelle = libelleField.getText().trim();&#10;                String montantText = montantField.getText().trim();&#10;                &#10;                // Validation des champs&#10;                if (libelle.isEmpty() || montantText.isEmpty()) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Le libellé and le montant sont obligatoires!&quot;, &#10;                        &quot;Champs manquants&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                    return;&#10;                }&#10;                &#10;                // Validation du libellé&#10;                if (libelle.length() &gt; 100) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Le libellé ne peut pas dépasser 100 caractères!&quot;, &#10;                        &quot;Libellé trop long&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                    return;&#10;                }&#10;                &#10;                try {&#10;                    int montant = Integer.parseInt(montantText);&#10;                    &#10;                    if (montant &lt;= 0) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Le montant doit être supérieur à 0!&quot;, &#10;                            &quot;Montant invalide&quot;, &#10;                            JOptionPane.WARNING_MESSAGE);&#10;                        return;&#10;                    }&#10;                    &#10;                    // Mettre à jour les données&#10;                    typeAbonnementSelectionne.setLibelle(libelle);&#10;                    typeAbonnementSelectionne.setMontant(montant);&#10;                    typeAbonnementService.modifier(typeAbonnementSelectionne);&#10;                    &#10;                    JOptionPane.showMessageDialog(this,&#10;                        &quot;Type d'abonnement modifié avec succès!&quot;, &#10;                        &quot;Modification réussie&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    &#10;                } catch (NumberFormatException e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Veuillez saisir un montant valide (nombre entier)!&quot;, &#10;                        &quot;Format invalide&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de la modification: &quot; + e.getMessage(), &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void supprimer() {&#10;        if (typeAbonnementSelectionne != null) {&#10;            StringBuilder infoType = new StringBuilder();&#10;            infoType.append(&quot;Type d'abonnement: &quot;).append(typeAbonnementSelectionne.getCode());&#10;            infoType.append(&quot;\nLibellé: &quot;).append(typeAbonnementSelectionne.getLibelle());&#10;            infoType.append(&quot;\nMontant: &quot;).append(typeAbonnementSelectionne.getMontant()).append(&quot; FCFA&quot;);&#10;            infoType.append(&quot;\nCatégorie: &quot;).append(determinerCategorie(typeAbonnementSelectionne));&#10;            int confirmation = JOptionPane.showConfirmDialog(this,&#10;                &quot;Êtes-vous sûr de vouloir supprimer le type d'abonnement :\n&quot; + infoType.toString() + &#10;                &quot;\n\nATTENTION: Cette action supprimera également tous les abonnements de ce type!&quot;, &#10;                &quot;Confirmation de suppression&quot;, &#10;                JOptionPane.YES_NO_OPTION,&#10;                JOptionPane.WARNING_MESSAGE);&#10;            if (confirmation == JOptionPane.YES_OPTION) {&#10;                try {&#10;                    typeAbonnementService.supprimer(typeAbonnementSelectionne);&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Type d'abonnement supprimé avec succès!&quot;, &#10;                        &quot;Suppression réussie&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    loadData();&#10;                    typeAbonnementSelectionne = null;&#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de la suppression: &quot; + e.getMessage() + &#10;                        &quot;\nVeuillez d'abord supprimer les abonnements utilisant ce type.&quot;, &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean hasSelection() {&#10;        return typeAbonnementSelectionne != null;&#10;    }&#10;&#10;    public TypeAbonnement getTypeAbonnementSelectionne() {&#10;        return typeAbonnementSelectionne;&#10;    }&#10;    &#10;    /**&#10;     * Méthode utilitaire pour créer tous les types prédéfinis&#10;     */&#10;    public void creerTypesPredefinis() {&#10;        int confirmation = JOptionPane.showConfirmDialog(this, &#10;            &quot;Créer les 3 types d'abonnement prédéfinis ?\n&quot; +&#10;            &quot;Cette action ajoutera Basic, Standard et Prenium si ils n'existent pas encore.&quot;,&#10;            &quot;Création en lot&quot;,&#10;            JOptionPane.YES_NO_OPTION,&#10;            JOptionPane.QUESTION_MESSAGE);&#10;        if (confirmation == JOptionPane.YES_OPTION) {&#10;            StringBuilder resultats = new StringBuilder();&#10;            int ajouts = 0;&#10;            int ignores = 0;&#10;            for (Object[] config : PRECONFIGURATIONS) {&#10;                String code = (String) config[0];&#10;                String libelle = (String) config[1];&#10;                int montant = (Integer) config[2];&#10;                boolean codeExiste = typesAbonnement.stream()&#10;                    .anyMatch(t -&gt; t.getCode().equalsIgnoreCase(code));&#10;                if (!codeExiste) {&#10;                    try {&#10;                        TypeAbonnement nouveau = new TypeAbonnement(code, libelle, montant);&#10;                        // La monnaie est toujours FCFA, il n'y a pas de setMonnaie&#10;                        typeAbonnementService.ajouter(nouveau);&#10;                        ajouts++;&#10;                    } catch (Exception e) {&#10;                        resultats.append(&quot;Erreur pour &quot;).append(code).append(&quot;: &quot;)&#10;                                 .append(e.getMessage()).append(&quot;\n&quot;);&#10;                    }&#10;                } else {&#10;                    ignores++;&#10;                }&#10;            }&#10;            loadData();&#10;            StringBuilder message = new StringBuilder();&#10;            message.append(&quot;=== CR��ATION EN LOT ===\n\n&quot;);&#10;            message.append(&quot;Types créés: &quot;).append(ajouts).append(&quot;\n&quot;);&#10;            message.append(&quot;Types ignorés (déjà existants): &quot;).append(ignores).append(&quot;\n&quot;);&#10;            message.append(&quot;Total traité: &quot;).append(PRECONFIGURATIONS.length).append(&quot;\n&quot;);&#10;            if (resultats.length() &gt; 0) {&#10;                message.append(&quot;\nErreurs:\n&quot;).append(resultats);&#10;            }&#10;            JOptionPane.showMessageDialog(this,&#10;                message.toString(), &#10;                &quot;Résultats de la création&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Affiche les statistiques des types d'abonnement&#10;     */&#10;    public void afficherStatistiques() {&#10;        if (typesAbonnement.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun type d'abonnement disponible pour l'analyse.&quot;, &#10;                &quot;Pas de données&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;            return;&#10;        }&#10;        &#10;        // Calculs statistiques&#10;        int total = typesAbonnement.size();&#10;        int montantMin = typesAbonnement.stream().mapToInt(TypeAbonnement::getMontant).min().orElse(0);&#10;        int montantMax = typesAbonnement.stream().mapToInt(TypeAbonnement::getMontant).max().orElse(0);&#10;        double montantMoyen = typesAbonnement.stream().mapToInt(TypeAbonnement::getMontant).average().orElse(0);&#10;        &#10;        // Répartition par catégorie&#10;        var categorieStats = typesAbonnement.stream()&#10;            .collect(java.util.stream.Collectors.groupingBy(&#10;                this::determinerCategorie,&#10;                java.util.stream.Collectors.counting()&#10;            ));&#10;        &#10;        // Répartition par rapport qualité-prix&#10;        var rapportStats = typesAbonnement.stream()&#10;            .collect(java.util.stream.Collectors.groupingBy(&#10;                this::calculerRapportQualitePrix,&#10;                java.util.stream.Collectors.counting()&#10;            ));&#10;        &#10;        StringBuilder stats = new StringBuilder();&#10;        stats.append(&quot;=== STATISTIQUES DES TYPES D'ABONNEMENT ===\n\n&quot;);&#10;        stats.append(&quot;Total des types: &quot;).append(total).append(&quot;\n&quot;);&#10;        stats.append(&quot;Montant minimum: &quot;).append(montantMin).append(&quot;€\n&quot;);&#10;        stats.append(&quot;Montant maximum: &quot;).append(montantMax).append(&quot;€\n&quot;);&#10;        stats.append(&quot;Montant moyen: &quot;).append(String.format(&quot;%.2f€&quot;, montantMoyen)).append(&quot;\n\n&quot;);&#10;        &#10;        stats.append(&quot;=== RÉPARTITION PAR CATÉGORIE ===\n&quot;);&#10;        categorieStats.entrySet().stream()&#10;            .sorted(java.util.Map.Entry.&lt;String, Long&gt;comparingByValue().reversed())&#10;            .forEach(entry -&gt; stats.append(&quot;• &quot;).append(entry.getKey()).append(&quot;: &quot;)&#10;                                  .append(entry.getValue()).append(&quot; type(s)\n&quot;));&#10;        &#10;        stats.append(&quot;\n=== RÉPARTITION PAR RAPPORT QUALITÉ-PRIX ===\n&quot;);&#10;        rapportStats.entrySet().stream()&#10;            .sorted(java.util.Map.Entry.&lt;String, Long&gt;comparingByValue().reversed())&#10;            .forEach(entry -&gt; stats.append(&quot;• &quot;).append(entry.getKey()).append(&quot;: &quot;)&#10;                                  .append(entry.getValue()).append(&quot; type(s)\n&quot;));&#10;        &#10;        stats.append(&quot;\n=== DÉTAIL DES TYPES ===\n&quot;);&#10;        typesAbonnement.stream()&#10;            .sorted(java.util.Comparator.comparing(TypeAbonnement::getMontant))&#10;            .forEach(type -&gt; {&#10;                stats.append(&quot;• &quot;).append(type.getCode()).append(&quot; - &quot;)&#10;                     .append(type.getLibelle()).append(&quot; (&quot;).append(type.getMontant())&#10;                     .append(&quot;€) - &quot;).append(determinerCategorie(type)).append(&quot;\n&quot;);&#10;            });&#10;        &#10;        JTextArea textArea = new JTextArea(stats.toString());&#10;        textArea.setEditable(false);&#10;        textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));&#10;        &#10;        JScrollPane scrollPane = new JScrollPane(textArea);&#10;        scrollPane.setPreferredSize(new Dimension(500, 400));&#10;        &#10;        JOptionPane.showMessageDialog(this, &#10;            scrollPane, &#10;            &quot;Statistiques des types d'abonnement&quot;, &#10;            JOptionPane.INFORMATION_MESSAGE);&#10;    }&#10;    &#10;    /**&#10;     * Méthode utilitaire pour dupliquer un type d'abonnement&#10;     */&#10;    public void dupliquerType() {&#10;        if (typeAbonnementSelectionne != null) {&#10;            String nouveauCodeInput = JOptionPane.showInputDialog(this, &#10;                &quot;Entrez le code pour la copie :&quot;, &#10;                typeAbonnementSelectionne.getCode() + &quot;_COPY&quot;);&#10;&#10;            if (nouveauCodeInput != null &amp;&amp; !nouveauCodeInput.trim().isEmpty()) {&#10;                String nouveauCode = nouveauCodeInput.trim();&#10;                // Continuer avec nouveauCode&#10;            &#10;                // Validation du code&#10;                if (!CODE_PATTERN.matcher(nouveauCode).matches()) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Le code doit contenir uniquement des lettres, chiffres, tirets et underscores (max 20 caractères)!&quot;, &#10;                        &quot;Code invalide&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                    return;&#10;                }&#10;                &#10;                // Vérifier l'unicité&#10;                boolean codeExiste = typesAbonnement.stream()&#10;                    .anyMatch(t -&gt; t.getCode().equalsIgnoreCase(nouveauCode));&#10;                &#10;                if (codeExiste) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Un type d'abonnement avec ce code existe déjà!&quot;, &#10;                        &quot;Code en doublon&quot;, &#10;                        JOptionPane.WARNING_MESSAGE);&#10;                    return;&#10;                }&#10;                &#10;                try {&#10;                    TypeAbonnement copie = new TypeAbonnement(&#10;                        nouveauCode, &#10;                        typeAbonnementSelectionne.getLibelle() + &quot; (Copie)&quot;, &#10;                        typeAbonnementSelectionne.getMontant()&#10;                    );&#10;                    typeAbonnementService.ajouter(copie);&#10;                    &#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Type d'abonnement dupliqué avec succès!&quot;, &#10;                        &quot;Duplication réussie&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    &#10;                    // Recharger les données&#10;                    loadData();&#10;                    &#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        &quot;Erreur lors de la duplication: &quot; + e.getMessage(), &#10;                        &quot;Erreur&quot;, &#10;                        JOptionPane.ERROR_MESSAGE);&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Affiche une grille tarifaire comparative&#10;     */&#10;    public void afficherGrilleTarifaire() {&#10;        if (typesAbonnement.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Aucun type d'abonnement disponible.&quot;, &#10;                &quot;Pas de données&quot;, &#10;                JOptionPane.INFORMATION_MESSAGE);&#10;            return;&#10;        }&#10;        StringBuilder grille = new StringBuilder();&#10;        grille.append(&quot;=== GRILLE TARIFAIRE ===\n\n&quot;);&#10;        grille.append(String.format(&quot;%-20s %-30s %-10s %-15s\n&quot;, &#10;            &quot;CODE&quot;, &quot;LIBELLÉ&quot;, &quot;PRIX&quot;, &quot;CATÉGORIE&quot;));&#10;        grille.append(&quot;-&quot;.repeat(80)).append(&quot;\n&quot;);&#10;        typesAbonnement.stream()&#10;            .sorted(java.util.Comparator.comparing(TypeAbonnement::getMontant))&#10;            .forEach(type -&gt; {&#10;                grille.append(String.format(&quot;%-20s %-30s %-10s %-15s\n&quot;,&#10;                    type.getCode(),&#10;                    type.getLibelle().length() &gt; 30 ? &#10;                        type.getLibelle().substring(0, 27) + &quot;...&quot; : type.getLibelle(),&#10;                    type.getMontant() + &quot; FCFA&quot;,&#10;                    determinerCategorie(type)&#10;                ));&#10;            });&#10;        grille.append(&quot;\n=== RECOMMANDATIONS ===\n&quot;);&#10;        grille.append(&quot;• Basic: 5000 FCFA\n&quot;);&#10;        grille.append(&quot;• Standard: 15000 FCFA\n&quot;);&#10;        grille.append(&quot;• Premium: 25000 FCFA\n&quot;);&#10;        JTextArea textArea = new JTextArea(grille.toString());&#10;        textArea.setEditable(false);&#10;        JScrollPane scrollPane = new JScrollPane(textArea);&#10;        scrollPane.setPreferredSize(new Dimension(600, 350));&#10;        JOptionPane.showMessageDialog(this,&#10;            scrollPane, &#10;            &quot;Grille tarifaire&quot;, &#10;            JOptionPane.INFORMATION_MESSAGE);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_client/panel/AbonnementBoxPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_client/panel/AbonnementBoxPanel.java" />
              <option name="originalContent" value="package gui_client.panel;&#10;&#10;import entite.TypeAbonnement;&#10;import entite.Membre;&#10;import service.TypeAbonnementService;&#10;import service.UserSessionManager;&#10;import service.MembreService;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.util.List;&#10;&#10;public class AbonnementBoxPanel extends JPanel {&#10;&#10;    private TypeAbonnementService typeAbonnementService;&#10;    private MembreService membreService;&#10;    private gui_client.controller.ClientNavigationController navigationController;&#10;&#10;    public AbonnementBoxPanel() {&#10;        this.typeAbonnementService = new TypeAbonnementService();&#10;        this.membreService = new MembreService();&#10;        initializePanel();&#10;    }&#10;&#10;    // Méthode pour définir le contrôleur de navigation&#10;    public void setNavigationController(gui_client.controller.ClientNavigationController controller) {&#10;        this.navigationController = controller;&#10;    }&#10;&#10;    private void initializePanel() {&#10;        setLayout(new GridLayout(1, 0, 20, 0)); // Disposition horizontale avec espacement&#10;        setBackground(Color.WHITE);&#10;        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));&#10;&#10;        chargerTypesAbonnements();&#10;    }&#10;&#10;    private void chargerTypesAbonnements() {&#10;        try {&#10;            List&lt;TypeAbonnement&gt; typesAbonnements = typeAbonnementService.listerTous();&#10;&#10;            // Vider le panel avant de le remplir&#10;            removeAll();&#10;&#10;            if (typesAbonnements.isEmpty()) {&#10;                add(createMessagePanel(&quot;Aucun abonnement disponible&quot;));&#10;            } else {&#10;                for (TypeAbonnement type : typesAbonnements) {&#10;                    add(createAbonnementBox(type));&#10;                }&#10;            }&#10;&#10;            // Rafraîchir l'affichage&#10;            revalidate();&#10;            repaint();&#10;&#10;        } catch (Exception e) {&#10;            removeAll();&#10;            add(createMessagePanel(&quot;Erreur lors du chargement des abonnements&quot;));&#10;            revalidate();&#10;            repaint();&#10;            System.err.println(&quot;Erreur lors du chargement des types d'abonnements: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private JPanel createAbonnementBox(TypeAbonnement type) {&#10;        JPanel box = new JPanel();&#10;        box.setLayout(new BorderLayout());&#10;        box.setBackground(Color.WHITE);&#10;        box.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(200, 200, 200), 2),&#10;            BorderFactory.createEmptyBorder(20, 15, 20, 15)&#10;        ));&#10;&#10;        // Titre de l'abonnement&#10;        JLabel titreLabel = new JLabel(type.getLibelle(), SwingConstants.CENTER);&#10;        titreLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 18));&#10;        titreLabel.setForeground(new Color(74, 41, 0));&#10;&#10;        // Prix de l'abonnement&#10;        JLabel prixLabel = new JLabel(type.getMontant() + &quot; FCFA&quot;, SwingConstants.CENTER);&#10;        prixLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 24));&#10;        prixLabel.setForeground(new Color(0, 128, 0));&#10;&#10;        // Code de l'abonnement (optionnel, plus discret)&#10;        JLabel codeLabel = new JLabel(&quot;Code: &quot; + type.getCode(), SwingConstants.CENTER);&#10;        codeLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        codeLabel.setForeground(Color.GRAY);&#10;&#10;        // Bouton de souscription&#10;        JButton souscrireBtn = new JButton(&quot;Souscrire&quot;);&#10;        souscrireBtn.setBackground(new Color(74, 41, 0));&#10;        souscrireBtn.setForeground(Color.WHITE);&#10;        souscrireBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        souscrireBtn.setFocusPainted(false);&#10;        souscrireBtn.setBorderPainted(false);&#10;        souscrireBtn.setPreferredSize(new Dimension(120, 35));&#10;&#10;        // Action du bouton&#10;        souscrireBtn.addActionListener(new ActionListener() {&#10;            @Override&#10;            public void actionPerformed(ActionEvent e) {&#10;                souscrireAbonnement(type);&#10;            }&#10;        });&#10;&#10;        // Panel pour organiser les informations&#10;        JPanel infoPanel = new JPanel(new GridLayout(3, 1, 0, 10));&#10;        infoPanel.setBackground(Color.WHITE);&#10;        infoPanel.add(titreLabel);&#10;        infoPanel.add(prixLabel);&#10;        infoPanel.add(codeLabel);&#10;&#10;        // Panel pour le bouton&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));&#10;        buttonPanel.setBackground(Color.WHITE);&#10;        buttonPanel.add(souscrireBtn);&#10;&#10;        // Assembler la box&#10;        box.add(infoPanel, BorderLayout.CENTER);&#10;        box.add(buttonPanel, BorderLayout.SOUTH);&#10;&#10;        return box;&#10;    }&#10;&#10;    private JPanel createMessagePanel(String message) {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        panel.setBackground(Color.WHITE);&#10;&#10;        JLabel messageLabel = new JLabel(message, SwingConstants.CENTER);&#10;        messageLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        messageLabel.setForeground(Color.GRAY);&#10;&#10;        panel.add(messageLabel, BorderLayout.CENTER);&#10;        return panel;&#10;    }&#10;&#10;    private void souscrireAbonnement(TypeAbonnement type) {&#10;        // Vérifier si l'utilisateur est connecté&#10;        if (!UserSessionManager.getInstance().isLoggedIn()) {&#10;            // Afficher un message d'authentification requise&#10;            showAuthenticationRequiredDialog(type);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Récupérer le membre connecté&#10;            Integer clientId = UserSessionManager.getInstance().getCurrentUserId();&#10;            Membre membre = membreService.getMembreByClientId(clientId);&#10;&#10;            if (membre == null) {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Erreur : Aucun profil membre trouvé pour votre compte.\n&quot; +&#10;                    &quot;Veuillez contacter l'administration.&quot;,&#10;                    &quot;Erreur&quot;,&#10;                    JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Trouver la fenêtre parent&#10;            Frame parentFrame = null;&#10;            Container parent = this.getTopLevelAncestor();&#10;            if (parent instanceof Frame) {&#10;                parentFrame = (Frame) parent;&#10;            }&#10;&#10;            // Ouvrir la fenêtre de paiement&#10;            PaiementPanel.afficherPaiement(parentFrame, type, membre);&#10;&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors de l'ouverture de la fenêtre de paiement:\n&quot; + e.getMessage(),&#10;                &quot;Erreur&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Affiche un dialogue demandant à l'utilisateur de se connecter d'abord&#10;     */&#10;    private void showAuthenticationRequiredDialog(TypeAbonnement type) {&#10;        // Créer un panel personnalisé pour le message&#10;        JPanel messagePanel = new JPanel(new BorderLayout(10, 10));&#10;        messagePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        // Ic��ne d'avertissement&#10;        JLabel iconLabel = new JLabel(UIManager.getIcon(&quot;OptionPane.warningIcon&quot;));&#10;&#10;        // Message principal&#10;        JLabel messageLabel = new JLabel(&#10;            &quot;&lt;html&gt;&lt;div style='text-align: center; width: 300px;'&gt;&quot; +&#10;            &quot;&lt;h3&gt;Authentification requise&lt;/h3&gt;&quot; +&#10;            &quot;&lt;p&gt;Pour souscrire à l'abonnement &lt;b&gt;&quot; + type.getLibelle() + &quot;&lt;/b&gt;, &quot; +&#10;            &quot;vous devez d'abord vous connecter ou créer un compte.&lt;/p&gt;&quot; +&#10;            &quot;&lt;p&gt;Souhaitez-vous vous connecter maintenant ?&lt;/p&gt;&quot; +&#10;            &quot;&lt;/div&gt;&lt;/html&gt;&quot;&#10;        );&#10;        messageLabel.setHorizontalAlignment(SwingConstants.CENTER);&#10;&#10;        messagePanel.add(iconLabel, BorderLayout.WEST);&#10;        messagePanel.add(messageLabel, BorderLayout.CENTER);&#10;&#10;        // Options personnalisées&#10;        String[] options = {&quot;Se connecter&quot;, &quot;S'inscrire&quot;, &quot;Annuler&quot;};&#10;&#10;        int choice = JOptionPane.showOptionDialog(&#10;            this,&#10;            messagePanel,&#10;            &quot;Authentification requise&quot;,&#10;            JOptionPane.YES_NO_CANCEL_OPTION,&#10;            JOptionPane.WARNING_MESSAGE,&#10;            null,&#10;            options,&#10;            options[0] // Option par défaut&#10;        );&#10;&#10;        // Gérer la réponse de l'utilisateur&#10;        switch (choice) {&#10;            case 0: // Se connecter&#10;                navigateToLogin();&#10;                break;&#10;            case 1: // S'inscrire&#10;                navigateToRegister();&#10;                break;&#10;            case 2: // Annuler&#10;                // Ne rien faire, fermer la boîte de dialogue&#10;                break;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Navigate vers la page de connexion&#10;     */&#10;    private void navigateToLogin() {&#10;        if (navigationController != null) {&#10;            navigationController.navigateToPage(&quot;Connexion&quot;);&#10;        } else {&#10;            // Fallback si le contrôleur n'est pas disponible&#10;            Container parent = this.getParent();&#10;            while (parent != null &amp;&amp; !(parent instanceof gui_client.ClientDashboard)) {&#10;                parent = parent.getParent();&#10;            }&#10;            if (parent instanceof gui_client.ClientDashboard) {&#10;                ((gui_client.ClientDashboard) parent).navigateToPage(&quot;Connexion&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Navigate vers la page d'inscription&#10;     */&#10;    private void navigateToRegister() {&#10;        if (navigationController != null) {&#10;            navigationController.navigateToPage(&quot;Inscription&quot;);&#10;        } else {&#10;            // Fallback si le contrôleur n'est pas disponible&#10;            Container parent = this.getParent();&#10;            while (parent != null &amp;&amp; !(parent instanceof gui_client.ClientDashboard)) {&#10;                parent = parent.getParent();&#10;            }&#10;            if (parent instanceof gui_client.ClientDashboard) {&#10;                ((gui_client.ClientDashboard) parent).navigateToPage(&quot;Inscription&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Méthode publique pour rafraîchir la liste des abonnements&#10;     */&#10;    public void rafraichirAbonnements() {&#10;        chargerTypesAbonnements();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gui_client.panel;&#10;&#10;import entite.TypeAbonnement;&#10;import entite.Membre;&#10;import service.TypeAbonnementService;&#10;import service.UserSessionManager;&#10;import gui_client.util.AbonnementSouscription;&#10;import gui_client.util.AbonnementSouscription.ResultatValidation;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.util.List;&#10;&#10;public class AbonnementBoxPanel extends JPanel {&#10;&#10;    private TypeAbonnementService typeAbonnementService;&#10;    private AbonnementSouscription abonnementUtil;&#10;    private gui_client.controller.ClientNavigationController navigationController;&#10;&#10;    public AbonnementBoxPanel() {&#10;        this.typeAbonnementService = new TypeAbonnementService();&#10;        this.abonnementUtil = AbonnementSouscription.getInstance();&#10;        initializePanel();&#10;    }&#10;&#10;    // Méthode pour définir le contrôleur de navigation&#10;    public void setNavigationController(gui_client.controller.ClientNavigationController controller) {&#10;        this.navigationController = controller;&#10;    }&#10;&#10;    private void initializePanel() {&#10;        setLayout(new GridLayout(1, 0, 20, 0)); // Disposition horizontale avec espacement&#10;        setBackground(Color.WHITE);&#10;        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));&#10;&#10;        chargerTypesAbonnements();&#10;    }&#10;&#10;    private void chargerTypesAbonnements() {&#10;        try {&#10;            List&lt;TypeAbonnement&gt; typesAbonnements = typeAbonnementService.listerTous();&#10;&#10;            // Vider le panel avant de le remplir&#10;            removeAll();&#10;&#10;            if (typesAbonnements.isEmpty()) {&#10;                add(createMessagePanel(&quot;Aucun abonnement disponible&quot;));&#10;            } else {&#10;                for (TypeAbonnement type : typesAbonnements) {&#10;                    add(createAbonnementBox(type));&#10;                }&#10;            }&#10;&#10;            // Rafraîchir l'affichage&#10;            revalidate();&#10;            repaint();&#10;&#10;        } catch (Exception e) {&#10;            removeAll();&#10;            add(createMessagePanel(&quot;Erreur lors du chargement des abonnements&quot;));&#10;            revalidate();&#10;            repaint();&#10;            System.err.println(&quot;Erreur lors du chargement des types d'abonnements: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private JPanel createAbonnementBox(TypeAbonnement type) {&#10;        JPanel box = new JPanel();&#10;        box.setLayout(new BorderLayout());&#10;        box.setBackground(Color.WHITE);&#10;        box.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(200, 200, 200), 2),&#10;            BorderFactory.createEmptyBorder(20, 15, 20, 15)&#10;        ));&#10;&#10;        // Titre de l'abonnement&#10;        JLabel titreLabel = new JLabel(type.getLibelle(), SwingConstants.CENTER);&#10;        titreLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 18));&#10;        titreLabel.setForeground(new Color(74, 41, 0));&#10;&#10;        // Prix de l'abonnement&#10;        JLabel prixLabel = new JLabel(type.getMontant() + &quot; FCFA&quot;, SwingConstants.CENTER);&#10;        prixLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 24));&#10;        prixLabel.setForeground(new Color(0, 128, 0));&#10;&#10;        // Code de l'abonnement (optionnel, plus discret)&#10;        JLabel codeLabel = new JLabel(&quot;Code: &quot; + type.getCode(), SwingConstants.CENTER);&#10;        codeLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        codeLabel.setForeground(Color.GRAY);&#10;&#10;        // Bouton de souscription&#10;        JButton souscrireBtn = new JButton(&quot;Souscrire&quot;);&#10;        souscrireBtn.setBackground(new Color(74, 41, 0));&#10;        souscrireBtn.setForeground(Color.WHITE);&#10;        souscrireBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        souscrireBtn.setFocusPainted(false);&#10;        souscrireBtn.setBorderPainted(false);&#10;        souscrireBtn.setPreferredSize(new Dimension(120, 35));&#10;&#10;        // Action du bouton&#10;        souscrireBtn.addActionListener(new ActionListener() {&#10;            @Override&#10;            public void actionPerformed(ActionEvent e) {&#10;                souscrireAbonnement(type);&#10;            }&#10;        });&#10;&#10;        // Panel pour organiser les informations&#10;        JPanel infoPanel = new JPanel(new GridLayout(3, 1, 0, 10));&#10;        infoPanel.setBackground(Color.WHITE);&#10;        infoPanel.add(titreLabel);&#10;        infoPanel.add(prixLabel);&#10;        infoPanel.add(codeLabel);&#10;&#10;        // Panel pour le bouton&#10;        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));&#10;        buttonPanel.setBackground(Color.WHITE);&#10;        buttonPanel.add(souscrireBtn);&#10;&#10;        // Assembler la box&#10;        box.add(infoPanel, BorderLayout.CENTER);&#10;        box.add(buttonPanel, BorderLayout.SOUTH);&#10;&#10;        return box;&#10;    }&#10;&#10;    private JPanel createMessagePanel(String message) {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        panel.setBackground(Color.WHITE);&#10;&#10;        JLabel messageLabel = new JLabel(message, SwingConstants.CENTER);&#10;        messageLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        messageLabel.setForeground(Color.GRAY);&#10;&#10;        panel.add(messageLabel, BorderLayout.CENTER);&#10;        return panel;&#10;    }&#10;&#10;    private void souscrireAbonnement(TypeAbonnement type) {&#10;        // Vérifier si l'utilisateur est connecté&#10;        if (!UserSessionManager.getInstance().isLoggedIn()) {&#10;            showAuthenticationRequiredDialog(type);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Récupérer le membre connecté via l'utilitaire&#10;            Integer clientId = UserSessionManager.getInstance().getCurrentUserId();&#10;            Membre membre = abonnementUtil.getMembreByClientId(clientId);&#10;            &#10;            if (membre == null) {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Erreur : Aucun profil membre trouvé pour votre compte.\n&quot; +&#10;                    &quot;Veuillez contacter l'administration.&quot;,&#10;                    &quot;Erreur&quot;,&#10;                    JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Vérifier si la souscription est possible&#10;            ResultatValidation validation = abonnementUtil.peutSouscrire(membre);&#10;            &#10;            if (!validation.isAutorise() &amp;&amp; !validation.isRenouvellementProche()) {&#10;                // Afficher le message d'erreur avec les détails&#10;                String message = validation.getMessage() + &quot;\n\n&quot;;&#10;                &#10;                if (validation.getAbonnementActif() != null) {&#10;                    long joursRestants = abonnementUtil.getJoursRestants(validation.getAbonnementActif());&#10;                    message += &quot;Votre abonnement actuel expire dans &quot; + joursRestants + &quot; jour(s).\n&quot;;&#10;                    message += &quot;Vous pourrez renouveler quand il restera 7 jours ou moins.&quot;;&#10;                }&#10;                &#10;                JOptionPane.showMessageDialog(this,&#10;                    message,&#10;                    &quot;Souscription non autorisée&quot;,&#10;                    JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Trouver la fenêtre parent&#10;            Frame parentFrame = null;&#10;            Container parent = this.getTopLevelAncestor();&#10;            if (parent instanceof Frame) {&#10;                parentFrame = (Frame) parent;&#10;            }&#10;&#10;            // Ouvrir la fenêtre de paiement&#10;            PaiementPanel.afficherPaiement(parentFrame, type, membre);&#10;            &#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors de l'ouverture de la fenêtre de paiement:\n&quot; + e.getMessage(),&#10;                &quot;Erreur&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Affiche un dialogue demandant à l'utilisateur de se connecter d'abord&#10;     */&#10;    private void showAuthenticationRequiredDialog(TypeAbonnement type) {&#10;        // Créer un panel personnalisé pour le message&#10;        JPanel messagePanel = new JPanel(new BorderLayout(10, 10));&#10;        messagePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;&#10;        // Ic��ne d'avertissement&#10;        JLabel iconLabel = new JLabel(UIManager.getIcon(&quot;OptionPane.warningIcon&quot;));&#10;&#10;        // Message principal&#10;        JLabel messageLabel = new JLabel(&#10;            &quot;&lt;html&gt;&lt;div style='text-align: center; width: 300px;'&gt;&quot; +&#10;            &quot;&lt;h3&gt;Authentification requise&lt;/h3&gt;&quot; +&#10;            &quot;&lt;p&gt;Pour souscrire à l'abonnement &lt;b&gt;&quot; + type.getLibelle() + &quot;&lt;/b&gt;, &quot; +&#10;            &quot;vous devez d'abord vous connecter ou créer un compte.&lt;/p&gt;&quot; +&#10;            &quot;&lt;p&gt;Souhaitez-vous vous connecter maintenant ?&lt;/p&gt;&quot; +&#10;            &quot;&lt;/div&gt;&lt;/html&gt;&quot;&#10;        );&#10;        messageLabel.setHorizontalAlignment(SwingConstants.CENTER);&#10;&#10;        messagePanel.add(iconLabel, BorderLayout.WEST);&#10;        messagePanel.add(messageLabel, BorderLayout.CENTER);&#10;&#10;        // Options personnalisées&#10;        String[] options = {&quot;Se connecter&quot;, &quot;S'inscrire&quot;, &quot;Annuler&quot;};&#10;&#10;        int choice = JOptionPane.showOptionDialog(&#10;            this,&#10;            messagePanel,&#10;            &quot;Authentification requise&quot;,&#10;            JOptionPane.YES_NO_CANCEL_OPTION,&#10;            JOptionPane.WARNING_MESSAGE,&#10;            null,&#10;            options,&#10;            options[0] // Option par défaut&#10;        );&#10;&#10;        // Gérer la réponse de l'utilisateur&#10;        switch (choice) {&#10;            case 0: // Se connecter&#10;                navigateToLogin();&#10;                break;&#10;            case 1: // S'inscrire&#10;                navigateToRegister();&#10;                break;&#10;            case 2: // Annuler&#10;                // Ne rien faire, fermer la boîte de dialogue&#10;                break;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Navigate vers la page de connexion&#10;     */&#10;    private void navigateToLogin() {&#10;        if (navigationController != null) {&#10;            navigationController.navigateToPage(&quot;Connexion&quot;);&#10;        } else {&#10;            // Fallback si le contrôleur n'est pas disponible&#10;            Container parent = this.getParent();&#10;            while (parent != null &amp;&amp; !(parent instanceof gui_client.ClientDashboard)) {&#10;                parent = parent.getParent();&#10;            }&#10;            if (parent instanceof gui_client.ClientDashboard) {&#10;                ((gui_client.ClientDashboard) parent).navigateToPage(&quot;Connexion&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Navigate vers la page d'inscription&#10;     */&#10;    private void navigateToRegister() {&#10;        if (navigationController != null) {&#10;            navigationController.navigateToPage(&quot;Inscription&quot;);&#10;        } else {&#10;            // Fallback si le contrôleur n'est pas disponible&#10;            Container parent = this.getParent();&#10;            while (parent != null &amp;&amp; !(parent instanceof gui_client.ClientDashboard)) {&#10;                parent = parent.getParent();&#10;            }&#10;            if (parent instanceof gui_client.ClientDashboard) {&#10;                ((gui_client.ClientDashboard) parent).navigateToPage(&quot;Inscription&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Méthode publique pour rafraîchir la liste des abonnements&#10;     */&#10;    public void rafraichirAbonnements() {&#10;        chargerTypesAbonnements();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_client/panel/ConnexionPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_client/panel/ConnexionPanel.java" />
              <option name="updatedContent" value="package gui_client.panel;&#10;&#10;import service.AuthService;&#10;import service.AuthService.LoginResult;&#10;import service.UserSessionManager;&#10;&#10;import javax.swing.*;&#10;import java.awt.event.MouseAdapter;&#10;import java.awt.event.MouseEvent;&#10;&#10;public class ConnexionPanel extends GenericAuthentificationPanel {&#10;    &#10;    private JTextField emailField;&#10;    private JPasswordField passwordField;&#10;    &#10;    public ConnexionPanel() {&#10;        super(&quot;connexion&quot;);&#10;        createFormFields();&#10;        setupEventHandlers();&#10;    }&#10;    &#10;    private void createFormFields() {&#10;        // Créer les champs du formulaire&#10;        emailField = addTextInput(&quot;Email :&quot;);&#10;        passwordField = addPasswordInput(&quot;Mot de passe :&quot;);&#10;    }&#10;    &#10;    private void setupEventHandlers() {&#10;        // Action du bouton de connexion&#10;        setActionButtonListener(e -&gt; handleConnexion());&#10;        &#10;        // Lien vers la page d'inscription&#10;        setSwitchModeListener(new MouseAdapter() {&#10;            @Override&#10;            public void mouseClicked(MouseEvent e) {&#10;                navigateToInscription();&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void handleConnexion() {&#10;        // Nettoyer les messages d'erreur précédents&#10;        clearErrorMessages();&#10;        &#10;        // Récupérer les valeurs des champs&#10;        String email = emailField.getText().trim();&#10;        String password = new String(passwordField.getPassword());&#10;        &#10;        // Validation des champs&#10;        boolean hasErrors = false;&#10;        &#10;        if (email.isEmpty()) {&#10;            addErrorMessage(emailField, &quot;L'email est obligatoire&quot;);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        if (password.isEmpty()) {&#10;            addErrorMessage(passwordField, &quot;Le mot de passe est obligatoire&quot;);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        if (hasErrors) {&#10;            return;&#10;        }&#10;        &#10;        // Tenter la connexion&#10;        try {&#10;            AuthService authService = AuthService.getInstance();&#10;            LoginResult result = authService.authenticate(email, password);&#10;            &#10;            if (result.isSuccess()) {&#10;                // Connexion réussie&#10;                UserSessionManager.getInstance().login(result.getClient());&#10;                &#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Connexion réussie !\nBienvenue &quot; + result.getClient().getPrenom() + &quot; !&quot;,&#10;                    &quot;Connexion réussie&quot;,&#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Rediriger vers la page d'accueil du client&#10;                if (navigationController != null) {&#10;                    navigationController.navigateToPage(&quot;Accueil&quot;);&#10;                }&#10;                &#10;            } else {&#10;                // Gérer les différents types d'erreurs&#10;                handleLoginError(result.getErrorCode());&#10;            }&#10;            &#10;        } catch (Exception ex) {&#10;            ex.printStackTrace();&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Une erreur inattendue s'est produite lors de la connexion.\n&quot; +&#10;                &quot;Veuillez réessayer plus tard.&quot;,&#10;                &quot;Erreur système&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void handleLoginError(String errorCode) {&#10;        String message;&#10;        String title = &quot;Erreur de connexion&quot;;&#10;        &#10;        switch (errorCode) {&#10;            case &quot;EMAIL_NOT_FOUND&quot;:&#10;                message = &quot;Cette adresse email n'est pas enregistrée.\nVérifiez votre email ou créez un nouveau compte.&quot;;&#10;                addErrorMessage(emailField, &quot;Email non trouvé&quot;);&#10;                break;&#10;                &#10;            case &quot;WRONG_PASSWORD&quot;:&#10;                message = &quot;Mot de passe incorrect.\nVérifiez votre mot de passe et réessayez.&quot;;&#10;                addErrorMessage(passwordField, &quot;Mot de passe incorrect&quot;);&#10;                break;&#10;                &#10;            case &quot;NOT_APPROVED_MEMBER&quot;:&#10;                message = &quot;&lt;html&gt;&lt;div style='text-align: center;'&gt;&quot; +&#10;                         &quot;&lt;h3&gt;Compte en attente d'approbation&lt;/h3&gt;&quot; +&#10;                         &quot;&lt;p&gt;Votre demande d'inscription est en cours de traitement.&lt;/p&gt;&quot; +&#10;                         &quot;&lt;p&gt;Un administrateur doit approuver votre compte avant que vous puissiez vous connecter.&lt;/p&gt;&quot; +&#10;                         &quot;&lt;p&gt;Vous recevrez une notification une fois votre compte approuvé.&lt;/p&gt;&quot; +&#10;                         &quot;&lt;/div&gt;&lt;/html&gt;&quot;;&#10;                title = &quot;Compte non approuvé&quot;;&#10;                break;&#10;                &#10;            case &quot;DATABASE_CONNECTION_ERROR&quot;:&#10;                message = &quot;Impossible de se connecter à la base de données.\nVérifiez votre connexion et réessayez.&quot;;&#10;                title = &quot;Erreur de connexion&quot;;&#10;                break;&#10;                &#10;            case &quot;DATABASE_ERROR&quot;:&#10;                message = &quot;Une erreur de base de données s'est produite.\nVeuillez réessayer plus tard.&quot;;&#10;                title = &quot;Erreur de base de données&quot;;&#10;                break;&#10;                &#10;            default:&#10;                message = &quot;Une erreur inattendue s'est produite.\nVeuillez réessayer plus tard.&quot;;&#10;                title = &quot;Erreur&quot;;&#10;                break;&#10;        }&#10;        &#10;        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);&#10;    }&#10;    &#10;    /**&#10;     * Méthode pour réinitialiser le formulaire&#10;     */&#10;    public void resetForm() {&#10;        emailField.setText(&quot;&quot;);&#10;        passwordField.setText(&quot;&quot;);&#10;        clearErrorMessages();&#10;    }&#10;    &#10;    /**&#10;     * Méthode pour pré-remplir l'email (utile après inscription)&#10;     */&#10;    public void setEmail(String email) {&#10;        emailField.setText(email);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_client/panel/InscriptionPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_client/panel/InscriptionPanel.java" />
              <option name="updatedContent" value="package gui_client.panel;&#10;&#10;import service.AuthService;&#10;import service.AuthService.LoginResult;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.MouseAdapter;&#10;import java.awt.event.MouseEvent;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;&#10;public class InscriptionPanel extends GenericAuthentificationPanel {&#10;    &#10;    private JTextField nomField;&#10;    private JTextField prenomField;&#10;    private JTextField emailField;&#10;    private JPasswordField passwordField;&#10;    private JPasswordField confirmPasswordField;&#10;    private JSpinner dateNaissanceSpinner;&#10;    &#10;    public InscriptionPanel() {&#10;        super(&quot;inscription&quot;);&#10;        createFormFields();&#10;        setupEventHandlers();&#10;    }&#10;    &#10;    private void createFormFields() {&#10;        // Créer les champs du formulaire&#10;        nomField = addTextInput(&quot;Nom :&quot;);&#10;        prenomField = addTextInput(&quot;Prénom :&quot;);&#10;        emailField = addTextInput(&quot;Email :&quot;);&#10;        passwordField = addPasswordInput(&quot;Mot de passe :&quot;);&#10;        confirmPasswordField = addPasswordInput(&quot;Confirmer :&quot;);&#10;        dateNaissanceSpinner = addDateTimeInput(&quot;Date naissance :&quot;);&#10;        &#10;        // Configurer le spinner de date pour afficher seulement la date&#10;        JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(dateNaissanceSpinner, &quot;dd/MM/yyyy&quot;);&#10;        dateNaissanceSpinner.setEditor(dateEditor);&#10;        &#10;        // Définir une date par défaut (il y a 18 ans)&#10;        java.util.Calendar cal = java.util.Calendar.getInstance();&#10;        cal.add(java.util.Calendar.YEAR, -18);&#10;        dateNaissanceSpinner.setValue(cal.getTime());&#10;    }&#10;    &#10;    private void setupEventHandlers() {&#10;        // Action du bouton d'inscription&#10;        setActionButtonListener(e -&gt; handleInscription());&#10;        &#10;        // Lien vers la page de connexion&#10;        setSwitchModeListener(new MouseAdapter() {&#10;            @Override&#10;            public void mouseClicked(MouseEvent e) {&#10;                navigateToConnexion();&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void handleInscription() {&#10;        // Nettoyer les messages d'erreur précédents&#10;        clearErrorMessages();&#10;        &#10;        // Récupérer les valeurs des champs&#10;        String nom = nomField.getText().trim();&#10;        String prenom = prenomField.getText().trim();&#10;        String email = emailField.getText().trim();&#10;        String password = new String(passwordField.getPassword());&#10;        String confirmPassword = new String(confirmPasswordField.getPassword());&#10;        Date dateNaissance = (Date) dateNaissanceSpinner.getValue();&#10;        &#10;        // Validation des champs&#10;        boolean hasErrors = false;&#10;        &#10;        if (nom.isEmpty()) {&#10;            addErrorMessage(nomField, &quot;Le nom est obligatoire&quot;);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        if (prenom.isEmpty()) {&#10;            addErrorMessage(prenomField, &quot;Le prénom est obligatoire&quot;);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        if (email.isEmpty()) {&#10;            addErrorMessage(emailField, &quot;L'email est obligatoire&quot;);&#10;            hasErrors = true;&#10;        } else if (!isValidEmail(email)) {&#10;            addErrorMessage(emailField, &quot;Format d'email invalide&quot;);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        if (password.isEmpty()) {&#10;            addErrorMessage(passwordField, &quot;Le mot de passe est obligatoire&quot;);&#10;            hasErrors = true;&#10;        } else if (password.length() &lt; 6) {&#10;            addErrorMessage(passwordField, &quot;Le mot de passe doit contenir au moins 6 caractères&quot;);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        if (!password.equals(confirmPassword)) {&#10;            addErrorMessage(confirmPasswordField, &quot;Les mots de passe ne correspondent pas&quot;);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        // Vérifier l'âge minimum (13 ans)&#10;        java.util.Calendar cal = java.util.Calendar.getInstance();&#10;        cal.add(java.util.Calendar.YEAR, -13);&#10;        if (dateNaissance.after(cal.getTime())) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Vous devez avoir au moins 13 ans pour vous inscrire.&quot;, &#10;                &quot;Âge insuffisant&quot;, &#10;                JOptionPane.WARNING_MESSAGE);&#10;            hasErrors = true;&#10;        }&#10;        &#10;        if (hasErrors) {&#10;            return;&#10;        }&#10;        &#10;        // Tenter l'inscription&#10;        try {&#10;            AuthService authService = AuthService.getInstance();&#10;            LoginResult result = authService.register(nom, prenom, email, password, dateNaissance);&#10;            &#10;            if (result.isSuccess()) {&#10;                // Inscription réussie, mais en attente d'approbation&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;&lt;html&gt;&lt;div style='text-align: center;'&gt;&quot; +&#10;                    &quot;&lt;h3&gt;Inscription en cours de traitement&lt;/h3&gt;&quot; +&#10;                    &quot;&lt;p&gt;Votre demande d'inscription a été envoyée avec succès !&lt;/p&gt;&quot; +&#10;                    &quot;&lt;p&gt;Un administrateur va examiner votre demande.&lt;/p&gt;&quot; +&#10;                    &quot;&lt;p&gt;Vous recevrez une notification une fois votre compte approuvé.&lt;/p&gt;&quot; +&#10;                    &quot;&lt;p&gt;Vous pourrez alors vous connecter à votre espace membre.&lt;/p&gt;&quot; +&#10;                    &quot;&lt;/div&gt;&lt;/html&gt;&quot;,&#10;                    &quot;Inscription en attente&quot;,&#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Rediriger vers la page de connexion&#10;                navigateToConnexion();&#10;                &#10;            } else {&#10;                // Gérer les différents types d'erreurs&#10;                handleRegistrationError(result.getErrorCode());&#10;            }&#10;            &#10;        } catch (Exception ex) {&#10;            ex.printStackTrace();&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Une erreur inattendue s'est produite lors de l'inscription.\n&quot; +&#10;                &quot;Veuillez réessayer plus tard.&quot;,&#10;                &quot;Erreur système&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void handleRegistrationError(String errorCode) {&#10;        String message;&#10;        String title = &quot;Erreur d'inscription&quot;;&#10;        &#10;        switch (errorCode) {&#10;            case &quot;EMAIL_ALREADY_EXISTS&quot;:&#10;                message = &quot;Cette adresse email est déjà utilisée.\nVeuillez utiliser une autre adresse email.&quot;;&#10;                addErrorMessage(emailField, &quot;Cette adresse email est déjà utilisée&quot;);&#10;                break;&#10;                &#10;            case &quot;DATABASE_CONNECTION_ERROR&quot;:&#10;                message = &quot;Impossible de se connecter à la base de données.\nVérifiez votre connexion et réessayez.&quot;;&#10;                title = &quot;Erreur de connexion&quot;;&#10;                break;&#10;                &#10;            case &quot;DATABASE_ERROR&quot;:&#10;                message = &quot;Une erreur de base de données s'est produite.\nVeuillez réessayer plus tard.&quot;;&#10;                title = &quot;Erreur de base de données&quot;;&#10;                break;&#10;                &#10;            default:&#10;                message = &quot;Une erreur inattendue s'est produite.\nVeuillez réessayer plus tard.&quot;;&#10;                title = &quot;Erreur&quot;;&#10;                break;&#10;        }&#10;        &#10;        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);&#10;    }&#10;    &#10;    private boolean isValidEmail(String email) {&#10;        return email.matches(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Méthode pour réinitialiser le formulaire&#10;     */&#10;    public void resetForm() {&#10;        nomField.setText(&quot;&quot;);&#10;        prenomField.setText(&quot;&quot;);&#10;        emailField.setText(&quot;&quot;);&#10;        passwordField.setText(&quot;&quot;);&#10;        confirmPasswordField.setText(&quot;&quot;);&#10;        &#10;        // Remettre la date par défaut&#10;        java.util.Calendar cal = java.util.Calendar.getInstance();&#10;        cal.add(java.util.Calendar.YEAR, -18);&#10;        dateNaissanceSpinner.setValue(cal.getTime());&#10;        &#10;        clearErrorMessages();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_client/panel/PaiementPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_client/panel/PaiementPanel.java" />
              <option name="originalContent" value="package gui_client.panel;&#10;&#10;import entite.*;&#10;import service.*;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;public class PaiementPanel extends JDialog {&#10;    private TypeAbonnement typeAbonnement;&#10;    private Membre membre;&#10;    private JComboBox&lt;MoyenDePaiement&gt; moyenPaiementCombo;&#10;    private JLabel nomAbonnementLabel;&#10;    private JLabel montantLabel;&#10;    private JButton payerButton;&#10;    private JButton annulerButton;&#10;&#10;    // Services&#10;    private PaiementService paiementService;&#10;    private AbonnementService abonnementService;&#10;    private MoyenDePaiementService moyenDePaiementService;&#10;&#10;    public PaiementPanel(Frame parent, TypeAbonnement typeAbonnement, Membre membre) {&#10;        super(parent, &quot;FITPLUS+ Paiement&quot;, true);&#10;        this.typeAbonnement = typeAbonnement;&#10;        this.membre = membre;&#10;&#10;        // Initialiser les services&#10;        this.paiementService = new PaiementService();&#10;        this.abonnementService = new AbonnementService();&#10;        this.moyenDePaiementService = new MoyenDePaiementService();&#10;&#10;        initializeComponents();&#10;        setupLayout();&#10;        setupEventListeners();&#10;        loadMoyensPaiement();&#10;&#10;        // Configuration de la fenêtre&#10;        setSize(400, 300);&#10;        setLocationRelativeTo(parent);&#10;        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);&#10;        setResizable(false);&#10;    }&#10;&#10;    private void initializeComponents() {&#10;        // Titre&#10;        JLabel titreLabel = new JLabel(&quot;FITPLUS+ Paiement&quot;, JLabel.CENTER);&#10;        titreLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 20));&#10;        titreLabel.setForeground(new Color(0, 102, 204));&#10;&#10;        // Nom de l'abonnement&#10;        nomAbonnementLabel = new JLabel(&quot;Abonnement: &quot; + typeAbonnement.getLibelle(), JLabel.CENTER);&#10;        nomAbonnementLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;&#10;        // Montant&#10;        montantLabel = new JLabel(&quot;Montant: &quot; + typeAbonnement.getMontant() + &quot; FCFA&quot;, JLabel.CENTER);&#10;        montantLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 16));&#10;        montantLabel.setForeground(new Color(0, 150, 0));&#10;&#10;        // Moyen de paiement&#10;        JLabel moyenPaiementLabelText = new JLabel(&quot;Moyen de paiement:&quot;);&#10;        moyenPaiementCombo = new JComboBox&lt;&gt;();&#10;        moyenPaiementCombo.setPreferredSize(new Dimension(200, 30));&#10;&#10;        // Boutons&#10;        payerButton = new JButton(&quot;Payer&quot;);&#10;        payerButton.setBackground(new Color(0, 150, 0));&#10;        payerButton.setForeground(Color.WHITE);&#10;        payerButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        payerButton.setPreferredSize(new Dimension(100, 35));&#10;&#10;        annulerButton = new JButton(&quot;Annuler&quot;);&#10;        annulerButton.setBackground(new Color(200, 50, 50));&#10;        annulerButton.setForeground(Color.WHITE);&#10;        annulerButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        annulerButton.setPreferredSize(new Dimension(100, 35));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        setLayout(new BorderLayout());&#10;&#10;        // Panel principal&#10;        JPanel mainPanel = new JPanel();&#10;        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));&#10;        mainPanel.setBackground(Color.WHITE);&#10;&#10;        // Titre&#10;        JLabel titreLabel = new JLabel(&quot;FITPLUS+ Paiement&quot;, JLabel.CENTER);&#10;        titreLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 20));&#10;        titreLabel.setForeground(new Color(0, 102, 204));&#10;        titreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;&#10;        // Espacement&#10;        mainPanel.add(titreLabel);&#10;        mainPanel.add(Box.createVerticalStrut(20));&#10;&#10;        // Informations de l'abonnement&#10;        nomAbonnementLabel.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;        mainPanel.add(nomAbonnementLabel);&#10;        mainPanel.add(Box.createVerticalStrut(10));&#10;&#10;        montantLabel.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;        mainPanel.add(montantLabel);&#10;        mainPanel.add(Box.createVerticalStrut(20));&#10;&#10;        // Panel pour le moyen de paiement&#10;        JPanel moyenPaiementPanel = new JPanel(new FlowLayout());&#10;        moyenPaiementPanel.setBackground(Color.WHITE);&#10;        JLabel moyenPaiementLabelText = new JLabel(&quot;Moyen de paiement:&quot;);&#10;        moyenPaiementPanel.add(moyenPaiementLabelText);&#10;        moyenPaiementPanel.add(moyenPaiementCombo);&#10;        mainPanel.add(moyenPaiementPanel);&#10;&#10;        mainPanel.add(Box.createVerticalStrut(30));&#10;&#10;        // Panel pour les boutons&#10;        JPanel buttonPanel = new JPanel(new FlowLayout());&#10;        buttonPanel.setBackground(Color.WHITE);&#10;        buttonPanel.add(payerButton);&#10;        buttonPanel.add(Box.createHorizontalStrut(20));&#10;        buttonPanel.add(annulerButton);&#10;        mainPanel.add(buttonPanel);&#10;&#10;        add(mainPanel, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventListeners() {&#10;        payerButton.addActionListener(new ActionListener() {&#10;            @Override&#10;            public void actionPerformed(ActionEvent e) {&#10;                effectuerPaiement();&#10;            }&#10;        });&#10;&#10;        annulerButton.addActionListener(new ActionListener() {&#10;            @Override&#10;            public void actionPerformed(ActionEvent e) {&#10;                dispose();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadMoyensPaiement() {&#10;        try {&#10;            List&lt;MoyenDePaiement&gt; moyensPaiement = moyenDePaiementService.listerTous();&#10;            for (MoyenDePaiement moyen : moyensPaiement) {&#10;                moyenPaiementCombo.addItem(moyen);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors du chargement des moyens de paiement: &quot; + e.getMessage(),&#10;                &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void effectuerPaiement() {&#10;        try {&#10;            // Vérifier qu'un moyen de paiement est sélectionné&#10;            MoyenDePaiement moyenSelectionne = (MoyenDePaiement) moyenPaiementCombo.getSelectedItem();&#10;            if (moyenSelectionne == null) {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Veuillez sélectionner un moyen de paiement.&quot;,&#10;                    &quot;Attention&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Vérifier s'il y a déjà un abonnement actif&#10;            long nbAbonnementsActifs = abonnementService.countAbonnementsActifs(membre.getId());&#10;            if (nbAbonnementsActifs &gt; 0) {&#10;                int choix = JOptionPane.showConfirmDialog(this,&#10;                    &quot;Vous avez déjà un abonnement actif.\n&quot; +&#10;                    &quot;Souhaitez-vous continuer ? Le nouvel abonnement remplacera l'ancien.&quot;,&#10;                    &quot;Abonnement actif détecté&quot;,&#10;                    JOptionPane.YES_NO_OPTION,&#10;                    JOptionPane.WARNING_MESSAGE);&#10;&#10;                if (choix != JOptionPane.YES_OPTION) {&#10;                    return;&#10;                }&#10;            }&#10;&#10;            // Confirmer le paiement&#10;            int confirmation = JOptionPane.showConfirmDialog(this,&#10;                &quot;Confirmer le paiement de &quot; + typeAbonnement.getMontant() + &quot; FCFA\n&quot; +&#10;                &quot;pour l'abonnement &quot; + typeAbonnement.getLibelle() + &quot; ?&quot;,&#10;                &quot;Confirmation de paiement&quot;,&#10;                JOptionPane.YES_NO_OPTION);&#10;&#10;            if (confirmation != JOptionPane.YES_OPTION) {&#10;                return;&#10;            }&#10;&#10;            // Désactiver les boutons pendant le traitement&#10;            payerButton.setEnabled(false);&#10;            annulerButton.setEnabled(false);&#10;            payerButton.setText(&quot;Traitement...&quot;);&#10;&#10;            // Date actuelle pour le paiement&#10;            LocalDateTime datePaiement = LocalDateTime.now();&#10;&#10;            // Créer le paiement&#10;            Paiement paiement = new Paiement(datePaiement, typeAbonnement.getMontant(), moyenSelectionne);&#10;            paiementService.ajouter(paiement);&#10;&#10;            // Calculer les dates d'abonnement (1 mois de durée)&#10;            LocalDateTime dateDebut = datePaiement;&#10;            LocalDateTime dateFin = dateDebut.plusMonths(1);&#10;&#10;            // Créer l'abonnement&#10;            Abonnement abonnement = new Abonnement(dateDebut, dateFin, typeAbonnement, paiement, membre);&#10;            abonnementService.ajouter(abonnement);&#10;&#10;            // Afficher le message de succès&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Paiement effectué avec succès!\n\n&quot; +&#10;                &quot;Détails de l'abonnement:\n&quot; +&#10;                &quot;Type: &quot; + typeAbonnement.getLibelle() + &quot;\n&quot; +&#10;                &quot;Montant: &quot; + typeAbonnement.getMontant() + &quot; FCFA\n&quot; +&#10;                &quot;Date début: &quot; + dateDebut.toLocalDate() + &quot;\n&quot; +&#10;                &quot;Date fin: &quot; + dateFin.toLocalDate() + &quot;\n&quot; +&#10;                &quot;Moyen de paiement: &quot; + moyenSelectionne.getLibelle(),&#10;                &quot;Paiement réussi&quot;,&#10;                JOptionPane.INFORMATION_MESSAGE);&#10;&#10;            // Fermer la fenêtre&#10;            dispose();&#10;&#10;        } catch (Exception e) {&#10;            // Réactiver les boutons en cas d'erreur&#10;            payerButton.setEnabled(true);&#10;            annulerButton.setEnabled(true);&#10;            payerButton.setText(&quot;Payer&quot;);&#10;&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors du traitement du paiement:\n&quot; + e.getMessage(),&#10;                &quot;Erreur de paiement&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Méthode statique pour afficher la fenêtre de paiement&#10;    public static void afficherPaiement(Frame parent, TypeAbonnement typeAbonnement, Membre membre) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            PaiementPanel panel = new PaiementPanel(parent, typeAbonnement, membre);&#10;            panel.setVisible(true);&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gui_client.panel;&#10;&#10;import entite.*;&#10;import gui_client.util.AbonnementSouscription;&#10;import gui_client.util.AbonnementSouscription.ResultatValidation;&#10;import gui_client.util.AbonnementSouscription.ResultatSouscription;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.util.List;&#10;&#10;public class PaiementPanel extends JDialog {&#10;    private TypeAbonnement typeAbonnement;&#10;    private Membre membre;&#10;    private JComboBox&lt;MoyenDePaiement&gt; moyenPaiementCombo;&#10;    private JLabel nomAbonnementLabel;&#10;    private JLabel montantLabel;&#10;    private JLabel infoLabel;&#10;    private JButton payerButton;&#10;    private JButton annulerButton;&#10;    &#10;    // Utilitaire pour la logique métier&#10;    private AbonnementSouscription abonnementUtil;&#10;&#10;    public PaiementPanel(Frame parent, TypeAbonnement typeAbonnement, Membre membre) {&#10;        super(parent, &quot;FITPLUS+ Paiement&quot;, true);&#10;        this.typeAbonnement = typeAbonnement;&#10;        this.membre = membre;&#10;        this.abonnementUtil = AbonnementSouscription.getInstance();&#10;        &#10;        initializeComponents();&#10;        setupLayout();&#10;        setupEventListeners();&#10;        loadMoyensPaiement();&#10;        validateSouscription();&#10;        &#10;        // Configuration de la fenêtre&#10;        setSize(450, 350);&#10;        setLocationRelativeTo(parent);&#10;        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);&#10;        setResizable(false);&#10;    }&#10;&#10;    private void initializeComponents() {&#10;        // Nom de l'abonnement&#10;        nomAbonnementLabel = new JLabel(&quot;Abonnement: &quot; + typeAbonnement.getLibelle(), JLabel.CENTER);&#10;        nomAbonnementLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;&#10;        // Montant&#10;        montantLabel = new JLabel(&quot;Montant: &quot; + typeAbonnement.getMontant() + &quot; FCFA&quot;, JLabel.CENTER);&#10;        montantLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 16));&#10;        montantLabel.setForeground(new Color(0, 150, 0));&#10;        &#10;        // Label d'information&#10;        infoLabel = new JLabel(&quot;&quot;, JLabel.CENTER);&#10;        infoLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;&#10;        // Moyen de paiement&#10;        moyenPaiementCombo = new JComboBox&lt;&gt;();&#10;        moyenPaiementCombo.setPreferredSize(new Dimension(200, 30));&#10;&#10;        // Boutons&#10;        payerButton = new JButton(&quot;Payer&quot;);&#10;        payerButton.setBackground(new Color(0, 150, 0));&#10;        payerButton.setForeground(Color.WHITE);&#10;        payerButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        payerButton.setPreferredSize(new Dimension(100, 35));&#10;&#10;        annulerButton = new JButton(&quot;Annuler&quot;);&#10;        annulerButton.setBackground(new Color(200, 50, 50));&#10;        annulerButton.setForeground(Color.WHITE);&#10;        annulerButton.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        annulerButton.setPreferredSize(new Dimension(100, 35));&#10;    }&#10;&#10;    private void setupLayout() {&#10;        setLayout(new BorderLayout());&#10;&#10;        // Panel principal&#10;        JPanel mainPanel = new JPanel();&#10;        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));&#10;        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));&#10;        mainPanel.setBackground(Color.WHITE);&#10;&#10;        // Titre&#10;        JLabel titreLabel = new JLabel(&quot;FITPLUS+ Paiement&quot;, JLabel.CENTER);&#10;        titreLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 20));&#10;        titreLabel.setForeground(new Color(0, 102, 204));&#10;        titreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;&#10;        mainPanel.add(titreLabel);&#10;        mainPanel.add(Box.createVerticalStrut(20));&#10;&#10;        // Informations de l'abonnement&#10;        nomAbonnementLabel.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;        mainPanel.add(nomAbonnementLabel);&#10;        mainPanel.add(Box.createVerticalStrut(10));&#10;&#10;        montantLabel.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;        mainPanel.add(montantLabel);&#10;        mainPanel.add(Box.createVerticalStrut(10));&#10;        &#10;        // Label d'information&#10;        infoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);&#10;        mainPanel.add(infoLabel);&#10;        mainPanel.add(Box.createVerticalStrut(20));&#10;&#10;        // Panel pour le moyen de paiement&#10;        JPanel moyenPaiementPanel = new JPanel(new FlowLayout());&#10;        moyenPaiementPanel.setBackground(Color.WHITE);&#10;        JLabel moyenPaiementLabelText = new JLabel(&quot;Moyen de paiement:&quot;);&#10;        moyenPaiementPanel.add(moyenPaiementLabelText);&#10;        moyenPaiementPanel.add(moyenPaiementCombo);&#10;        mainPanel.add(moyenPaiementPanel);&#10;&#10;        mainPanel.add(Box.createVerticalStrut(30));&#10;&#10;        // Panel pour les boutons&#10;        JPanel buttonPanel = new JPanel(new FlowLayout());&#10;        buttonPanel.setBackground(Color.WHITE);&#10;        buttonPanel.add(payerButton);&#10;        buttonPanel.add(Box.createHorizontalStrut(20));&#10;        buttonPanel.add(annulerButton);&#10;        mainPanel.add(buttonPanel);&#10;&#10;        add(mainPanel, BorderLayout.CENTER);&#10;    }&#10;&#10;    private void setupEventListeners() {&#10;        payerButton.addActionListener(new ActionListener() {&#10;            @Override&#10;            public void actionPerformed(ActionEvent e) {&#10;                effectuerPaiement();&#10;            }&#10;        });&#10;&#10;        annulerButton.addActionListener(new ActionListener() {&#10;            @Override&#10;            public void actionPerformed(ActionEvent e) {&#10;                dispose();&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void validateSouscription() {&#10;        // Vérifier si la souscription est possible&#10;        ResultatValidation validation = abonnementUtil.peutSouscrire(membre);&#10;        &#10;        if (!validation.isAutorise() &amp;&amp; !validation.isRenouvellementProche()) {&#10;            // Souscription non autorisée&#10;            infoLabel.setText(&quot;&lt;html&gt;&lt;div style='text-align: center; color: red;'&gt;&quot; + &#10;                             validation.getMessage() + &quot;&lt;/div&gt;&lt;/html&gt;&quot;);&#10;            payerButton.setEnabled(false);&#10;            payerButton.setText(&quot;Non autorisé&quot;);&#10;        } else if (validation.isRenouvellementProche()) {&#10;            // Renouvellement autorisé&#10;            infoLabel.setText(&quot;&lt;html&gt;&lt;div style='text-align: center; color: orange;'&gt;&quot; + &#10;                             validation.getMessage() + &quot;&lt;br/&gt;Renouvellement possible&lt;/div&gt;&lt;/html&gt;&quot;);&#10;            payerButton.setText(&quot;Renouveler&quot;);&#10;        } else {&#10;            // Souscription normale&#10;            infoLabel.setText(&quot;&lt;html&gt;&lt;div style='text-align: center; color: green;'&gt;&quot; + &#10;                             validation.getMessage() + &quot;&lt;/div&gt;&lt;/html&gt;&quot;);&#10;        }&#10;    }&#10;&#10;    private void loadMoyensPaiement() {&#10;        try {&#10;            List&lt;MoyenDePaiement&gt; moyensPaiement = abonnementUtil.getMoyensPaiementDisponibles();&#10;            for (MoyenDePaiement moyen : moyensPaiement) {&#10;                moyenPaiementCombo.addItem(moyen);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur lors du chargement des moyens de paiement: &quot; + e.getMessage(),&#10;                &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    private void effectuerPaiement() {&#10;        try {&#10;            // Vérifier qu'un moyen de paiement est sélectionné&#10;            MoyenDePaiement moyenSelectionne = (MoyenDePaiement) moyenPaiementCombo.getSelectedItem();&#10;            if (moyenSelectionne == null) {&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Veuillez sélectionner un moyen de paiement.&quot;,&#10;                    &quot;Attention&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;            &#10;            // Valider à nouveau la souscription&#10;            ResultatValidation validation = abonnementUtil.peutSouscrire(membre);&#10;            &#10;            // Demander confirmation&#10;            if (!abonnementUtil.confirmerSouscription(this, typeAbonnement, validation)) {&#10;                return;&#10;            }&#10;&#10;            // Désactiver les boutons pendant le traitement&#10;            payerButton.setEnabled(false);&#10;            annulerButton.setEnabled(false);&#10;            payerButton.setText(&quot;Traitement...&quot;);&#10;&#10;            // Effectuer la souscription via l'utilitaire&#10;            ResultatSouscription resultat = abonnementUtil.souscrireAbonnement(membre, typeAbonnement, moyenSelectionne);&#10;            &#10;            // Afficher le résultat&#10;            abonnementUtil.afficherResultatSouscription(this, resultat);&#10;            &#10;            if (resultat.isSucces()) {&#10;                // Fermer la fenêtre en cas de succès&#10;                dispose();&#10;            } else {&#10;                // Réactiver les boutons en cas d'erreur&#10;                payerButton.setEnabled(true);&#10;                annulerButton.setEnabled(true);&#10;                payerButton.setText(&quot;Payer&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            // Réactiver les boutons en cas d'erreur&#10;            payerButton.setEnabled(true);&#10;            annulerButton.setEnabled(true);&#10;            payerButton.setText(&quot;Payer&quot;);&#10;&#10;            JOptionPane.showMessageDialog(this,&#10;                &quot;Erreur inattendue: &quot; + e.getMessage(),&#10;                &quot;Erreur&quot;,&#10;                JOptionPane.ERROR_MESSAGE);&#10;&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Méthode statique pour afficher la fenêtre de paiement&#10;    public static void afficherPaiement(Frame parent, TypeAbonnement typeAbonnement, Membre membre) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            PaiementPanel panel = new PaiementPanel(parent, typeAbonnement, membre);&#10;            panel.setVisible(true);&#10;        });&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_client/panel/ProfilPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_client/panel/ProfilPanel.java" />
              <option name="originalContent" value="package gui_client.panel;&#10;&#10;import entite.Client;&#10;import entite.Abonnement;&#10;import entite.Membre;&#10;import entite.TypeAbonnement;&#10;import service.UserSessionManager;&#10;import service.ClientService;&#10;import service.AbonnementService;&#10;import service.MembreService;&#10;import dao.AbonnementDao;&#10;import dao.MembreDao;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;public class ProfilPanel extends JPanel {&#10;    &#10;    private ClientService clientService;&#10;    private AbonnementService abonnementService;&#10;    private MembreService membreService;&#10;    private AbonnementDao abonnementDao;&#10;    private MembreDao membreDao;&#10;&#10;    private JTextField nomField;&#10;    private JTextField prenomField;&#10;    private JTextField emailField;&#10;    private JPasswordField currentPasswordField;&#10;    private JPasswordField newPasswordField;&#10;    private JPasswordField confirmPasswordField;&#10;&#10;    private JLabel abonnementTypeLabel;&#10;    private JLabel dateDebutLabel;&#10;    private JLabel dateFinLabel;&#10;    private JLabel statutAbonnementLabel;&#10;&#10;    // Nouveau: Table pour l'historique des abonnements&#10;    private JTable historiqueTable;&#10;    private javax.swing.table.DefaultTableModel historiqueTableModel;&#10;&#10;    public ProfilPanel() {&#10;        // Initialiser les services&#10;        clientService = new ClientService();&#10;        abonnementService = new AbonnementService();&#10;        membreService = new MembreService();&#10;        abonnementDao = new AbonnementDao();&#10;        membreDao = new MembreDao();&#10;&#10;        setLayout(new BorderLayout());&#10;        setBackground(Color.WHITE);&#10;        &#10;        // Vérifier si l'utilisateur est connecté&#10;        if (!UserSessionManager.getInstance().isLoggedIn()) {&#10;            add(createNotLoggedInPanel(), BorderLayout.CENTER);&#10;            return;&#10;        }&#10;&#10;        // Créer l'interface principale&#10;        createMainInterface();&#10;    }&#10;&#10;    private JPanel createNotLoggedInPanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        panel.setBackground(Color.WHITE);&#10;&#10;        JLabel messageLabel = new JLabel(&quot;Veuillez vous connecter pour accéder à votre profil&quot;, SwingConstants.CENTER);&#10;        messageLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 18));&#10;        messageLabel.setForeground(Color.GRAY);&#10;&#10;        panel.add(messageLabel, BorderLayout.CENTER);&#10;        return panel;&#10;    }&#10;&#10;    private void createMainInterface() {&#10;        // Titre principal&#10;        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        titlePanel.setBackground(Color.WHITE);&#10;        titlePanel.setBorder(BorderFactory.createEmptyBorder(20, 30, 10, 30));&#10;&#10;        JLabel titleLabel = new JLabel(&quot;Mon Profil&quot;);&#10;        titleLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 28));&#10;        titleLabel.setForeground(new Color(74, 41, 0));&#10;        titlePanel.add(titleLabel);&#10;&#10;        add(titlePanel, BorderLayout.NORTH);&#10;&#10;        // Contenu principal avec scroll&#10;        JScrollPane scrollPane = new JScrollPane(createContentPanel());&#10;        scrollPane.setBorder(null);&#10;        scrollPane.getVerticalScrollBar().setUnitIncrement(16);&#10;        add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private JPanel createContentPanel() {&#10;        JPanel contentPanel = new JPanel(new GridBagLayout());&#10;        contentPanel.setBackground(Color.WHITE);&#10;        contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 30, 30, 30));&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.insets = new Insets(10, 0, 10, 0);&#10;&#10;        // Section Informations personnelles&#10;        gbc.gridx = 0;&#10;        gbc.gridy = 0;&#10;        gbc.weightx = 1.0;&#10;        contentPanel.add(createPersonalInfoSection(), gbc);&#10;&#10;        // Section Modification du mot de passe&#10;        gbc.gridy = 1;&#10;        contentPanel.add(createPasswordSection(), gbc);&#10;&#10;        // Section Abonnement&#10;        gbc.gridy = 2;&#10;        contentPanel.add(createSubscriptionSection(), gbc);&#10;&#10;        // Nouvelle section: Historique des abonnements&#10;        gbc.gridy = 3;&#10;        contentPanel.add(createHistoriqueSection(), gbc);&#10;&#10;        return contentPanel;&#10;    }&#10;&#10;    private JPanel createPersonalInfoSection() {&#10;        JPanel section = createSectionPanel(&quot;Informations personnelles&quot;);&#10;&#10;        Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;        // Champs d'information&#10;        nomField = createInfoField(&quot;Nom :&quot;, currentUser.getNom(), true);&#10;        prenomField = createInfoField(&quot;Prénom :&quot;, currentUser.getPrenom(), true);&#10;        emailField = createInfoField(&quot;Email :&quot;, currentUser.getEmail(), true);&#10;&#10;        // Layout des champs&#10;        JPanel fieldsPanel = new JPanel(new GridBagLayout());&#10;        fieldsPanel.setBackground(Color.WHITE);&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 0, 5, 0);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;        // Nom&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        fieldsPanel.add(new JLabel(&quot;Nom :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(nomField, gbc);&#10;&#10;        // Prénom&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Prénom :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(prenomField, gbc);&#10;&#10;        // Email&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Email :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(emailField, gbc);&#10;&#10;        section.add(fieldsPanel, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private JPanel createPasswordSection() {&#10;        JPanel section = createSectionPanel(&quot;Modification du mot de passe&quot;);&#10;&#10;        // Champs de mot de passe&#10;        currentPasswordField = new JPasswordField();&#10;        newPasswordField = new JPasswordField();&#10;        confirmPasswordField = new JPasswordField();&#10;&#10;        stylePasswordField(currentPasswordField);&#10;        stylePasswordField(newPasswordField);&#10;        stylePasswordField(confirmPasswordField);&#10;&#10;        // Layout des champs&#10;        JPanel fieldsPanel = new JPanel(new GridBagLayout());&#10;        fieldsPanel.setBackground(Color.WHITE);&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 0, 5, 0);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;        // Mot de passe actuel&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        fieldsPanel.add(new JLabel(&quot;Mot de passe actuel :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(currentPasswordField, gbc);&#10;&#10;        // Nouveau mot de passe&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Nouveau mot de passe :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(newPasswordField, gbc);&#10;&#10;        // Confirmer mot de passe&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Confirmer mot de passe :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(confirmPasswordField, gbc);&#10;&#10;        // Bouton de modification&#10;        JButton changePasswordButton = createActionButton(&quot;Modifier le mot de passe&quot;, new Color(52, 152, 219));&#10;        changePasswordButton.addActionListener(e -&gt; handlePasswordChange());&#10;&#10;        gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        gbc.insets = new Insets(15, 0, 5, 0);&#10;        fieldsPanel.add(changePasswordButton, gbc);&#10;&#10;        section.add(fieldsPanel, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private JPanel createSubscriptionSection() {&#10;        JPanel section = createSectionPanel(&quot;Mon Abonnement&quot;);&#10;&#10;        // Labels pour les informations d'abonnement&#10;        abonnementTypeLabel = new JLabel();&#10;        dateDebutLabel = new JLabel();&#10;        dateFinLabel = new JLabel();&#10;        statutAbonnementLabel = new JLabel();&#10;&#10;        styleInfoLabel(abonnementTypeLabel);&#10;        styleInfoLabel(dateDebutLabel);&#10;        styleInfoLabel(dateFinLabel);&#10;        styleInfoLabel(statutAbonnementLabel);&#10;&#10;        // Charger les informations d'abonnement&#10;        loadSubscriptionInfo();&#10;&#10;        // Layout des informations&#10;        JPanel infoPanel = new JPanel(new GridBagLayout());&#10;        infoPanel.setBackground(Color.WHITE);&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(8, 0, 8, 0);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;        // Type d'abonnement&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        infoPanel.add(new JLabel(&quot;Type d'abonnement :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(abonnementTypeLabel, gbc);&#10;&#10;        // Date de début&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.weightx = 0;&#10;        infoPanel.add(new JLabel(&quot;Date de début :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(dateDebutLabel, gbc);&#10;&#10;        // Date de fin&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.weightx = 0;&#10;        infoPanel.add(new JLabel(&quot;Date de fin :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(dateFinLabel, gbc);&#10;&#10;        // Statut&#10;        gbc.gridx = 0; gbc.gridy = 3; gbc.weightx = 0;&#10;        infoPanel.add(new JLabel(&quot;Statut :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(statutAbonnementLabel, gbc);&#10;&#10;        section.add(infoPanel, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private JPanel createHistoriqueSection() {&#10;        JPanel section = createSectionPanel(&quot;Historique des Abonnements&quot;);&#10;&#10;        // Table pour l'historique&#10;        historiqueTableModel = new javax.swing.table.DefaultTableModel(&#10;            new Object [][] {},&#10;            new String [] {&#10;                &quot;Type d'Abonnement&quot;, &quot;Date de Début&quot;, &quot;Date de Fin&quot;, &quot;Statut&quot;&#10;            }&#10;        ) {&#10;            Class[] types = new Class [] {&#10;                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class&#10;            };&#10;            boolean[] canEdit = new boolean [] {&#10;                false, false, false, false&#10;            };&#10;&#10;            public Class getColumnClass(int columnIndex) {&#10;                return types [columnIndex];&#10;            }&#10;&#10;            public boolean isCellEditable(int rowIndex, int columnIndex) {&#10;                return canEdit [columnIndex];&#10;            }&#10;        };&#10;        historiqueTable = new JTable(historiqueTableModel);&#10;        historiqueTable.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        historiqueTable.setRowHeight(30);&#10;        historiqueTable.setSelectionBackground(new Color(52, 152, 219));&#10;        historiqueTable.setSelectionForeground(Color.WHITE);&#10;        historiqueTable.setDefaultEditor(Object.class, null); // Rendre les cellules non éditables&#10;&#10;        // Charger les données de l'historique&#10;        loadHistoriqueData();&#10;&#10;        JScrollPane tableScrollPane = new JScrollPane(historiqueTable);&#10;        tableScrollPane.setBorder(BorderFactory.createEmptyBorder());&#10;        tableScrollPane.setPreferredSize(new Dimension(0, 150));&#10;&#10;        section.add(tableScrollPane, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private void loadSubscriptionInfo() {&#10;        try {&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;            // Récupérer le membre correspondant au client en utilisant la méthode générique&#10;            Membre membre = membreDao.trouverPar(&quot;client.id&quot;, currentUser.getId());&#10;&#10;            if (membre != null) {&#10;                // Récupérer l'abonnement actuel du membre en utilisant une requête JPQL personnalisée&#10;                Map&lt;String, Object&gt; parameters = new HashMap&lt;&gt;();&#10;                parameters.put(&quot;membreId&quot;, membre.getId());&#10;                parameters.put(&quot;now&quot;, java.time.LocalDateTime.now());&#10;&#10;                String jpql = &quot;SELECT a FROM Abonnement a WHERE a.membre.id = :membreId AND a.dateFin &gt;= :now ORDER BY a.dateFin DESC&quot;;&#10;                List&lt;Abonnement&gt; abonnements = abonnementDao.listerParRequete(jpql, parameters);&#10;&#10;                if (!abonnements.isEmpty()) {&#10;                    Abonnement abonnement = abonnements.get(0); // Prendre le plus récent&#10;&#10;                    // Afficher les informations d'abonnement&#10;                    TypeAbonnement typeAbonnement = abonnement.getTypeAbonnement();&#10;                    abonnementTypeLabel.setText(typeAbonnement != null ? typeAbonnement.getLibelle() : &quot;Non défini&quot;);&#10;&#10;                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;                    dateDebutLabel.setText(abonnement.getDateDebut().format(formatter));&#10;                    dateFinLabel.setText(abonnement.getDateFin().format(formatter));&#10;&#10;                    // Vérifier si l'abonnement est encore actif&#10;                    if (abonnement.getDateFin().isAfter(java.time.LocalDateTime.now())) {&#10;                        statutAbonnementLabel.setText(&quot;Actif&quot;);&#10;                        statutAbonnementLabel.setForeground(new Color(46, 204, 113));&#10;                    } else {&#10;                        statutAbonnementLabel.setText(&quot;Expiré&quot;);&#10;                        statutAbonnementLabel.setForeground(new Color(231, 76, 60));&#10;                    }&#10;                } else {&#10;                    // Aucun abonnement actif&#10;                    abonnementTypeLabel.setText(&quot;Aucun abonnement actif&quot;);&#10;                    dateDebutLabel.setText(&quot;-&quot;);&#10;                    dateFinLabel.setText(&quot;-&quot;);&#10;                    statutAbonnementLabel.setText(&quot;Inactif&quot;);&#10;                    statutAbonnementLabel.setForeground(new Color(149, 165, 166));&#10;                }&#10;            } else {&#10;                // Client non encore membre&#10;                abonnementTypeLabel.setText(&quot;Vous n'êtes pas encore membre&quot;);&#10;                dateDebutLabel.setText(&quot;-&quot;);&#10;                dateFinLabel.setText(&quot;-&quot;);&#10;                statutAbonnementLabel.setText(&quot;Non membre&quot;);&#10;                statutAbonnementLabel.setForeground(new Color(149, 165, 166));&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            abonnementTypeLabel.setText(&quot;Erreur lors du chargement&quot;);&#10;            dateDebutLabel.setText(&quot;-&quot;);&#10;            dateFinLabel.setText(&quot;-&quot;);&#10;            statutAbonnementLabel.setText(&quot;Erreur&quot;);&#10;            statutAbonnementLabel.setForeground(new Color(231, 76, 60));&#10;        }&#10;    }&#10;&#10;    private void loadHistoriqueData() {&#10;        try {&#10;            historiqueTableModel.setRowCount(0); // Réinitialiser les données de la table&#10;&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;            // Récupérer le membre correspondant au client&#10;            Membre membre = membreDao.trouverPar(&quot;client.id&quot;, currentUser.getId());&#10;&#10;            if (membre != null) {&#10;                // Récupérer la liste des abonnements du membre (y compris les expirés)&#10;                String jpql = &quot;SELECT a FROM Abonnement a WHERE a.membre.id = :membreId ORDER BY a.dateFin DESC&quot;;&#10;                List&lt;Abonnement&gt; abonnements = abonnementDao.listerParRequete(jpql, Map.of(&quot;membreId&quot;, membre.getId()));&#10;&#10;                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;                for (Abonnement abonnement : abonnements) {&#10;                    // Ajouter une ligne pour chaque abonnement&#10;                    historiqueTableModel.addRow(new Object[] {&#10;                        abonnement.getTypeAbonnement() != null ? abonnement.getTypeAbonnement().getLibelle() : &quot;Non défini&quot;,&#10;                        abonnement.getDateDebut().format(formatter),&#10;                        abonnement.getDateFin().format(formatter),&#10;                        abonnement.getDateFin().isAfter(java.time.LocalDateTime.now()) ? &quot;Actif&quot; : &quot;Expiré&quot;&#10;                    });&#10;                }&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void handlePasswordChange() {&#10;        try {&#10;            String currentPassword = new String(currentPasswordField.getPassword());&#10;            String newPassword = new String(newPasswordField.getPassword());&#10;            String confirmPassword = new String(confirmPasswordField.getPassword());&#10;&#10;            // Validations&#10;            if (currentPassword.isEmpty() || newPassword.isEmpty() || confirmPassword.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Veuillez remplir tous les champs.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;            // Vérifier le mot de passe actuel&#10;            if (!currentUser.getMotDePasse().equals(currentPassword)) {&#10;                JOptionPane.showMessageDialog(this, &quot;Le mot de passe actuel est incorrect.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Vérifier que les nouveaux mots de passe correspondent&#10;            if (!newPassword.equals(confirmPassword)) {&#10;                JOptionPane.showMessageDialog(this, &quot;Les nouveaux mots de passe ne correspondent pas.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Vérifier la longueur du nouveau mot de passe&#10;            if (newPassword.length() &lt; 6) {&#10;                JOptionPane.showMessageDialog(this, &quot;Le nouveau mot de passe doit contenir au moins 6 caractères.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Mettre à jour le mot de passe&#10;            currentUser.setMotDePasse(newPassword);&#10;            clientService.modifier(currentUser);&#10;&#10;            // Réinitialiser les champs&#10;            currentPasswordField.setText(&quot;&quot;);&#10;            newPasswordField.setText(&quot;&quot;);&#10;            confirmPasswordField.setText(&quot;&quot;);&#10;&#10;            JOptionPane.showMessageDialog(this, &quot;Mot de passe modifié avec succès !&quot;, &quot;Succès&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            JOptionPane.showMessageDialog(this, &quot;Erreur lors de la modification du mot de passe : &quot; + e.getMessage(), &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    // Méthodes utilitaires pour le style&#10;    private JPanel createSectionPanel(String title) {&#10;        JPanel section = new JPanel(new BorderLayout());&#10;        section.setBackground(Color.WHITE);&#10;        section.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(224, 224, 224), 1),&#10;            BorderFactory.createEmptyBorder(20, 20, 20, 20)&#10;        ));&#10;        section.setMaximumSize(new Dimension(Integer.MAX_VALUE, section.getPreferredSize().height));&#10;&#10;        // Titre de la section&#10;        JLabel titleLabel = new JLabel(title);&#10;        titleLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 18));&#10;        titleLabel.setForeground(new Color(74, 41, 0));&#10;        titleLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 15, 0));&#10;&#10;        section.add(titleLabel, BorderLayout.NORTH);&#10;        return section;&#10;    }&#10;&#10;    private JTextField createInfoField(String placeholder, String value, boolean readOnly) {&#10;        JTextField field = new JTextField(value);&#10;        field.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        field.setPreferredSize(new Dimension(300, 35));&#10;        field.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),&#10;            BorderFactory.createEmptyBorder(8, 12, 8, 12)&#10;        ));&#10;&#10;        if (readOnly) {&#10;            field.setEditable(false);&#10;            field.setBackground(new Color(248, 249, 250));&#10;        }&#10;&#10;        return field;&#10;    }&#10;&#10;    private void stylePasswordField(JPasswordField field) {&#10;        field.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        field.setPreferredSize(new Dimension(300, 35));&#10;        field.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),&#10;            BorderFactory.createEmptyBorder(8, 12, 8, 12)&#10;        ));&#10;    }&#10;&#10;    private void styleInfoLabel(JLabel label) {&#10;        label.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        label.setForeground(new Color(52, 73, 94));&#10;    }&#10;&#10;    private JButton createActionButton(String text, Color backgroundColor) {&#10;        JButton button = new JButton(text);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        button.setForeground(Color.WHITE);&#10;        button.setBackground(backgroundColor);&#10;        button.setPreferredSize(new Dimension(200, 40));&#10;        button.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));&#10;        button.setFocusPainted(false);&#10;        button.setCursor(new Cursor(Cursor.HAND_CURSOR));&#10;&#10;        // Effet de survol&#10;        button.addMouseListener(new java.awt.event.MouseAdapter() {&#10;            public void mouseEntered(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(backgroundColor.darker());&#10;            }&#10;            public void mouseExited(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(backgroundColor);&#10;            }&#10;        });&#10;&#10;        return button;&#10;    }&#10;&#10;    /**&#10;     * Méthode pour rafraîchir les informations du profil&#10;     */&#10;    public void refreshProfile() {&#10;        if (UserSessionManager.getInstance().isLoggedIn()) {&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;            nomField.setText(currentUser.getNom());&#10;            prenomField.setText(currentUser.getPrenom());&#10;            emailField.setText(currentUser.getEmail());&#10;            loadSubscriptionInfo();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gui_client.panel;&#10;&#10;import entite.Client;&#10;import entite.Abonnement;&#10;import entite.Membre;&#10;import entite.TypeAbonnement;&#10;import service.UserSessionManager;&#10;import service.ClientService;&#10;import gui_client.util.AbonnementSouscription;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class ProfilPanel extends JPanel {&#10;    &#10;    private ClientService clientService;&#10;    private AbonnementSouscription abonnementUtil;&#10;&#10;    private JTextField nomField;&#10;    private JTextField prenomField;&#10;    private JTextField emailField;&#10;    private JPasswordField currentPasswordField;&#10;    private JPasswordField newPasswordField;&#10;    private JPasswordField confirmPasswordField;&#10;&#10;    private JLabel abonnementTypeLabel;&#10;    private JLabel dateDebutLabel;&#10;    private JLabel dateFinLabel;&#10;    private JLabel statutAbonnementLabel;&#10;&#10;    // Table pour l'historique des abonnements&#10;    private JTable historiqueTable;&#10;    private javax.swing.table.DefaultTableModel historiqueTableModel;&#10;&#10;    public ProfilPanel() {&#10;        // Initialiser les services&#10;        clientService = new ClientService();&#10;        abonnementUtil = AbonnementSouscription.getInstance();&#10;&#10;        setLayout(new BorderLayout());&#10;        setBackground(Color.WHITE);&#10;        &#10;        // Vérifier si l'utilisateur est connecté&#10;        if (!UserSessionManager.getInstance().isLoggedIn()) {&#10;            add(createNotLoggedInPanel(), BorderLayout.CENTER);&#10;            return;&#10;        }&#10;&#10;        // Créer l'interface principale&#10;        createMainInterface();&#10;    }&#10;&#10;    private JPanel createNotLoggedInPanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        panel.setBackground(Color.WHITE);&#10;&#10;        JLabel messageLabel = new JLabel(&quot;Veuillez vous connecter pour accéder à votre profil&quot;, SwingConstants.CENTER);&#10;        messageLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 18));&#10;        messageLabel.setForeground(Color.GRAY);&#10;&#10;        panel.add(messageLabel, BorderLayout.CENTER);&#10;        return panel;&#10;    }&#10;&#10;    private void createMainInterface() {&#10;        // Titre principal&#10;        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        titlePanel.setBackground(Color.WHITE);&#10;        titlePanel.setBorder(BorderFactory.createEmptyBorder(20, 30, 10, 30));&#10;&#10;        JLabel titleLabel = new JLabel(&quot;Mon Profil&quot;);&#10;        titleLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 28));&#10;        titleLabel.setForeground(new Color(74, 41, 0));&#10;        titlePanel.add(titleLabel);&#10;&#10;        add(titlePanel, BorderLayout.NORTH);&#10;&#10;        // Contenu principal avec scroll&#10;        JScrollPane scrollPane = new JScrollPane(createContentPanel());&#10;        scrollPane.setBorder(null);&#10;        scrollPane.getVerticalScrollBar().setUnitIncrement(16);&#10;        add(scrollPane, BorderLayout.CENTER);&#10;    }&#10;&#10;    private JPanel createContentPanel() {&#10;        JPanel contentPanel = new JPanel(new GridBagLayout());&#10;        contentPanel.setBackground(Color.WHITE);&#10;        contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 30, 30, 30));&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        gbc.insets = new Insets(10, 0, 10, 0);&#10;&#10;        // Section Informations personnelles&#10;        gbc.gridx = 0;&#10;        gbc.gridy = 0;&#10;        gbc.weightx = 1.0;&#10;        contentPanel.add(createPersonalInfoSection(), gbc);&#10;&#10;        // Section Modification du mot de passe&#10;        gbc.gridy = 1;&#10;        contentPanel.add(createPasswordSection(), gbc);&#10;&#10;        // Section Abonnement&#10;        gbc.gridy = 2;&#10;        contentPanel.add(createSubscriptionSection(), gbc);&#10;&#10;        // Nouvelle section: Historique des abonnements&#10;        gbc.gridy = 3;&#10;        contentPanel.add(createHistoriqueSection(), gbc);&#10;&#10;        return contentPanel;&#10;    }&#10;&#10;    private JPanel createPersonalInfoSection() {&#10;        JPanel section = createSectionPanel(&quot;Informations personnelles&quot;);&#10;&#10;        Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;        // Champs d'information&#10;        nomField = createInfoField(&quot;Nom :&quot;, currentUser.getNom(), true);&#10;        prenomField = createInfoField(&quot;Prénom :&quot;, currentUser.getPrenom(), true);&#10;        emailField = createInfoField(&quot;Email :&quot;, currentUser.getEmail(), true);&#10;&#10;        // Layout des champs&#10;        JPanel fieldsPanel = new JPanel(new GridBagLayout());&#10;        fieldsPanel.setBackground(Color.WHITE);&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 0, 5, 0);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;        // Nom&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        fieldsPanel.add(new JLabel(&quot;Nom :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(nomField, gbc);&#10;&#10;        // Prénom&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Prénom :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(prenomField, gbc);&#10;&#10;        // Email&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Email :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(emailField, gbc);&#10;&#10;        section.add(fieldsPanel, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private JPanel createPasswordSection() {&#10;        JPanel section = createSectionPanel(&quot;Modification du mot de passe&quot;);&#10;&#10;        // Champs de mot de passe&#10;        currentPasswordField = new JPasswordField();&#10;        newPasswordField = new JPasswordField();&#10;        confirmPasswordField = new JPasswordField();&#10;&#10;        stylePasswordField(currentPasswordField);&#10;        stylePasswordField(newPasswordField);&#10;        stylePasswordField(confirmPasswordField);&#10;&#10;        // Layout des champs&#10;        JPanel fieldsPanel = new JPanel(new GridBagLayout());&#10;        fieldsPanel.setBackground(Color.WHITE);&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 0, 5, 0);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;        // Mot de passe actuel&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        fieldsPanel.add(new JLabel(&quot;Mot de passe actuel :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(currentPasswordField, gbc);&#10;&#10;        // Nouveau mot de passe&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Nouveau mot de passe :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(newPasswordField, gbc);&#10;&#10;        // Confirmer mot de passe&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        fieldsPanel.add(new JLabel(&quot;Confirmer mot de passe :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        fieldsPanel.add(confirmPasswordField, gbc);&#10;&#10;        // Bouton de modification&#10;        JButton changePasswordButton = createActionButton(&quot;Modifier le mot de passe&quot;, new Color(52, 152, 219));&#10;        changePasswordButton.addActionListener(e -&gt; handlePasswordChange());&#10;&#10;        gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2; gbc.weightx = 0; gbc.fill = GridBagConstraints.NONE;&#10;        gbc.insets = new Insets(15, 0, 5, 0);&#10;        fieldsPanel.add(changePasswordButton, gbc);&#10;&#10;        section.add(fieldsPanel, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private JPanel createSubscriptionSection() {&#10;        JPanel section = createSectionPanel(&quot;Mon Abonnement&quot;);&#10;&#10;        // Labels pour les informations d'abonnement&#10;        abonnementTypeLabel = new JLabel();&#10;        dateDebutLabel = new JLabel();&#10;        dateFinLabel = new JLabel();&#10;        statutAbonnementLabel = new JLabel();&#10;&#10;        styleInfoLabel(abonnementTypeLabel);&#10;        styleInfoLabel(dateDebutLabel);&#10;        styleInfoLabel(dateFinLabel);&#10;        styleInfoLabel(statutAbonnementLabel);&#10;&#10;        // Charger les informations d'abonnement&#10;        loadSubscriptionInfo();&#10;&#10;        // Layout des informations&#10;        JPanel infoPanel = new JPanel(new GridBagLayout());&#10;        infoPanel.setBackground(Color.WHITE);&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(8, 0, 8, 0);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;&#10;        // Type d'abonnement&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        infoPanel.add(new JLabel(&quot;Type d'abonnement :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(abonnementTypeLabel, gbc);&#10;&#10;        // Date de début&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.weightx = 0;&#10;        infoPanel.add(new JLabel(&quot;Date de début :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(dateDebutLabel, gbc);&#10;&#10;        // Date de fin&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.weightx = 0;&#10;        infoPanel.add(new JLabel(&quot;Date de fin :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(dateFinLabel, gbc);&#10;&#10;        // Statut&#10;        gbc.gridx = 0; gbc.gridy = 3; gbc.weightx = 0;&#10;        infoPanel.add(new JLabel(&quot;Statut :&quot;), gbc);&#10;        gbc.gridx = 1; gbc.weightx = 1.0;&#10;        infoPanel.add(statutAbonnementLabel, gbc);&#10;&#10;        section.add(infoPanel, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private JPanel createHistoriqueSection() {&#10;        JPanel section = createSectionPanel(&quot;Historique des Abonnements&quot;);&#10;&#10;        // Table pour l'historique&#10;        historiqueTableModel = new javax.swing.table.DefaultTableModel(&#10;            new Object [][] {},&#10;            new String [] {&#10;                &quot;Type d'Abonnement&quot;, &quot;Date de Début&quot;, &quot;Date de Fin&quot;, &quot;Statut&quot;&#10;            }&#10;        ) {&#10;            Class[] types = new Class [] {&#10;                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class&#10;            };&#10;            boolean[] canEdit = new boolean [] {&#10;                false, false, false, false&#10;            };&#10;&#10;            public Class getColumnClass(int columnIndex) {&#10;                return types [columnIndex];&#10;            }&#10;&#10;            public boolean isCellEditable(int rowIndex, int columnIndex) {&#10;                return canEdit [columnIndex];&#10;            }&#10;        };&#10;        historiqueTable = new JTable(historiqueTableModel);&#10;        historiqueTable.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        historiqueTable.setRowHeight(30);&#10;        historiqueTable.setSelectionBackground(new Color(52, 152, 219));&#10;        historiqueTable.setSelectionForeground(Color.WHITE);&#10;        historiqueTable.setDefaultEditor(Object.class, null); // Rendre les cellules non éditables&#10;&#10;        // Charger les données de l'historique&#10;        loadHistoriqueData();&#10;&#10;        JScrollPane tableScrollPane = new JScrollPane(historiqueTable);&#10;        tableScrollPane.setBorder(BorderFactory.createEmptyBorder());&#10;        tableScrollPane.setPreferredSize(new Dimension(0, 150));&#10;&#10;        section.add(tableScrollPane, BorderLayout.CENTER);&#10;        return section;&#10;    }&#10;&#10;    private void loadSubscriptionInfo() {&#10;        try {&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;            // Récupérer le membre via l'utilitaire&#10;            Membre membre = abonnementUtil.getMembreByClientId(currentUser.getId());&#10;&#10;            if (membre != null) {&#10;                // Récupérer l'abonnement actif via l'utilitaire&#10;                Abonnement abonnementActif = abonnementUtil.getAbonnementActif(membre);&#10;&#10;                if (abonnementActif != null) {&#10;                    // Afficher les informations d'abonnement&#10;                    TypeAbonnement typeAbonnement = abonnementActif.getTypeAbonnement();&#10;                    abonnementTypeLabel.setText(typeAbonnement != null ? typeAbonnement.getLibelle() : &quot;Non défini&quot;);&#10;&#10;                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;                    dateDebutLabel.setText(abonnementActif.getDateDebut().format(formatter));&#10;                    dateFinLabel.setText(abonnementActif.getDateFin().format(formatter));&#10;&#10;                    // Vérifier si l'abonnement est encore actif&#10;                    if (abonnementUtil.isAbonnementActif(abonnementActif)) {&#10;                        long joursRestants = abonnementUtil.getJoursRestants(abonnementActif);&#10;                        statutAbonnementLabel.setText(&quot;Actif (&quot; + joursRestants + &quot; jour(s) restant(s))&quot;);&#10;                        &#10;                        if (joursRestants &lt;= 7) {&#10;                            statutAbonnementLabel.setForeground(new Color(255, 165, 0)); // Orange pour renouvellement proche&#10;                        } else {&#10;                            statutAbonnementLabel.setForeground(new Color(46, 204, 113)); // Vert pour actif&#10;                        }&#10;                    } else {&#10;                        statutAbonnementLabel.setText(&quot;Expiré&quot;);&#10;                        statutAbonnementLabel.setForeground(new Color(231, 76, 60));&#10;                    }&#10;                } else {&#10;                    // Aucun abonnement actif&#10;                    abonnementTypeLabel.setText(&quot;Aucun abonnement actif&quot;);&#10;                    dateDebutLabel.setText(&quot;-&quot;);&#10;                    dateFinLabel.setText(&quot;-&quot;);&#10;                    statutAbonnementLabel.setText(&quot;Inactif&quot;);&#10;                    statutAbonnementLabel.setForeground(new Color(149, 165, 166));&#10;                }&#10;            } else {&#10;                // Client non encore membre&#10;                abonnementTypeLabel.setText(&quot;Vous n'êtes pas encore membre&quot;);&#10;                dateDebutLabel.setText(&quot;-&quot;);&#10;                dateFinLabel.setText(&quot;-&quot;);&#10;                statutAbonnementLabel.setText(&quot;Non membre&quot;);&#10;                statutAbonnementLabel.setForeground(new Color(149, 165, 166));&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            abonnementTypeLabel.setText(&quot;Erreur lors du chargement&quot;);&#10;            dateDebutLabel.setText(&quot;-&quot;);&#10;            dateFinLabel.setText(&quot;-&quot;);&#10;            statutAbonnementLabel.setText(&quot;Erreur&quot;);&#10;            statutAbonnementLabel.setForeground(new Color(231, 76, 60));&#10;        }&#10;    }&#10;&#10;    private void loadHistoriqueData() {&#10;        try {&#10;            historiqueTableModel.setRowCount(0); // Réinitialiser les données de la table&#10;&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;            // Récupérer le membre via l'utilitaire&#10;            Membre membre = abonnementUtil.getMembreByClientId(currentUser.getId());&#10;&#10;            if (membre != null) {&#10;                // Récupérer l'historique via l'utilitaire&#10;                List&lt;Abonnement&gt; abonnements = abonnementUtil.getHistoriqueAbonnements(membre);&#10;&#10;                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;                for (Abonnement abonnement : abonnements) {&#10;                    // Déterminer le statut avec plus de détails&#10;                    String statut;&#10;                    if (abonnementUtil.isAbonnementActif(abonnement)) {&#10;                        long joursRestants = abonnementUtil.getJoursRestants(abonnement);&#10;                        if (joursRestants &lt;= 7) {&#10;                            statut = &quot;Actif (expire bientôt)&quot;;&#10;                        } else {&#10;                            statut = &quot;Actif&quot;;&#10;                        }&#10;                    } else {&#10;                        statut = &quot;Expiré&quot;;&#10;                    }&#10;                    &#10;                    // Ajouter une ligne pour chaque abonnement&#10;                    historiqueTableModel.addRow(new Object[] {&#10;                        abonnement.getTypeAbonnement() != null ? abonnement.getTypeAbonnement().getLibelle() : &quot;Non défini&quot;,&#10;                        abonnement.getDateDebut().format(formatter),&#10;                        abonnement.getDateFin().format(formatter),&#10;                        statut&#10;                    });&#10;                }&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void handlePasswordChange() {&#10;        try {&#10;            String currentPassword = new String(currentPasswordField.getPassword());&#10;            String newPassword = new String(newPasswordField.getPassword());&#10;            String confirmPassword = new String(confirmPasswordField.getPassword());&#10;&#10;            // Validations&#10;            if (currentPassword.isEmpty() || newPassword.isEmpty() || confirmPassword.isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Veuillez remplir tous les champs.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;&#10;            // Vérifier le mot de passe actuel&#10;            if (!currentUser.getMotDePasse().equals(currentPassword)) {&#10;                JOptionPane.showMessageDialog(this, &quot;Le mot de passe actuel est incorrect.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Vérifier que les nouveaux mots de passe correspondent&#10;            if (!newPassword.equals(confirmPassword)) {&#10;                JOptionPane.showMessageDialog(this, &quot;Les nouveaux mots de passe ne correspondent pas.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Vérifier la longueur du nouveau mot de passe&#10;            if (newPassword.length() &lt; 6) {&#10;                JOptionPane.showMessageDialog(this, &quot;Le nouveau mot de passe doit contenir au moins 6 caractères.&quot;, &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Mettre à jour le mot de passe&#10;            currentUser.setMotDePasse(newPassword);&#10;            clientService.modifier(currentUser);&#10;&#10;            // Réinitialiser les champs&#10;            currentPasswordField.setText(&quot;&quot;);&#10;            newPasswordField.setText(&quot;&quot;);&#10;            confirmPasswordField.setText(&quot;&quot;);&#10;&#10;            JOptionPane.showMessageDialog(this, &quot;Mot de passe modifié avec succès !&quot;, &quot;Succès&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            JOptionPane.showMessageDialog(this, &quot;Erreur lors de la modification du mot de passe : &quot; + e.getMessage(), &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    // Méthodes utilitaires pour le style&#10;    private JPanel createSectionPanel(String title) {&#10;        JPanel section = new JPanel(new BorderLayout());&#10;        section.setBackground(Color.WHITE);&#10;        section.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(224, 224, 224), 1),&#10;            BorderFactory.createEmptyBorder(20, 20, 20, 20)&#10;        ));&#10;        section.setMaximumSize(new Dimension(Integer.MAX_VALUE, section.getPreferredSize().height));&#10;&#10;        // Titre de la section&#10;        JLabel titleLabel = new JLabel(title);&#10;        titleLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 18));&#10;        titleLabel.setForeground(new Color(74, 41, 0));&#10;        titleLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 15, 0));&#10;&#10;        section.add(titleLabel, BorderLayout.NORTH);&#10;        return section;&#10;    }&#10;&#10;    private JTextField createInfoField(String placeholder, String value, boolean readOnly) {&#10;        JTextField field = new JTextField(value);&#10;        field.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        field.setPreferredSize(new Dimension(300, 35));&#10;        field.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),&#10;            BorderFactory.createEmptyBorder(8, 12, 8, 12)&#10;        ));&#10;&#10;        if (readOnly) {&#10;            field.setEditable(false);&#10;            field.setBackground(new Color(248, 249, 250));&#10;        }&#10;&#10;        return field;&#10;    }&#10;&#10;    private void stylePasswordField(JPasswordField field) {&#10;        field.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        field.setPreferredSize(new Dimension(300, 35));&#10;        field.setBorder(BorderFactory.createCompoundBorder(&#10;            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),&#10;            BorderFactory.createEmptyBorder(8, 12, 8, 12)&#10;        ));&#10;    }&#10;&#10;    private void styleInfoLabel(JLabel label) {&#10;        label.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        label.setForeground(new Color(52, 73, 94));&#10;    }&#10;&#10;    private JButton createActionButton(String text, Color backgroundColor) {&#10;        JButton button = new JButton(text);&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        button.setForeground(Color.WHITE);&#10;        button.setBackground(backgroundColor);&#10;        button.setPreferredSize(new Dimension(200, 40));&#10;        button.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));&#10;        button.setFocusPainted(false);&#10;        button.setCursor(new Cursor(Cursor.HAND_CURSOR));&#10;&#10;        // Effet de survol&#10;        button.addMouseListener(new java.awt.event.MouseAdapter() {&#10;            public void mouseEntered(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(backgroundColor.darker());&#10;            }&#10;            public void mouseExited(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(backgroundColor);&#10;            }&#10;        });&#10;&#10;        return button;&#10;    }&#10;&#10;    /**&#10;     * Méthode pour rafraîchir les informations du profil&#10;     */&#10;    public void refreshProfile() {&#10;        if (UserSessionManager.getInstance().isLoggedIn()) {&#10;            Client currentUser = UserSessionManager.getInstance().getCurrentUser();&#10;            nomField.setText(currentUser.getNom());&#10;            prenomField.setText(currentUser.getPrenom());&#10;            emailField.setText(currentUser.getEmail());&#10;            loadSubscriptionInfo();&#10;            loadHistoriqueData();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/gui_client/util/AbonnementSouscription.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/gui_client/util/AbonnementSouscription.java" />
              <option name="originalContent" value="package gui_client.util;&#10;&#10;public class AbonnementSouscription {&#10;}&#10;" />
              <option name="updatedContent" value="package gui_client.util;&#10;&#10;import entite.*;&#10;import service.*;&#10;import javax.swing.*;&#10;import java.time.LocalDateTime;&#10;import java.time.temporal.ChronoUnit;&#10;import java.util.List;&#10;&#10;/**&#10; * Classe utilitaire pour gérer la logique de souscription aux abonnements&#10; * Centralise toutes les règles métier et validations concernant les abonnements&#10; */&#10;public class AbonnementSouscription {&#10;    &#10;    private static AbonnementSouscription instance;&#10;    &#10;    // Services&#10;    private AbonnementService abonnementService;&#10;    private PaiementService paiementService;&#10;    private MoyenDePaiementService moyenDePaiementService;&#10;    private MembreService membreService;&#10;    &#10;    private AbonnementSouscription() {&#10;        this.abonnementService = new AbonnementService();&#10;        this.paiementService = new PaiementService();&#10;        this.moyenDePaiementService = new MoyenDePaiementService();&#10;        this.membreService = new MembreService();&#10;    }&#10;    &#10;    public static AbonnementSouscription getInstance() {&#10;        if (instance == null) {&#10;            instance = new AbonnementSouscription();&#10;        }&#10;        return instance;&#10;    }&#10;    &#10;    /**&#10;     * Vérifie si un membre peut souscrire à un nouvel abonnement&#10;     * @param membre Le membre qui souhaite souscrire&#10;     * @return ResultatValidation contenant le résultat et les détails&#10;     */&#10;    public ResultatValidation peutSouscrire(Membre membre) {&#10;        try {&#10;            // Vérifier s'il y a un abonnement actif&#10;            Abonnement abonnementActif = abonnementService.getAbonnementActif(membre.getId());&#10;            &#10;            if (abonnementActif == null) {&#10;                return new ResultatValidation(true, &quot;Aucun abonnement actif. Souscription autorisée.&quot;);&#10;            }&#10;            &#10;            // Calculer les jours restants&#10;            long joursRestants = ChronoUnit.DAYS.between(LocalDateTime.now(), abonnementActif.getDateFin());&#10;            &#10;            if (joursRestants &lt;= 0) {&#10;                return new ResultatValidation(true, &quot;Abonnement expiré. Souscription autorisée.&quot;);&#10;            }&#10;            &#10;            if (joursRestants &lt;= 7) {&#10;                return new ResultatValidation(true, &#10;                    &quot;Renouvellement autorisé (il vous reste &quot; + joursRestants + &quot; jour(s)).&quot;,&#10;                    abonnementActif, true);&#10;            }&#10;            &#10;            return new ResultatValidation(false, &#10;                &quot;Vous avez déjà un abonnement actif qui expire dans &quot; + joursRestants + &quot; jour(s).&quot;,&#10;                abonnementActif, false);&#10;                &#10;        } catch (Exception e) {&#10;            return new ResultatValidation(false, &quot;Erreur lors de la vérification : &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Effectue le processus complet de souscription à un abonnement&#10;     * @param membre Le membre souscripteur&#10;     * @param typeAbonnement Le type d'abonnement choisi&#10;     * @param moyenPaiement Le moyen de paiement sélectionné&#10;     * @return ResultatSouscription contenant le résultat de l'opération&#10;     */&#10;    public ResultatSouscription souscrireAbonnement(Membre membre, TypeAbonnement typeAbonnement, MoyenDePaiement moyenPaiement) {&#10;        try {&#10;            // Vérifier si la souscription est autorisée&#10;            ResultatValidation validation = peutSouscrire(membre);&#10;            &#10;            if (!validation.isAutorise() &amp;&amp; !validation.isRenouvellementProche()) {&#10;                return new ResultatSouscription(false, validation.getMessage());&#10;            }&#10;            &#10;            // Date actuelle pour le paiement&#10;            LocalDateTime datePaiement = LocalDateTime.now();&#10;            &#10;            // Créer le paiement&#10;            Paiement paiement = new Paiement(datePaiement, typeAbonnement.getMontant(), moyenPaiement);&#10;            paiement = paiementService.ajouter(paiement);&#10;            &#10;            // Calculer les dates d'abonnement&#10;            LocalDateTime dateDebut, dateFin;&#10;            &#10;            if (validation.isRenouvellementProche() &amp;&amp; validation.getAbonnementActif() != null) {&#10;                // Renouvellement : commencer à la fin de l'abonnement actuel&#10;                dateDebut = validation.getAbonnementActif().getDateFin();&#10;                dateFin = dateDebut.plusMonths(1);&#10;            } else {&#10;                // Nouvel abonnement : commencer maintenant&#10;                dateDebut = datePaiement;&#10;                dateFin = dateDebut.plusMonths(1);&#10;            }&#10;            &#10;            // Créer l'abonnement&#10;            Abonnement nouvelAbonnement = new Abonnement(dateDebut, dateFin, typeAbonnement, paiement, membre);&#10;            nouvelAbonnement = abonnementService.ajouter(nouvelAbonnement);&#10;            &#10;            String message = validation.isRenouvellementProche() ? &#10;                &quot;Renouvellement effectué avec succès !&quot; : &#10;                &quot;Souscription effectuée avec succès !&quot;;&#10;                &#10;            return new ResultatSouscription(true, message, nouvelAbonnement, paiement);&#10;            &#10;        } catch (Exception e) {&#10;            return new ResultatSouscription(false, &quot;Erreur lors de la souscription : &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Récupère la liste des moyens de paiement disponibles&#10;     * @return Liste des moyens de paiement&#10;     */&#10;    public List&lt;MoyenDePaiement&gt; getMoyensPaiementDisponibles() {&#10;        try {&#10;            return moyenDePaiementService.listerTous();&#10;        } catch (Exception e) {&#10;            return List.of();&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Récupère l'historique des abonnements d'un membre&#10;     * @param membre Le membre&#10;     * @return Liste des abonnements du membre (triés par date décroissante)&#10;     */&#10;    public List&lt;Abonnement&gt; getHistoriqueAbonnements(Membre membre) {&#10;        try {&#10;            return abonnementService.getAbonnementsByMembre(membre.getId());&#10;        } catch (Exception e) {&#10;            return List.of();&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Récupère l'abonnement actuellement actif d'un membre&#10;     * @param membre Le membre&#10;     * @return L'abonnement actif ou null si aucun&#10;     */&#10;    public Abonnement getAbonnementActif(Membre membre) {&#10;        try {&#10;            return abonnementService.getAbonnementActif(membre.getId());&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Vérifie si un abonnement est encore actif&#10;     * @param abonnement L'abonnement à vérifier&#10;     * @return true si l'abonnement est actif, false sinon&#10;     */&#10;    public boolean isAbonnementActif(Abonnement abonnement) {&#10;        if (abonnement == null) return false;&#10;        return abonnement.getDateFin().isAfter(LocalDateTime.now());&#10;    }&#10;    &#10;    /**&#10;     * Calcule le nombre de jours restants pour un abonnement&#10;     * @param abonnement L'abonnement&#10;     * @return Nombre de jours restants (peut être négatif si expiré)&#10;     */&#10;    public long getJoursRestants(Abonnement abonnement) {&#10;        if (abonnement == null) return 0;&#10;        return ChronoUnit.DAYS.between(LocalDateTime.now(), abonnement.getDateFin());&#10;    }&#10;    &#10;    /**&#10;     * Récupère le membre associé à un client&#10;     * @param clientId ID du client&#10;     * @return Le membre ou null si pas trouvé&#10;     */&#10;    public Membre getMembreByClientId(Integer clientId) {&#10;        try {&#10;            return membreService.getMembreByClientId(clientId);&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Affiche une boîte de dialogue de confirmation pour la souscription&#10;     * @param parent Composant parent&#10;     * @param typeAbonnement Type d'abonnement&#10;     * @param validation Résultat de la validation&#10;     * @return true si l'utilisateur confirme, false sinon&#10;     */&#10;    public boolean confirmerSouscription(java.awt.Component parent, TypeAbonnement typeAbonnement, ResultatValidation validation) {&#10;        String message;&#10;        int messageType;&#10;        &#10;        if (validation.isRenouvellementProche()) {&#10;            message = &quot;Renouvellement d'abonnement\n\n&quot; +&#10;                     validation.getMessage() + &quot;\n\n&quot; +&#10;                     &quot;Nouveau type : &quot; + typeAbonnement.getLibelle() + &quot;\n&quot; +&#10;                     &quot;Montant : &quot; + typeAbonnement.getMontant() + &quot; FCFA\n\n&quot; +&#10;                     &quot;Le nouvel abonnement commencera à la fin du précédent.\n&quot; +&#10;                     &quot;Confirmer le renouvellement ?&quot;;&#10;            messageType = JOptionPane.QUESTION_MESSAGE;&#10;        } else {&#10;            message = &quot;Souscription à un abonnement\n\n&quot; +&#10;                     &quot;Type : &quot; + typeAbonnement.getLibelle() + &quot;\n&quot; +&#10;                     &quot;Montant : &quot; + typeAbonnement.getMontant() + &quot; FCFA\n\n&quot; +&#10;                     &quot;Confirmer la souscription ?&quot;;&#10;            messageType = JOptionPane.QUESTION_MESSAGE;&#10;        }&#10;        &#10;        int result = JOptionPane.showConfirmDialog(&#10;            parent,&#10;            message,&#10;            &quot;Confirmation&quot;,&#10;            JOptionPane.YES_NO_OPTION,&#10;            messageType&#10;        );&#10;        &#10;        return result == JOptionPane.YES_OPTION;&#10;    }&#10;    &#10;    /**&#10;     * Affiche le résultat d'une souscription&#10;     * @param parent Composant parent&#10;     * @param resultat Résultat de la souscription&#10;     */&#10;    public void afficherResultatSouscription(java.awt.Component parent, ResultatSouscription resultat) {&#10;        if (resultat.isSucces()) {&#10;            String message = resultat.getMessage() + &quot;\n\n&quot;;&#10;            &#10;            if (resultat.getAbonnement() != null) {&#10;                message += &quot;Détails de l'abonnement :\n&quot; +&#10;                          &quot;Type : &quot; + resultat.getAbonnement().getTypeAbonnement().getLibelle() + &quot;\n&quot; +&#10;                          &quot;Date début : &quot; + resultat.getAbonnement().getDateDebut().toLocalDate() + &quot;\n&quot; +&#10;                          &quot;Date fin : &quot; + resultat.getAbonnement().getDateFin().toLocalDate() + &quot;\n&quot;;&#10;                          &#10;                if (resultat.getPaiement() != null) {&#10;                    message += &quot;Montant payé : &quot; + resultat.getPaiement().getMontant() + &quot; FCFA\n&quot; +&#10;                              &quot;Moyen de paiement : &quot; + resultat.getPaiement().getMoyenDePaiement().getLibelle();&#10;                }&#10;            }&#10;            &#10;            JOptionPane.showMessageDialog(parent, message, &quot;Succès&quot;, JOptionPane.INFORMATION_MESSAGE);&#10;        } else {&#10;            JOptionPane.showMessageDialog(parent, resultat.getMessage(), &quot;Erreur&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    // Classes internes pour les résultats&#10;    public static class ResultatValidation {&#10;        private boolean autorise;&#10;        private String message;&#10;        private Abonnement abonnementActif;&#10;        private boolean renouvellementProche;&#10;        &#10;        public ResultatValidation(boolean autorise, String message) {&#10;            this.autorise = autorise;&#10;            this.message = message;&#10;            this.renouvellementProche = false;&#10;        }&#10;        &#10;        public ResultatValidation(boolean autorise, String message, Abonnement abonnementActif, boolean renouvellementProche) {&#10;            this.autorise = autorise;&#10;            this.message = message;&#10;            this.abonnementActif = abonnementActif;&#10;            this.renouvellementProche = renouvellementProche;&#10;        }&#10;        &#10;        // Getters&#10;        public boolean isAutorise() { return autorise; }&#10;        public String getMessage() { return message; }&#10;        public Abonnement getAbonnementActif() { return abonnementActif; }&#10;        public boolean isRenouvellementProche() { return renouvellementProche; }&#10;    }&#10;    &#10;    public static class ResultatSouscription {&#10;        private boolean succes;&#10;        private String message;&#10;        private Abonnement abonnement;&#10;        private Paiement paiement;&#10;        &#10;        public ResultatSouscription(boolean succes, String message) {&#10;            this.succes = succes;&#10;            this.message = message;&#10;        }&#10;        &#10;        public ResultatSouscription(boolean succes, String message, Abonnement abonnement, Paiement paiement) {&#10;            this.succes = succes;&#10;            this.message = message;&#10;            this.abonnement = abonnement;&#10;            this.paiement = paiement;&#10;        }&#10;        &#10;        // Getters&#10;        public boolean isSucces() { return succes; }&#10;        public String getMessage() { return message; }&#10;        public Abonnement getAbonnement() { return abonnement; }&#10;        public Paiement getPaiement() { return paiement; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/salle_gym/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/salle_gym/Main.java" />
              <option name="originalContent" value="package salle_gym;&#10;&#10;import entite.*;&#10;import gui_admin.AdminDashboard;&#10;import gui_client.ClientDashboard;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        // Lancer l'interface graphique dans le thread EDT&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            try {&#10;                // Utiliser le Look and Feel par défaut de Java (Metal) au lieu du système&#10;                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());&#10;&#10;                // Ou encore mieux, utiliser Nimbus si disponible&#10;                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {&#10;                    if (&quot;Nimbus&quot;.equals(info.getName())) {&#10;                        UIManager.setLookAndFeel(info.getClassName());&#10;                        break;&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;&#10;            // Créer un menu de sélection&#10;            showInterfaceSelector();&#10;        });&#10;    }&#10;&#10;    public static void showInterfaceSelector() {&#10;        JFrame selectorFrame = new JFrame(&quot;FITPlus+ - Sélection d'interface&quot;);&#10;        selectorFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        selectorFrame.setSize(400, 300);&#10;        selectorFrame.setLocationRelativeTo(null);&#10;        selectorFrame.setLayout(new BorderLayout());&#10;&#10;        // Logo et titre&#10;        JLabel titleLabel = new JLabel(&quot;FITPlus+&quot;, SwingConstants.CENTER);&#10;        titleLabel.setFont(new Font(&quot;SansSerif&quot;, Font.BOLD, 32));&#10;        titleLabel.setForeground(new Color(74, 41, 0));&#10;        titleLabel.setBorder(BorderFactory.createEmptyBorder(30, 0, 20, 0));&#10;&#10;        JLabel subtitleLabel = new JLabel(&quot;Choisissez votre interface&quot;, SwingConstants.CENTER);&#10;        subtitleLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        subtitleLabel.setForeground(Color.GRAY);&#10;&#10;        JPanel headerPanel = new JPanel(new GridLayout(2, 1));&#10;        headerPanel.setBackground(Color.WHITE);&#10;        headerPanel.add(titleLabel);&#10;        headerPanel.add(subtitleLabel);&#10;&#10;        // Boutons&#10;        JPanel buttonPanel = new JPanel(new GridLayout(2, 1, 0, 20));&#10;        buttonPanel.setBackground(Color.WHITE);&#10;        buttonPanel.setBorder(BorderFactory.createEmptyBorder(40, 60, 40, 60));&#10;&#10;        JButton adminButton = new JButton(&quot;Interface Admin&quot;);&#10;        JButton clientButton = new JButton(&quot;Interface Client&quot;);&#10;&#10;        styleButton(adminButton, new Color(52, 73, 94));&#10;        styleButton(clientButton, new Color(46, 204, 113));&#10;&#10;        adminButton.addActionListener(e -&gt; {&#10;            selectorFrame.dispose();&#10;            showAdminInterface();&#10;        });&#10;&#10;        clientButton.addActionListener(e -&gt; {&#10;            selectorFrame.dispose();&#10;            showClientInterface();&#10;        });&#10;&#10;        buttonPanel.add(adminButton);&#10;        buttonPanel.add(clientButton);&#10;&#10;        selectorFrame.add(headerPanel, BorderLayout.NORTH);&#10;        selectorFrame.add(buttonPanel, BorderLayout.CENTER);&#10;        selectorFrame.setVisible(true);&#10;    }&#10;&#10;    private static void styleButton(JButton button, Color color) {&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 16));&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));&#10;        button.setCursor(new Cursor(Cursor.HAND_CURSOR));&#10;&#10;        button.addMouseListener(new java.awt.event.MouseAdapter() {&#10;            @Override&#10;            public void mouseEntered(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(color.darker());&#10;            }&#10;&#10;            @Override&#10;            public void mouseExited(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(color);&#10;            }&#10;        });&#10;    }&#10;&#10;    private static void showAdminInterface() {&#10;        // Ouvrir directement l'interface admin sans authentification&#10;        AdminDashboard dashboard = new AdminDashboard();&#10;        dashboard.setVisible(true);&#10;    }&#10;&#10;    private static void showClientInterface() {&#10;        // Ouvrir directement l'interface client&#10;        ClientDashboard clientDashboard = new ClientDashboard();&#10;        clientDashboard.setVisible(true);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package salle_gym;&#10;&#10;import entite.*;&#10;import gui_admin.AdminDashboard;&#10;import gui_client.ClientDashboard;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        // Lancer l'interface graphique dans le thread EDT&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            // Optionnel : utiliser le Look and Feel du système (Windows, macOS, etc.)&#10;            // Commenter les lignes ci-dessous si vous voulez le style Java par défaut&#10;            /*&#10;            try {&#10;                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelLookAndFeel());&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;            */&#10;&#10;            // Créer un menu de sélection&#10;            showInterfaceSelector();&#10;        });&#10;    }&#10;&#10;    public static void showInterfaceSelector() {&#10;        JFrame selectorFrame = new JFrame(&quot;FITPlus+ - Sélection d'interface&quot;);&#10;        selectorFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        selectorFrame.setSize(400, 300);&#10;        selectorFrame.setLocationRelativeTo(null);&#10;        selectorFrame.setLayout(new BorderLayout());&#10;&#10;        // Logo et titre&#10;        JLabel titleLabel = new JLabel(&quot;FITPlus+&quot;, SwingConstants.CENTER);&#10;        titleLabel.setFont(new Font(&quot;SansSerif&quot;, Font.BOLD, 32));&#10;        titleLabel.setForeground(new Color(74, 41, 0));&#10;        titleLabel.setBorder(BorderFactory.createEmptyBorder(30, 0, 20, 0));&#10;&#10;        JLabel subtitleLabel = new JLabel(&quot;Choisissez votre interface&quot;, SwingConstants.CENTER);&#10;        subtitleLabel.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 16));&#10;        subtitleLabel.setForeground(Color.GRAY);&#10;&#10;        JPanel headerPanel = new JPanel(new GridLayout(2, 1));&#10;        headerPanel.setBackground(Color.WHITE);&#10;        headerPanel.add(titleLabel);&#10;        headerPanel.add(subtitleLabel);&#10;&#10;        // Boutons&#10;        JPanel buttonPanel = new JPanel(new GridLayout(2, 1, 0, 20));&#10;        buttonPanel.setBackground(Color.WHITE);&#10;        buttonPanel.setBorder(BorderFactory.createEmptyBorder(40, 60, 40, 60));&#10;&#10;        JButton adminButton = new JButton(&quot;Interface Admin&quot;);&#10;        JButton clientButton = new JButton(&quot;Interface Client&quot;);&#10;&#10;        styleButton(adminButton, new Color(52, 73, 94));&#10;        styleButton(clientButton, new Color(46, 204, 113));&#10;&#10;        adminButton.addActionListener(e -&gt; {&#10;            selectorFrame.dispose();&#10;            showAdminInterface();&#10;        });&#10;&#10;        clientButton.addActionListener(e -&gt; {&#10;            selectorFrame.dispose();&#10;            showClientInterface();&#10;        });&#10;&#10;        buttonPanel.add(adminButton);&#10;        buttonPanel.add(clientButton);&#10;&#10;        selectorFrame.add(headerPanel, BorderLayout.NORTH);&#10;        selectorFrame.add(buttonPanel, BorderLayout.CENTER);&#10;        selectorFrame.setVisible(true);&#10;    }&#10;&#10;    private static void styleButton(JButton button, Color color) {&#10;        button.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 16));&#10;        button.setBackground(color);&#10;        button.setForeground(Color.WHITE);&#10;        button.setFocusPainted(false);&#10;        button.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));&#10;        button.setCursor(new Cursor(Cursor.HAND_CURSOR));&#10;&#10;        button.addMouseListener(new java.awt.event.MouseAdapter() {&#10;            @Override&#10;            public void mouseEntered(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(color.darker());&#10;            }&#10;&#10;            @Override&#10;            public void mouseExited(java.awt.event.MouseEvent evt) {&#10;                button.setBackground(color);&#10;            }&#10;        });&#10;    }&#10;&#10;    private static void showAdminInterface() {&#10;        // Ouvrir directement l'interface admin sans authentification&#10;        AdminDashboard dashboard = new AdminDashboard();&#10;        dashboard.setVisible(true);&#10;    }&#10;&#10;    private static void showClientInterface() {&#10;        // Ouvrir directement l'interface client&#10;        ClientDashboard clientDashboard = new ClientDashboard();&#10;        clientDashboard.setVisible(true);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/service/AbonnementService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/AbonnementService.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package service;&#10;&#10;import dao.AbonnementDao;&#10;import entite.Abonnement;&#10;import java.util.List;&#10;&#10;/**&#10; *&#10; * @author TCHAMIE&#10; */&#10;public class AbonnementService extends GenericService&lt;entite.Abonnement, Integer&gt;{&#10;    public AbonnementService(){&#10;        super(new AbonnementDao());&#10;    }&#10;&#10;    private AbonnementDao dao = new AbonnementDao();&#10;&#10;&#10;    @Override&#10;    public List&lt;Abonnement&gt; listerTous() {&#10;        return dao.listerTous();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package service;&#10;&#10;import dao.AbonnementDao;&#10;import entite.Abonnement;&#10;import java.util.List;&#10;&#10;/**&#10; *&#10; * @author TCHAMIE&#10; */&#10;public class AbonnementService extends GenericService&lt;entite.Abonnement, Integer&gt;{&#10;    public AbonnementService(){&#10;        super(new AbonnementDao());&#10;    }&#10;&#10;    private AbonnementDao dao = new AbonnementDao();&#10;&#10;&#10;    @Override&#10;    public List&lt;Abonnement&gt; listerTous() {&#10;        return dao.listerTous();&#10;    }&#10;    &#10;    /**&#10;     * Récupère tous les abonnements d'un membre&#10;     * @param membreId ID du membre&#10;     * @return Liste des abonnements du membre&#10;     */&#10;    public List&lt;Abonnement&gt; getAbonnementsByMembre(Integer membreId) {&#10;        return dao.getAbonnementsByMembre(membreId);&#10;    }&#10;    &#10;    /**&#10;     * Récupère l'abonnement actif d'un membre&#10;     * @param membreId ID du membre&#10;     * @return Abonnement actif ou null si aucun&#10;     */&#10;    public Abonnement getAbonnementActif(Integer membreId) {&#10;        return dao.getAbonnementActif(membreId);&#10;    }&#10;    &#10;    /**&#10;     * Vérifie le nombre d'abonnements actifs pour un membre&#10;     * @param membreId ID du membre&#10;     * @return Nombre d'abonnements actifs&#10;     */&#10;    public long countAbonnementsActifs(Integer membreId) {&#10;        return dao.countAbonnementsActifs(membreId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/service/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/AuthService.java" />
              <option name="originalContent" value="package service;&#10;&#10;import dao.ClientDao;&#10;import java.time.LocalDateTime;&#10;&#10;public class AuthService {&#10;&#10;    private static AuthService instance;&#10;    private ClientDao clientDao;&#10;&#10;    private AuthService() {&#10;        clientDao = new ClientDao();&#10;    }&#10;&#10;    public static AuthService getInstance() {&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;    public LoginResult authenticate(String email, String password) {&#10;        try {&#10;            // Utiliser JPA au lieu de JDBC&#10;            Client client = clientDao.findByEmailJPA(email);&#10;&#10;            if (client == null) {&#10;                return new LoginResult(false, &quot;EMAIL_NOT_FOUND&quot;, null);&#10;            }&#10;&#10;            if (!password.equals(client.getMotDePasse())) {&#10;                return new LoginResult(false, &quot;WRONG_PASSWORD&quot;, null);&#10;            }&#10;&#10;&#10;        } catch (RuntimeException e) {&#10;            System.err.println(&quot;Erreur d'authentification: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;&#10;            // Vérifier si l'erreur est liée à la base de données&#10;            Throwable cause = e.getCause();&#10;            if (cause instanceof SQLException) {&#10;                SQLException sqlEx = (SQLException) cause;&#10;                System.err.println(&quot;Erreur SQL: &quot; + sqlEx.getMessage() + &quot;, Code: &quot; + sqlEx.getErrorCode());&#10;&#10;                // Fournir un message d'erreur plus spécifique selon le code d'erreur SQL&#10;                if (sqlEx.getErrorCode() == 0) {&#10;                    return new LoginResult(false, &quot;DATABASE_CONNECTION_ERROR&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1045) {&#10;                    return new LoginResult(false, &quot;DATABASE_ACCESS_DENIED&quot;, null);&#10;                return new LoginResult(false, &quot;DATABASE_ERROR&quot;, null);&#10;            }&#10;&#10;            return new LoginResult(false, &quot;DATABASE_ERROR&quot;, null);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erreur inattendue lors de l'authentification: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return new LoginResult(false, &quot;UNEXPECTED_ERROR&quot;, null);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Inscrit un nouveau client&#10;     */&#10;    public LoginResult register(String nom, String prenom, String email, String password, Date dateNaissance) {&#10;        try {&#10;            // Vérifier si l'email existe déjà (avec JPA)&#10;            Client existingClient = clientDao.findByEmailJPA(email);&#10;            if (existingClient != null) {&#10;                return new LoginResult(false, &quot;EMAIL_ALREADY_EXISTS&quot;, null);&#10;            }&#10;&#10;            // Convertir Date en LocalDateTime&#10;            LocalDateTime dateNaissanceLD = dateNaissance.toInstant()&#10;                .atZone(ZoneId.systemDefault())&#10;                .toLocalDateTime();&#10;&#10;            // Créer le nouveau client&#10;            Client newClient = new Client(nom, prenom, dateNaissanceLD, email, password);&#10;&#10;            // Sauvegarder avec JPA&#10;            Client savedClient = clientDao.saveWithJPA(newClient);&#10;&#10;            return new LoginResult(true, &quot;SUCCESS&quot;, savedClient);&#10;&#10;        } catch (RuntimeException e) {&#10;     * Inscrit un nouveau client&#10;&#10;            // Vérifier si l'erreur est liée à la base de données&#10;            Throwable cause = e.getCause();&#10;            if (cause instanceof SQLException) {&#10;                SQLException sqlEx = (SQLException) cause;&#10;                System.err.println(&quot;Erreur SQL: &quot; + sqlEx.getMessage() + &quot;, Code: &quot; + sqlEx.getErrorCode());&#10;&#10;                // Fournir un message d'erreur plus spécifique selon le code d'erreur SQL&#10;                if (sqlEx.getErrorCode() == 0) {&#10;                    return new LoginResult(false, &quot;DATABASE_CONNECTION_ERROR&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1045) {&#10;                    return new LoginResult(false, &quot;DATABASE_ACCESS_DENIED&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1049) {&#10;                    return new LoginResult(false, &quot;DATABASE_NOT_FOUND&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1062) {&#10;                    return new LoginResult(false, &quot;EMAIL_ALREADY_EXISTS&quot;, null);&#10;                }&#10;            } else if (cause instanceof javax.persistence.PersistenceException) {&#10;                // Gérer les exceptions JPA&#10;                System.err.println(&quot;Erreur JPA: &quot; + cause.getMessage());&#10;&#10;                // Vérifier si c'est une violation de contrainte d'unicité (email déjà existant)&#10;                if (cause.getMessage().contains(&quot;unique&quot;) || cause.getMessage().contains(&quot;duplicate&quot;)) {&#10;                    return new LoginResult(false, &quot;EMAIL_ALREADY_EXISTS&quot;, null);&#10;                }&#10;&#10;            return new LoginResult(true, &quot;SUCCESS&quot;, savedClient);&#10;&#10;    /**&#10;     * Classe pour encapsuler le résultat d'une authentification&#10;     */&#10;    public static class LoginResult {&#10;        private boolean success;&#10;        private String errorCode;&#10;        private Client client;&#10;&#10;        public LoginResult(boolean success, String errorCode, Client client) {&#10;            this.success = success;&#10;            this.errorCode = errorCode;&#10;            this.client = client;&#10;        }&#10;&#10;        public boolean isSuccess() {&#10;            return success;&#10;        }&#10;&#10;        public String getErrorCode() {&#10;            return errorCode;&#10;        }&#10;&#10;        public Client getClient() {&#10;            return client;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package service;&#10;&#10;import dao.ClientDao;&#10;import dao.DemandeInscriptionDao;&#10;import dao.MembreDao;&#10;import entite.Client;&#10;import entite.DemandeInscription;&#10;import entite.Membre;&#10;import java.sql.SQLException;&#10;import java.time.LocalDateTime;&#10;import java.time.ZoneId;&#10;import java.util.Date;&#10;&#10;public class AuthService {&#10;&#10;    private static AuthService instance;&#10;    private ClientDao clientDao;&#10;    private DemandeInscriptionDao demandeInscriptionDao;&#10;    private MembreDao membreDao;&#10;&#10;    private AuthService() {&#10;        clientDao = new ClientDao();&#10;        demandeInscriptionDao = new DemandeInscriptionDao();&#10;        membreDao = new MembreDao();&#10;    }&#10;&#10;    public static AuthService getInstance() {&#10;        if (instance == null) {&#10;            instance = new AuthService();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Authentifie un client avec email et mot de passe&#10;     * Vérifie maintenant que le client est aussi membre approuvé&#10;     */&#10;    public LoginResult authenticate(String email, String password) {&#10;        try {&#10;            // Utiliser JPA au lieu de JDBC&#10;            Client client = clientDao.findByEmailJPA(email);&#10;&#10;            if (client == null) {&#10;                return new LoginResult(false, &quot;EMAIL_NOT_FOUND&quot;, null);&#10;            }&#10;&#10;            if (!password.equals(client.getMotDePasse())) {&#10;                return new LoginResult(false, &quot;WRONG_PASSWORD&quot;, null);&#10;            }&#10;&#10;            // Vérifier si le client est membre (demande approuvée)&#10;            Membre membre = membreDao.trouverPar(&quot;client.id&quot;, client.getId());&#10;            if (membre == null) {&#10;                return new LoginResult(false, &quot;NOT_APPROVED_MEMBER&quot;, null);&#10;            }&#10;&#10;            return new LoginResult(true, &quot;SUCCESS&quot;, client);&#10;&#10;        } catch (RuntimeException e) {&#10;            System.err.println(&quot;Erreur d'authentification: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;&#10;            // Vérifier si l'erreur est liée à la base de données&#10;            Throwable cause = e.getCause();&#10;            if (cause instanceof SQLException) {&#10;                SQLException sqlEx = (SQLException) cause;&#10;                System.err.println(&quot;Erreur SQL: &quot; + sqlEx.getMessage() + &quot;, Code: &quot; + sqlEx.getErrorCode());&#10;&#10;                // Fournir un message d'erreur plus spécifique selon le code d'erreur SQL&#10;                if (sqlEx.getErrorCode() == 0) {&#10;                    return new LoginResult(false, &quot;DATABASE_CONNECTION_ERROR&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1045) {&#10;                    return new LoginResult(false, &quot;DATABASE_ACCESS_DENIED&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1049) {&#10;                    return new LoginResult(false, &quot;DATABASE_NOT_FOUND&quot;, null);&#10;                }&#10;            } else if (cause instanceof javax.persistence.PersistenceException) {&#10;                // Gérer les exceptions JPA&#10;                System.err.println(&quot;Erreur JPA: &quot; + cause.getMessage());&#10;                return new LoginResult(false, &quot;DATABASE_ERROR&quot;, null);&#10;            }&#10;&#10;            return new LoginResult(false, &quot;DATABASE_ERROR&quot;, null);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erreur inattendue lors de l'authentification: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return new LoginResult(false, &quot;UNEXPECTED_ERROR&quot;, null);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Inscrit un nouveau client et crée automatiquement une demande d'inscription&#10;     * Le client ne pourra se connecter qu'après approbation de l'administrateur&#10;     */&#10;    public LoginResult register(String nom, String prenom, String email, String password, Date dateNaissance) {&#10;        try {&#10;            // Vérifier si l'email existe déjà (avec JPA)&#10;            Client existingClient = clientDao.findByEmailJPA(email);&#10;            if (existingClient != null) {&#10;                return new LoginResult(false, &quot;EMAIL_ALREADY_EXISTS&quot;, null);&#10;            }&#10;&#10;            // Convertir Date en LocalDateTime&#10;            LocalDateTime dateNaissanceLD = dateNaissance.toInstant()&#10;                .atZone(ZoneId.systemDefault())&#10;                .toLocalDateTime();&#10;&#10;            // Créer le nouveau client&#10;            Client newClient = new Client(nom, prenom, dateNaissanceLD, email, password);&#10;&#10;            // Sauvegarder avec JPA&#10;            Client savedClient = clientDao.saveWithJPA(newClient);&#10;&#10;            // Créer automatiquement une demande d'inscription&#10;            DemandeInscription demandeInscription = new DemandeInscription();&#10;            demandeInscription.setClient(savedClient);&#10;            demandeInscription.setDateDeDemande(LocalDateTime.now());&#10;            // dateDeTraitement reste null (en attente)&#10;&#10;            // Sauvegarder la demande d'inscription&#10;            demandeInscriptionDao.ajouter(demandeInscription);&#10;&#10;            return new LoginResult(true, &quot;REGISTRATION_PENDING_APPROVAL&quot;, savedClient);&#10;&#10;        } catch (RuntimeException e) {&#10;            System.err.println(&quot;Erreur d'inscription: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;&#10;            // Vérifier si l'erreur est liée à la base de données&#10;            Throwable cause = e.getCause();&#10;            if (cause instanceof SQLException) {&#10;                SQLException sqlEx = (SQLException) cause;&#10;                System.err.println(&quot;Erreur SQL: &quot; + sqlEx.getMessage() + &quot;, Code: &quot; + sqlEx.getErrorCode());&#10;&#10;                // Fournir un message d'erreur plus spécifique selon le code d'erreur SQL&#10;                if (sqlEx.getErrorCode() == 0) {&#10;                    return new LoginResult(false, &quot;DATABASE_CONNECTION_ERROR&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1045) {&#10;                    return new LoginResult(false, &quot;DATABASE_ACCESS_DENIED&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1049) {&#10;                    return new LoginResult(false, &quot;DATABASE_NOT_FOUND&quot;, null);&#10;                } else if (sqlEx.getErrorCode() == 1062) {&#10;                    return new LoginResult(false, &quot;EMAIL_ALREADY_EXISTS&quot;, null);&#10;                }&#10;            } else if (cause instanceof javax.persistence.PersistenceException) {&#10;                // Gérer les exceptions JPA&#10;                System.err.println(&quot;Erreur JPA: &quot; + cause.getMessage());&#10;&#10;                // Vérifier si c'est une violation de contrainte d'unicité (email déjà existant)&#10;                if (cause.getMessage().contains(&quot;unique&quot;) || cause.getMessage().contains(&quot;duplicate&quot;)) {&#10;                    return new LoginResult(false, &quot;EMAIL_ALREADY_EXISTS&quot;, null);&#10;                }&#10;&#10;                return new LoginResult(false, &quot;DATABASE_ERROR&quot;, null);&#10;            }&#10;&#10;            return new LoginResult(false, &quot;DATABASE_ERROR&quot;, null);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Erreur inattendue lors de l'inscription: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return new LoginResult(false, &quot;UNEXPECTED_ERROR&quot;, null);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Classe pour encapsuler le résultat d'une authentification&#10;     */&#10;    public static class LoginResult {&#10;        private boolean success;&#10;        private String errorCode;&#10;        private Client client;&#10;&#10;        public LoginResult(boolean success, String errorCode, Client client) {&#10;            this.success = success;&#10;            this.errorCode = errorCode;&#10;            this.client = client;&#10;        }&#10;&#10;        public boolean isSuccess() {&#10;            return success;&#10;        }&#10;&#10;        public String getErrorCode() {&#10;            return errorCode;&#10;        }&#10;&#10;        public Client getClient() {&#10;            return client;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/service/MembreService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/MembreService.java" />
              <option name="originalContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package service;&#10;&#10;import dao.MembreDao;&#10;import entite.Membre;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; *&#10; * @author TCHAMIE&#10; */&#10;&#10;public class MembreService extends GenericService&lt;entite.Membre, Integer&gt; {&#10;    private MembreDao dao;&#10;&#10;    public MembreService() {&#10;        super(new MembreDao());&#10;        this.dao = new MembreDao();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Membre&gt; listerTous() {&#10;        return dao.listerTous();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license&#10; * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template&#10; */&#10;package service;&#10;&#10;import dao.MembreDao;&#10;import entite.Membre;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; *&#10; * @author TCHAMIE&#10; */&#10;&#10;public class MembreService extends GenericService&lt;entite.Membre, Integer&gt; {&#10;    private MembreDao dao;&#10;&#10;    public MembreService() {&#10;        super(new MembreDao());&#10;        this.dao = new MembreDao();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Membre&gt; listerTous() {&#10;        return dao.listerTous();&#10;    }&#10;    &#10;    /**&#10;     * Récupère un membre par l'ID de son client&#10;     * @param clientId ID du client&#10;     * @return Membre associé au client ou null si non trouvé&#10;     */&#10;    public Membre getMembreByClientId(Integer clientId) {&#10;        return dao.getMembreByClientId(clientId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>